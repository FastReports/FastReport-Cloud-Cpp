/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdminDataSourceApi.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_CLIENT_AdminDataSourceApi_H_
#define FASTREPORT_CLOUD_CLIENT_AdminDataSourceApi_H_

#include "CloudKludge.h"
#include "../ApiClient.h"

#include "CreateDataSourceAdminVM.h"
#include "DataSourcePermissionsVM.h"
#include "DataSourceVM.h"
#include "DataSourcesVM.h"
#include "ProblemDetails.h"
#include "UpdateDataSourcePermissionsVM.h"
#include "UpdateDataSourceVM.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace fastreport {
namespace cloud {
namespace client {

using namespace fastreport::cloud::models;



class  AdminDataSourceApi 
{
public:

    explicit AdminDataSourceApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AdminDataSourceApi();

    /// <summary>
    /// Create new data source
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createVM">create VM (optional)</param>
    pplx::task<std::shared_ptr<DataSourceVM>> adminDataSourceCreateDataSource(
        boost::optional<std::shared_ptr<CreateDataSourceAdminVM>> createVM
    ) const;
    /// <summary>
    /// Delete datasource by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">datasource&#39;s id</param>
    pplx::task<void> adminDataSourceDeleteDataSource(
        utility::string_t id
    ) const;
    /// <summary>
    /// This should connect to a database and set data structure
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">datasource&#39;s id</param>
    pplx::task<void> adminDataSourceFetchData(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get datasource by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">datasource&#39;s id</param>
    pplx::task<std::shared_ptr<DataSourceVM>> adminDataSourceGetDataSource(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get list of datasources from database
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="skip">how many datasources will be skiped (optional, default to 0)</param>
    /// <param name="take">how many datasources will be taken (optional, default to 0)</param>
    /// <param name="subscriptionId">Allow filters by subscription ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<DataSourcesVM>> adminDataSourceGetDataSources(
        boost::optional<int32_t> skip,
        boost::optional<int32_t> take,
        boost::optional<utility::string_t> subscriptionId
    ) const;
    /// <summary>
    /// Get all Data source permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    pplx::task<std::shared_ptr<DataSourcePermissionsVM>> adminDataSourceGetPermissions(
        utility::string_t id
    ) const;
    /// <summary>
    /// Update datasource with update VM
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">datasource&#39;s id</param>
    /// <param name="updateVM">update VM (optional)</param>
    pplx::task<std::shared_ptr<DataSourceVM>> adminDataSourceUpdateDataSource(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateDataSourceVM>> updateVM
    ) const;
    /// <summary>
    /// Update permissions to datasource
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dataSourceId"></param>
    /// <param name="newPermissions"> (optional)</param>
    pplx::task<void> adminDataSourceUpdatePermissions(
        utility::string_t dataSourceId,
        boost::optional<std::shared_ptr<UpdateDataSourcePermissionsVM>> newPermissions
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}

#endif /* FASTREPORT_CLOUD_CLIENT_AdminDataSourceApi_H_ */

