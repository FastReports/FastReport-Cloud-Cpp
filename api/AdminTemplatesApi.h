/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdminTemplatesApi.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_CLIENT_AdminTemplatesApi_H_
#define FASTREPORT_CLOUD_CLIENT_AdminTemplatesApi_H_

#include "CloudKludge.h"
#include "../ApiClient.h"

#include "AdminTemplateFolderCreateVM.h"
#include "FilePermissionsVM.h"
#include "FileUpdateVM.h"
#include "FileVM.h"
#include "FilesVM.h"
#include "ProblemDetails.h"
#include "TemplateCreateAdminVM.h"
#include "TemplateVM.h"
#include "TemplatesVM.h"
#include "UpdateFilePermissionsVM.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace fastreport {
namespace cloud {
namespace client {

using namespace fastreport::cloud::models;



class  AdminTemplatesApi 
{
public:

    explicit AdminTemplatesApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AdminTemplatesApi();

    /// <summary>
    /// Delete specified folder
    /// </summary>
    /// <remarks>
    /// User with Delete permission can access the method.
    /// </remarks>
    /// <param name="id">folder id</param>
    /// <param name="recursive">delete folder&#39;s content (optional, default to false)</param>
    pplx::task<void> adminTemplateFoldersDeleteFolder(
        utility::string_t id,
        boost::optional<bool> recursive
    ) const;
    /// <summary>
    /// Returns a folder by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Identifier of a folder</param>
    pplx::task<std::shared_ptr<FileVM>> adminTemplateFoldersGetFolder(
        utility::string_t id
    ) const;
    /// <summary>
    /// Returns a list of folders
    /// </summary>
    /// <remarks>
    /// If no folders, then the endpoint will return empty list
    /// </remarks>
    /// <param name="skip">Variable for pagination, defautl value is 0 (optional, default to 0)</param>
    /// <param name="take">Variable for pagination, default value is 10 (optional, default to 0)</param>
    /// <param name="subscriptionId">Allows to filter by subscriptions ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<FilesVM>> adminTemplateFoldersGetFolders(
        boost::optional<int32_t> skip,
        boost::optional<int32_t> take,
        boost::optional<utility::string_t> subscriptionId
    ) const;
    /// <summary>
    /// Get all folder permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">folder id</param>
    pplx::task<std::shared_ptr<FilePermissionsVM>> adminTemplateFoldersGetPermissions(
        utility::string_t id
    ) const;
    /// <summary>
    /// Create a folder
    /// </summary>
    /// <remarks>
    /// User with a Create File permisison can access this method.
    /// </remarks>
    /// <param name="folderVm">folder create vm (optional)</param>
    pplx::task<std::shared_ptr<FileVM>> adminTemplateFoldersPostFolder(
        boost::optional<std::shared_ptr<AdminTemplateFolderCreateVM>> folderVm
    ) const;
    /// <summary>
    /// Update a folder
    /// </summary>
    /// <remarks>
    /// User with Create File permission can access this method.
    /// </remarks>
    /// <param name="id">folder id</param>
    /// <param name="folderVM">folder&#39;s view model (optional)</param>
    pplx::task<std::shared_ptr<FileVM>> adminTemplateFoldersUpdateFolder(
        utility::string_t id,
        boost::optional<std::shared_ptr<FileUpdateVM>> folderVM
    ) const;
    /// <summary>
    /// Revoke permission
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">folder id</param>
    /// <param name="newPermissions"> (optional)</param>
    pplx::task<void> adminTemplateFoldersUpdatePermissions(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateFilePermissionsVM>> newPermissions
    ) const;
    /// <summary>
    /// Delete specified file
    /// </summary>
    /// <remarks>
    /// User with Delete permission can access the method.
    /// </remarks>
    /// <param name="id">file id</param>
    pplx::task<void> adminTemplatesDeleteFile(
        utility::string_t id
    ) const;
    /// <summary>
    /// Returns a file by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Identifier of file</param>
    pplx::task<std::shared_ptr<TemplateVM>> adminTemplatesGetFile(
        utility::string_t id
    ) const;
    /// <summary>
    /// Returns a list of files
    /// </summary>
    /// <remarks>
    /// If no files, then the endpoint will return empty list
    /// </remarks>
    /// <param name="skip">Variable for pagination, defautl value is 0 (optional, default to 0)</param>
    /// <param name="take">Variable for pagination, default value is 10 (optional, default to 0)</param>
    /// <param name="subscriptionId">Subscription Id (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<TemplatesVM>> adminTemplatesGetFiles(
        boost::optional<int32_t> skip,
        boost::optional<int32_t> take,
        boost::optional<utility::string_t> subscriptionId
    ) const;
    /// <summary>
    /// Get all file permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<FilePermissionsVM>> adminTemplatesGetPermissions(
        utility::string_t id
    ) const;
    /// <summary>
    /// Update a file
    /// </summary>
    /// <remarks>
    /// User with Create Entity permission can access this method.
    /// </remarks>
    /// <param name="id">file id</param>
    /// <param name="fileVM">file&#39;s view model (optional)</param>
    pplx::task<std::shared_ptr<TemplateVM>> adminTemplatesUpdateFile(
        utility::string_t id,
        boost::optional<std::shared_ptr<FileUpdateVM>> fileVM
    ) const;
    /// <summary>
    /// Update permissions to file
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="newPermissions"> (optional)</param>
    pplx::task<void> adminTemplatesUpdatePermissions(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateFilePermissionsVM>> newPermissions
    ) const;
    /// <summary>
    /// Upload a file to the specified folder
    /// </summary>
    /// <remarks>
    /// User with Create Entity permission can access this method.
    /// </remarks>
    /// <param name="fileVM">file&#39;s view model (optional)</param>
    pplx::task<std::shared_ptr<TemplateVM>> adminTemplatesUploadFile(
        boost::optional<std::shared_ptr<TemplateCreateAdminVM>> fileVM
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}

#endif /* FASTREPORT_CLOUD_CLIENT_AdminTemplatesApi_H_ */

