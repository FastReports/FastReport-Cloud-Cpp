/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdminSubscriptionsApi.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_CLIENT_AdminSubscriptionsApi_H_
#define FASTREPORT_CLOUD_CLIENT_AdminSubscriptionsApi_H_

#include "CloudKludge.h"
#include "../ApiClient.h"

#include "AdminSubscriptionVM.h"
#include "AdminSubscriptionsVM.h"
#include "CreateSubscriptionVM.h"
#include "ProblemDetails.h"
#include "SubscriptionPermissionsVM.h"
#include "UpdateSubscriptionPermissionsVM.h"
#include "UpdateSubscriptionVM.h"
#include <map>
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace fastreport {
namespace cloud {
namespace client {

using namespace fastreport::cloud::models;



class  AdminSubscriptionsApi 
{
public:

    explicit AdminSubscriptionsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AdminSubscriptionsApi();

    /// <summary>
    /// Create a new subscription based on some plan
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="viewModel">View model (optional)</param>
    pplx::task<std::shared_ptr<AdminSubscriptionVM>> adminSubscriptionsCreateSubscription(
        boost::optional<std::shared_ptr<CreateSubscriptionVM>> viewModel
    ) const;
    /// <summary>
    /// Delete the subscription by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Identifier of subscription</param>
    pplx::task<void> adminSubscriptionsDeleteSubscription(
        utility::string_t id
    ) const;
    /// <summary>
    /// Returns a key-value pair of new(renew) subscriptions count per month for a specified time span: (month, number of new subscriptions)
    /// </summary>
    /// <remarks>
    /// If no subscriptions, then the endpoint will return empty dic
    /// </remarks>
    /// <param name="from">A starting date for stats calculation</param>
    /// <param name="to">An ending date for stats calculation</param>
    pplx::task<std::map<utility::string_t, int32_t>> adminSubscriptionsGetNewSibscriptionsPerMonth(
        utility::datetime from,
        utility::datetime to
    ) const;
    /// <summary>
    /// Get all subscription permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<SubscriptionPermissionsVM>> adminSubscriptionsGetPermissions(
        utility::string_t id
    ) const;
    /// <summary>
    /// Returns the subscription by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Identifier of subscription</param>
    pplx::task<std::shared_ptr<AdminSubscriptionVM>> adminSubscriptionsGetSubscription(
        utility::string_t id
    ) const;
    /// <summary>
    /// Returns a list of all subscriptions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="skip">Variable for pagination, defautl value is 0 (optional, default to 0)</param>
    /// <param name="take">Variable for pagination, default value is 10 (optional, default to 0)</param>
    pplx::task<std::shared_ptr<AdminSubscriptionsVM>> adminSubscriptionsGetSubscriptions(
        boost::optional<int32_t> skip,
        boost::optional<int32_t> take
    ) const;
    /// <summary>
    /// Recount subscription&#39;s files and folders sizes.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Identifier of subscription</param>
    pplx::task<void> adminSubscriptionsReCountSubscription(
        utility::string_t id
    ) const;
    /// <summary>
    /// Update permissions to subscription
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">subscription id</param>
    /// <param name="permissionsVM">permissions VM (optional)</param>
    pplx::task<void> adminSubscriptionsUpdatePermissions(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateSubscriptionPermissionsVM>> permissionsVM
    ) const;
    /// <summary>
    /// Update the subscription by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Identifier of subscription</param>
    /// <param name="viewModel">View model (optional)</param>
    pplx::task<std::shared_ptr<AdminSubscriptionVM>> adminSubscriptionsUpdateSubscription(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateSubscriptionVM>> viewModel
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}

#endif /* FASTREPORT_CLOUD_CLIENT_AdminSubscriptionsApi_H_ */

