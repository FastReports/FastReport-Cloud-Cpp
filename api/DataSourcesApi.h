/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataSourcesApi.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_CLIENT_DataSourcesApi_H_
#define FASTREPORT_CLOUD_CLIENT_DataSourcesApi_H_

#include "CloudKludge.h"
#include "../ApiClient.h"

#include "CreateDataSourceVM.h"
#include "DataSourcePermissionsVM.h"
#include "DataSourceVM.h"
#include "DataSourcesVM.h"
#include "ProblemDetails.h"
#include "RenameDataSourceVM.h"
#include "UpdateDataSourceConnectionStringVM.h"
#include "UpdateDataSourcePermissionsVM.h"
#include "UpdateDataSourceSubscriptionVM.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace fastreport {
namespace cloud {
namespace client {

using namespace fastreport::cloud::models;



class  DataSourcesApi 
{
public:

    explicit DataSourcesApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DataSourcesApi();

    /// <summary>
    /// Create new data source
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="viewModel">create viewmodel (optional)</param>
    pplx::task<std::shared_ptr<DataSourceVM>> dataSourcesCreateDataSource(
        boost::optional<std::shared_ptr<CreateDataSourceVM>> viewModel
    ) const;
    /// <summary>
    /// Delete data source by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    pplx::task<void> dataSourcesDeleteDataSource(
        utility::string_t id
    ) const;
    /// <summary>
    /// This should connect to a database and set data structure
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">datasource&#39;s id</param>
    pplx::task<void> dataSourcesFetchData(
        utility::string_t id
    ) const;
    /// <summary>
    /// Returns all of the data sources, that current user have permission for in a subscription  if subscription id is null, returns all data sources, that current user have permission for
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="subscriptionId">subscription id (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="skip">how many data sources will be skipped (optional, default to 0)</param>
    /// <param name="take">how many data sources will be taken (optional, default to 0)</param>
    pplx::task<std::shared_ptr<DataSourcesVM>> dataSourcesGetAvailableDataSources(
        boost::optional<utility::string_t> subscriptionId,
        boost::optional<int32_t> skip,
        boost::optional<int32_t> take
    ) const;
    /// <summary>
    /// Get data source by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    pplx::task<std::shared_ptr<DataSourceVM>> dataSourcesGetDataSource(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get all Data source permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    pplx::task<std::shared_ptr<DataSourcePermissionsVM>> dataSourcesGetPermissions(
        utility::string_t id
    ) const;
    /// <summary>
    /// Rename data source by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    /// <param name="renameModel">rename viewmodel (optional)</param>
    pplx::task<std::shared_ptr<DataSourceVM>> dataSourcesRenameDataSource(
        utility::string_t id,
        boost::optional<std::shared_ptr<RenameDataSourceVM>> renameModel
    ) const;
    /// <summary>
    /// Update data source&#39;s connection string by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    /// <param name="updateModel">update viewmodel (optional)</param>
    pplx::task<std::shared_ptr<DataSourceVM>> dataSourcesUpdateConnectionString(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateDataSourceConnectionStringVM>> updateModel
    ) const;
    /// <summary>
    /// Update permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="permissionsVM"> (optional)</param>
    pplx::task<void> dataSourcesUpdatePermissions(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateDataSourcePermissionsVM>> permissionsVM
    ) const;
    /// <summary>
    /// Update data source&#39;s subscription
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    /// <param name="updatesubscriptionModel">update subscription viewmodel (optional)</param>
    pplx::task<void> dataSourcesUpdateSubscriptionDataSource(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateDataSourceSubscriptionVM>> updatesubscriptionModel
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}

#endif /* FASTREPORT_CLOUD_CLIENT_DataSourcesApi_H_ */

