/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ServerConfigurationVM.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_MODELS_ServerConfigurationVM_H_
#define FASTREPORT_CLOUD_MODELS_ServerConfigurationVM_H_

#include "CloudKludge.h"
#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/AuthConfigVM.h"
#include "CppRestOpenAPIClient/model/FrontendApp.h"

namespace fastreport {
namespace cloud {
namespace models {

class FrontendApp;
class AuthConfigVM;

/// <summary>
/// 
/// </summary>
class  ServerConfigurationVM
    : public ModelBase
{
public:
    ServerConfigurationVM();
    virtual ~ServerConfigurationVM();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ServerConfigurationVM members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTitle() const;
    bool titleIsSet() const;
    void unsettitle();

    void setTitle(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLogoLink() const;
    bool logoLinkIsSet() const;
    void unsetlogoLink();

    void setLogoLink(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCopyright() const;
    bool copyrightIsSet() const;
    void unsetcopyright();

    void setCopyright(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isCorporateServerMode() const;
    bool corporateServerModeIsSet() const;
    void unsetcorporateServerMode();

    void setCorporateServerMode(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getLastSLAVersion() const;
    bool lastSLAVersionIsSet() const;
    void unsetlastSLAVersion();

    void setLastSLAVersion(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsDisabled() const;
    bool isDisabledIsSet() const;
    void unsetisDisabled();

    void setIsDisabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FrontendApp> getFrontend() const;
    bool frontendIsSet() const;
    void unsetfrontend();

    void setFrontend(const std::shared_ptr<FrontendApp>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInvariantLocale() const;
    bool invariantLocaleIsSet() const;
    void unsetinvariantLocale();

    void setInvariantLocale(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AuthConfigVM> getAuth() const;
    bool authIsSet() const;
    void unsetauth();

    void setAuth(const std::shared_ptr<AuthConfigVM>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isDesignerForAnons() const;
    bool designerForAnonsIsSet() const;
    void unsetdesignerForAnons();

    void setDesignerForAnons(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSlaLink() const;
    bool slaLinkIsSet() const;
    void unsetslaLink();

    void setSlaLink(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFirstStepsVideoLink() const;
    bool firstStepsVideoLinkIsSet() const;
    void unsetfirstStepsVideoLink();

    void setFirstStepsVideoLink(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAboutLink() const;
    bool aboutLinkIsSet() const;
    void unsetaboutLink();

    void setAboutLink(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHomePageLink() const;
    bool homePageLinkIsSet() const;
    void unsethomePageLink();

    void setHomePageLink(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAuthServerName() const;
    bool authServerNameIsSet() const;
    void unsetauthServerName();

    void setAuthServerName(const utility::string_t& value);


protected:
    utility::string_t m_title;
    bool m_titleIsSet;
    utility::string_t m_logoLink;
    bool m_logoLinkIsSet;
    utility::string_t m_copyright;
    bool m_copyrightIsSet;
    bool m_corporateServerMode;
    bool m_corporateServerModeIsSet;
    utility::datetime m_lastSLAVersion;
    bool m_lastSLAVersionIsSet;
    bool m_isDisabled;
    bool m_isDisabledIsSet;
    std::shared_ptr<FrontendApp> m_frontend;
    bool m_frontendIsSet;
    utility::string_t m_invariantLocale;
    bool m_invariantLocaleIsSet;
    std::shared_ptr<AuthConfigVM> m_auth;
    bool m_authIsSet;
    bool m_designerForAnons;
    bool m_designerForAnonsIsSet;
    utility::string_t m_slaLink;
    bool m_slaLinkIsSet;
    utility::string_t m_firstStepsVideoLink;
    bool m_firstStepsVideoLinkIsSet;
    utility::string_t m_aboutLink;
    bool m_aboutLinkIsSet;
    utility::string_t m_homePageLink;
    bool m_homePageLinkIsSet;
    utility::string_t m_authServerName;
    bool m_authServerNameIsSet;
};


}
}
}

#endif /* FASTREPORT_CLOUD_MODELS_ServerConfigurationVM_H_ */
