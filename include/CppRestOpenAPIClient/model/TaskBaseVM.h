/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TaskBaseVM.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_MODELS_TaskBaseVM_H_
#define FASTREPORT_CLOUD_MODELS_TaskBaseVM_H_


#include "CppRestOpenAPIClient/model/TaskEnd.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/CloudBaseVM.h"

namespace fastreport {
namespace cloud {
namespace models {

class TaskEnd;

/// <summary>
/// 
/// </summary>
class  TaskBaseVM
    : public CloudBaseVM
{
public:
    TaskBaseVM();
    virtual ~TaskBaseVM();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TaskBaseVM members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCronExpression() const;
    bool cronExpressionIsSet() const;
    void unsetcronExpression();

    void setCronExpression(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getStartsOn() const;
    bool startsOnIsSet() const;
    void unsetstartsOn();

    void setStartsOn(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaskEnd> getEnds() const;
    bool endsIsSet() const;
    void unsetends();

    void setEnds(const std::shared_ptr<TaskEnd>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetid();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetname();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecurrentRunTime() const;
    bool recurrentRunTimeIsSet() const;
    void unsetrecurrentRunTime();

    void setRecurrentRunTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecurrentWasRunTime() const;
    bool recurrentWasRunTimeIsSet() const;
    void unsetrecurrentWasRunTime();

    void setRecurrentWasRunTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSubscriptionId() const;
    bool subscriptionIdIsSet() const;
    void unsetsubscriptionId();

    void setSubscriptionId(const utility::string_t& value);


protected:
    utility::string_t m_cronExpression;
    bool m_cronExpressionIsSet;
    utility::datetime m_startsOn;
    bool m_startsOnIsSet;
    std::shared_ptr<TaskEnd> m_ends;
    bool m_endsIsSet;
    utility::string_t m_id;
    bool m_idIsSet;
    utility::string_t m_name;
    bool m_nameIsSet;
    utility::datetime m_recurrentRunTime;
    bool m_recurrentRunTimeIsSet;
    utility::datetime m_recurrentWasRunTime;
    bool m_recurrentWasRunTimeIsSet;
    utility::string_t m_subscriptionId;
    bool m_subscriptionIdIsSet;
};


}
}
}

#endif /* FASTREPORT_CLOUD_MODELS_TaskBaseVM_H_ */
