/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MyPermissionsVM.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_MODELS_MyPermissionsVM_H_
#define FASTREPORT_CLOUD_MODELS_MyPermissionsVM_H_


#include "CppRestOpenAPIClient/model/DataSourcePermissionCRUDVM.h"
#include "CppRestOpenAPIClient/model/TaskPermissionCRUDVM.h"
#include "CppRestOpenAPIClient/model/GroupPermissionCRUDVM.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/CloudBaseVM.h"
#include "CppRestOpenAPIClient/model/FilePermissionCRUDVM.h"
#include "CppRestOpenAPIClient/model/SubscriptionPermissionCRUDVM.h"

namespace fastreport {
namespace cloud {
namespace models {

class SubscriptionPermissionCRUDVM;
class FilePermissionCRUDVM;
class DataSourcePermissionCRUDVM;
class GroupPermissionCRUDVM;
class TaskPermissionCRUDVM;

/// <summary>
/// 
/// </summary>
class  MyPermissionsVM
    : public CloudBaseVM
{
public:
    MyPermissionsVM();
    virtual ~MyPermissionsVM();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// MyPermissionsVM members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SubscriptionPermissionCRUDVM> getSubscription() const;
    bool subscriptionIsSet() const;
    void unsetsubscription();

    void setSubscription(const std::shared_ptr<SubscriptionPermissionCRUDVM>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FilePermissionCRUDVM> getFiles() const;
    bool filesIsSet() const;
    void unsetfiles();

    void setFiles(const std::shared_ptr<FilePermissionCRUDVM>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataSourcePermissionCRUDVM> getDatasources() const;
    bool datasourcesIsSet() const;
    void unsetdatasources();

    void setDatasources(const std::shared_ptr<DataSourcePermissionCRUDVM>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GroupPermissionCRUDVM> getGroups() const;
    bool groupsIsSet() const;
    void unsetgroups();

    void setGroups(const std::shared_ptr<GroupPermissionCRUDVM>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaskPermissionCRUDVM> getTasks() const;
    bool tasksIsSet() const;
    void unsettasks();

    void setTasks(const std::shared_ptr<TaskPermissionCRUDVM>& value);


protected:
    std::shared_ptr<SubscriptionPermissionCRUDVM> m_subscription;
    bool m_subscriptionIsSet;
    std::shared_ptr<FilePermissionCRUDVM> m_files;
    bool m_filesIsSet;
    std::shared_ptr<DataSourcePermissionCRUDVM> m_datasources;
    bool m_datasourcesIsSet;
    std::shared_ptr<GroupPermissionCRUDVM> m_groups;
    bool m_groupsIsSet;
    std::shared_ptr<TaskPermissionCRUDVM> m_tasks;
    bool m_tasksIsSet;
};


}
}
}

#endif /* FASTREPORT_CLOUD_MODELS_MyPermissionsVM_H_ */
