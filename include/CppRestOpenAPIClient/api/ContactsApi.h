/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ContactsApi.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_CLIENT_ContactsApi_H_
#define FASTREPORT_CLOUD_CLIENT_ContactsApi_H_

#include "CloudKludge.h"

#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/ContactVM.h"
#include "CppRestOpenAPIClient/model/ContactsVM.h"
#include "CppRestOpenAPIClient/model/CreateContactVM.h"
#include "CppRestOpenAPIClient/model/ProblemDetails.h"
#include "CppRestOpenAPIClient/model/UpdateContactVM.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace fastreport {
namespace cloud {
namespace client {

using namespace fastreport::cloud::models;



class  ContactsApi 
{
public:

    explicit ContactsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ContactsApi();

    /// <summary>
    /// Creates new contact
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createContactVM"> (optional)</param>
    pplx::task<std::shared_ptr<ContactVM>> contactsCreate(
        boost::optional<std::shared_ptr<CreateContactVM>> createContactVM
    ) const;
    /// <summary>
    /// Removes contact by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> contactsDelete(
        utility::string_t id
    ) const;
    /// <summary>
    /// Returns contact group by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ContactVM>> contactsGet(
        utility::string_t id
    ) const;
    /// <summary>
    /// Returns contacts by group id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="groupId"></param>
    /// <param name="skip"> (optional, default to 0)</param>
    /// <param name="take"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ContactsVM>> contactsGetByGroup(
        utility::string_t groupId,
        boost::optional<int32_t> skip,
        boost::optional<int32_t> take
    ) const;
    /// <summary>
    /// Allows to search for contacts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="subscriptionId"></param>
    /// <param name="skip"> (optional, default to 0)</param>
    /// <param name="take"> (optional, default to 0)</param>
    /// <param name="searchPattern"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ContactsVM>> contactsGetList(
        utility::string_t subscriptionId,
        boost::optional<int32_t> skip,
        boost::optional<int32_t> take,
        boost::optional<utility::string_t> searchPattern
    ) const;
    /// <summary>
    /// Updates contact by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="updateContactVM"> (optional)</param>
    pplx::task<std::shared_ptr<ContactVM>> contactsUpdate(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateContactVM>> updateContactVM
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}

#endif /* FASTREPORT_CLOUD_CLIENT_ContactsApi_H_ */

