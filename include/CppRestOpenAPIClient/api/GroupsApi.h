/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GroupsApi.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_CLIENT_GroupsApi_H_
#define FASTREPORT_CLOUD_CLIENT_GroupsApi_H_

#include "CloudKludge.h"

#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CreateGroupVM.h"
#include "CppRestOpenAPIClient/model/GroupPermissionsVM.h"
#include "CppRestOpenAPIClient/model/GroupVM.h"
#include "CppRestOpenAPIClient/model/GroupsVM.h"
#include "CppRestOpenAPIClient/model/ProblemDetails.h"
#include "CppRestOpenAPIClient/model/RenameGroupVM.h"
#include "CppRestOpenAPIClient/model/UpdateGroupPermissionsVM.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace fastreport {
namespace cloud {
namespace client {

using namespace fastreport::cloud::models;



class  GroupsApi 
{
public:

    explicit GroupsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~GroupsApi();

    /// <summary>
    /// Create a new user group
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createGroupVM">Model for creating (optional)</param>
    pplx::task<std::shared_ptr<GroupVM>> groupsCreateGroup(
        boost::optional<std::shared_ptr<CreateGroupVM>> createGroupVM
    ) const;
    /// <summary>
    /// Delete group by identifier
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Identifier of group</param>
    pplx::task<void> groupsDeleteGroup(
        utility::string_t id
    ) const;
    /// <summary>
    /// Gets group by identifier
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Identifier of group</param>
    pplx::task<std::shared_ptr<GroupVM>> groupsGetGroup(
        utility::string_t id
    ) const;
    /// <summary>
    /// Returns a list of current user&#39;s groups&lt;br /&gt;  This method will return following data about groups : &lt;br /&gt;  Id, Name, Created time (UTC), Edited time (UTC), creator id, &lt;br /&gt;  editor id, subscription id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="skip">How many groups need to skip (optional, default to 0)</param>
    /// <param name="take">How many groups need to take (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GroupsVM>> groupsGetGroupList(
        boost::optional<int32_t> skip,
        boost::optional<int32_t> take
    ) const;
    /// <summary>
    /// Gets group permissions by identifier
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Identifier of group</param>
    pplx::task<std::shared_ptr<GroupPermissionsVM>> groupsGetPermissions(
        utility::string_t id
    ) const;
    /// <summary>
    /// Rename group by identifier
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Identifier of group</param>
    /// <param name="renameGroupVM">Model for renaming</param>
    pplx::task<std::shared_ptr<GroupVM>> groupsRenameGroup(
        utility::string_t id,
        std::shared_ptr<RenameGroupVM> renameGroupVM
    ) const;
    /// <summary>
    /// Update permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="updateGroupPermissionsVM"> (optional)</param>
    pplx::task<void> groupsUpdatePermissions(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateGroupPermissionsVM>> updateGroupPermissionsVM
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}

#endif /* FASTREPORT_CLOUD_CLIENT_GroupsApi_H_ */

