/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TasksApi.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_CLIENT_TasksApi_H_
#define FASTREPORT_CLOUD_CLIENT_TasksApi_H_

#include "CloudKludge.h"

#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CreateTaskBaseVM.h"
#include "CppRestOpenAPIClient/model/ProblemDetails.h"
#include "CppRestOpenAPIClient/model/RunTaskBaseVM.h"
#include "CppRestOpenAPIClient/model/TaskBaseVM.h"
#include "CppRestOpenAPIClient/model/TaskPermissionsVM.h"
#include "CppRestOpenAPIClient/model/TasksVM.h"
#include "CppRestOpenAPIClient/model/UpdateTaskBaseVM.h"
#include "CppRestOpenAPIClient/model/UpdateTaskPermissionsVM.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace fastreport {
namespace cloud {
namespace client {

using namespace fastreport::cloud::models;



class  TasksApi 
{
public:

    explicit TasksApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~TasksApi();

    /// <summary>
    /// Create a new task
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createTaskBaseVM">task&#39;s view model. You have to specify task type (type: \&quot;ExportTemplate\&quot;) (optional)</param>
    pplx::task<std::shared_ptr<TaskBaseVM>> tasksCreateTask(
        boost::optional<std::shared_ptr<CreateTaskBaseVM>> createTaskBaseVM
    ) const;
    /// <summary>
    /// Delete a task from a storage
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="taskId">deleting task id</param>
    pplx::task<void> tasksDeleteTask(
        utility::string_t taskId
    ) const;
    /// <summary>
    /// Get a task by a specified id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="taskId">a task id</param>
    pplx::task<std::shared_ptr<TaskBaseVM>> tasksGet(
        utility::string_t taskId
    ) const;
    /// <summary>
    /// Get tasks list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="skip">number of tasks, that have to be skipped (optional, default to 0)</param>
    /// <param name="take">number of tasks, that have to be returned (optional, default to 0)</param>
    /// <param name="subscriptionId">subscription id (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="searchPattern"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<TasksVM>> tasksGetList(
        boost::optional<int32_t> skip,
        boost::optional<int32_t> take,
        boost::optional<utility::string_t> subscriptionId,
        boost::optional<utility::string_t> searchPattern
    ) const;
    /// <summary>
    /// Get all Task permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">task id</param>
    pplx::task<std::shared_ptr<TaskPermissionsVM>> tasksGetPermissions(
        utility::string_t id
    ) const;
    /// <summary>
    /// Rename a task
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="taskId">renaming task id</param>
    /// <param name="newName">task&#39;s new Name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<TaskBaseVM>> tasksRenameTask(
        utility::string_t taskId,
        boost::optional<utility::string_t> newName
    ) const;
    /// <summary>
    /// Run a task from request body
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="runTaskBaseVM">task&#39;s view model (optional)</param>
    pplx::task<void> tasksRunTask(
        boost::optional<std::shared_ptr<RunTaskBaseVM>> runTaskBaseVM
    ) const;
    /// <summary>
    /// Run a task by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="taskId">task id</param>
    pplx::task<void> tasksRunTaskById(
        utility::string_t taskId
    ) const;
    /// <summary>
    /// Update permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">task id</param>
    /// <param name="updateTaskPermissionsVM">new permissions (optional)</param>
    pplx::task<void> tasksUpdatePermissions(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateTaskPermissionsVM>> updateTaskPermissionsVM
    ) const;
    /// <summary>
    /// Update a task
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="taskId">updating task id</param>
    /// <param name="updateTaskBaseVM">task&#39;s view model. You have to specify task type (type: \&quot;ExportTemplate\&quot;) (optional)</param>
    pplx::task<std::shared_ptr<TaskBaseVM>> tasksUpdateTask(
        utility::string_t taskId,
        boost::optional<std::shared_ptr<UpdateTaskBaseVM>> updateTaskBaseVM
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}

#endif /* FASTREPORT_CLOUD_CLIENT_TasksApi_H_ */

