/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataSourcesApi.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_CLIENT_DataSourcesApi_H_
#define FASTREPORT_CLOUD_CLIENT_DataSourcesApi_H_

#include "CloudKludge.h"

#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CreateDataSourceVM.h"
#include "CppRestOpenAPIClient/model/DataSourceConnectionType.h"
#include "CppRestOpenAPIClient/model/DataSourceParameterTypesVM.h"
#include "CppRestOpenAPIClient/model/DataSourcePermissionsVM.h"
#include "CppRestOpenAPIClient/model/DataSourceSorting.h"
#include "CppRestOpenAPIClient/model/DataSourceVM.h"
#include "CppRestOpenAPIClient/model/DataSourcesVM.h"
#include "CppRestOpenAPIClient/model/ProblemDetails.h"
#include "CppRestOpenAPIClient/model/RenameDataSourceVM.h"
#include "CppRestOpenAPIClient/model/UpdateDataSourceConnectionStringVM.h"
#include "CppRestOpenAPIClient/model/UpdateDataSourcePermissionsVM.h"
#include "CppRestOpenAPIClient/model/UpdateDataSourceSelectCommandsVM.h"
#include "CppRestOpenAPIClient/model/UpdateDataSourceSubscriptionVM.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace fastreport {
namespace cloud {
namespace client {

using namespace fastreport::cloud::models;



class  DataSourcesApi 
{
public:

    explicit DataSourcesApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DataSourcesApi();

    /// <summary>
    /// Returns a number of data sources in subscription
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="subscriptionId">subscripiton id</param>
    pplx::task<int64_t> dataSourcesCountDataSourcesAsync(
        utility::string_t subscriptionId
    ) const;
    /// <summary>
    /// Create new data source
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createDataSourceVM">create viewmodel (optional)</param>
    pplx::task<std::shared_ptr<DataSourceVM>> dataSourcesCreateDataSource(
        boost::optional<std::shared_ptr<CreateDataSourceVM>> createDataSourceVM
    ) const;
    /// <summary>
    /// Delete data source by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    pplx::task<void> dataSourcesDeleteDataSource(
        utility::string_t id
    ) const;
    /// <summary>
    /// This should connect to a database and set data structure
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">datasource&#39;s id</param>
    pplx::task<void> dataSourcesFetchData(
        utility::string_t id
    ) const;
    /// <summary>
    /// Returns all of the data sources, that current user have permission for in a subscription &lt;br /&gt;  The method will return minimal infomration about the datasources: &lt;br /&gt;  id, name, editedTime, status.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="subscriptionId">id of subscription where the datasources are located (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="skip">how many data sources will be skipped (optional, default to 0)</param>
    /// <param name="take">how many data sources will be taken (optional, default to 0)</param>
    /// <param name="orderBy">field to order by (optional, default to new DataSourceSorting())</param>
    /// <param name="desc">descending sort (optional, default to false)</param>
    pplx::task<std::shared_ptr<DataSourcesVM>> dataSourcesGetAvailableDataSources(
        boost::optional<utility::string_t> subscriptionId,
        boost::optional<int32_t> skip,
        boost::optional<int32_t> take,
        boost::optional<std::shared_ptr<DataSourceSorting>> orderBy,
        boost::optional<bool> desc
    ) const;
    /// <summary>
    /// Get data source by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    pplx::task<std::shared_ptr<DataSourceVM>> dataSourcesGetDataSource(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get data source parameter DataType&#39;s
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dataSourceType">data source type (MsSql, MySql, etc.)</param>
    pplx::task<std::shared_ptr<DataSourceParameterTypesVM>> dataSourcesGetParameterTypes(
        std::shared_ptr<DataSourceConnectionType> dataSourceType
    ) const;
    /// <summary>
    /// Get all Data source permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    pplx::task<std::shared_ptr<DataSourcePermissionsVM>> dataSourcesGetPermissions(
        utility::string_t id
    ) const;
    /// <summary>
    /// Rename data source by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    /// <param name="renameDataSourceVM">rename viewmodel (optional)</param>
    pplx::task<std::shared_ptr<DataSourceVM>> dataSourcesRenameDataSource(
        utility::string_t id,
        boost::optional<std::shared_ptr<RenameDataSourceVM>> renameDataSourceVM
    ) const;
    /// <summary>
    /// Update data source&#39;s connection string by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    /// <param name="updateDataSourceConnectionStringVM">update viewmodel (optional)</param>
    pplx::task<std::shared_ptr<DataSourceVM>> dataSourcesUpdateConnectionString(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateDataSourceConnectionStringVM>> updateDataSourceConnectionStringVM
    ) const;
    /// <summary>
    /// Update permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="updateDataSourcePermissionsVM"> (optional)</param>
    pplx::task<void> dataSourcesUpdatePermissions(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateDataSourcePermissionsVM>> updateDataSourcePermissionsVM
    ) const;
    /// <summary>
    /// Update data source&#39;s select commands by id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    /// <param name="updateDataSourceSelectCommandsVM">update viewmodel (optional)</param>
    pplx::task<std::shared_ptr<DataSourceVM>> dataSourcesUpdateSelectCommands(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateDataSourceSelectCommandsVM>> updateDataSourceSelectCommandsVM
    ) const;
    /// <summary>
    /// Update data source&#39;s subscription
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">data source id</param>
    /// <param name="updateDataSourceSubscriptionVM">update subscription viewmodel (optional)</param>
    pplx::task<void> dataSourcesUpdateSubscriptionDataSource(
        utility::string_t id,
        boost::optional<std::shared_ptr<UpdateDataSourceSubscriptionVM>> updateDataSourceSubscriptionVM
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}

#endif /* FASTREPORT_CLOUD_CLIENT_DataSourcesApi_H_ */

