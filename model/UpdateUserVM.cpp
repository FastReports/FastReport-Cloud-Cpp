/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UpdateUserVM.h"

namespace fastreport {
namespace cloud {
namespace models {




UpdateUserVM::UpdateUserVM()
{
    m_subscriptionsIsSet = false;
    m_groupsIsSet = false;
    m_adminPermissionIsSet = false;
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_username = utility::conversions::to_string_t("");
    m_usernameIsSet = false;
    m_email = utility::conversions::to_string_t("");
    m_emailIsSet = false;
    m_password = utility::conversions::to_string_t("");
    m_passwordIsSet = false;
    m_isAdmin = false;
    m_isAdminIsSet = false;
    m_provider = utility::conversions::to_string_t("");
    m_providerIsSet = false;
}

UpdateUserVM::~UpdateUserVM()
{
}

void UpdateUserVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdateUserVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_subscriptionsIsSet)
    {
        val[utility::conversions::to_string_t("subscriptions")] = ModelBase::toJson(m_subscriptions);
    }
    if(m_groupsIsSet)
    {
        val[utility::conversions::to_string_t("groups")] = ModelBase::toJson(m_groups);
    }
    if(m_adminPermissionIsSet)
    {
        val[utility::conversions::to_string_t("adminPermission")] = ModelBase::toJson(m_adminPermission);
    }
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_name);
    }
    if(m_usernameIsSet)
    {
        val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_username);
    }
    if(m_emailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_email);
    }
    if(m_passwordIsSet)
    {
        val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_password);
    }
    if(m_isAdminIsSet)
    {
        val[utility::conversions::to_string_t("isAdmin")] = ModelBase::toJson(m_isAdmin);
    }
    if(m_providerIsSet)
    {
        val[utility::conversions::to_string_t("provider")] = ModelBase::toJson(m_provider);
    }

    return val;
}

bool UpdateUserVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("subscriptions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscriptions"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_subscriptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscriptions);
            setSubscriptions(refVal_subscriptions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groups")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groups"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_groups;
            ok &= ModelBase::fromJson(fieldValue, refVal_groups);
            setGroups(refVal_groups);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("adminPermission")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("adminPermission"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdminPermission> refVal_adminPermission;
            ok &= ModelBase::fromJson(fieldValue, refVal_adminPermission);
            setAdminPermission(refVal_adminPermission);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("username"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_username;
            ok &= ModelBase::fromJson(fieldValue, refVal_username);
            setUsername(refVal_username);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("password")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("password"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_password;
            ok &= ModelBase::fromJson(fieldValue, refVal_password);
            setPassword(refVal_password);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isAdmin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isAdmin"));
        if(!fieldValue.is_null())
        {
            bool refVal_isAdmin;
            ok &= ModelBase::fromJson(fieldValue, refVal_isAdmin);
            setIsAdmin(refVal_isAdmin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("provider")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("provider"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_provider;
            ok &= ModelBase::fromJson(fieldValue, refVal_provider);
            setProvider(refVal_provider);
        }
    }
    return ok;
}

void UpdateUserVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_subscriptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscriptions"), m_subscriptions));
    }
    if(m_groupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groups"), m_groups));
    }
    if(m_adminPermissionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("adminPermission"), m_adminPermission));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_name));
    }
    if(m_usernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_username));
    }
    if(m_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_email));
    }
    if(m_passwordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("password"), m_password));
    }
    if(m_isAdminIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isAdmin"), m_isAdmin));
    }
    if(m_providerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("provider"), m_provider));
    }
}

bool UpdateUserVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("subscriptions")))
    {
        std::vector<utility::string_t> refVal_subscriptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscriptions")), refVal_subscriptions );
        setSubscriptions(refVal_subscriptions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groups")))
    {
        std::vector<utility::string_t> refVal_groups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groups")), refVal_groups );
        setGroups(refVal_groups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("adminPermission")))
    {
        std::shared_ptr<AdminPermission> refVal_adminPermission;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("adminPermission")), refVal_adminPermission );
        setAdminPermission(refVal_adminPermission);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("username")))
    {
        utility::string_t refVal_username;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("username")), refVal_username );
        setUsername(refVal_username);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        utility::string_t refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email")), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("password")))
    {
        utility::string_t refVal_password;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("password")), refVal_password );
        setPassword(refVal_password);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isAdmin")))
    {
        bool refVal_isAdmin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isAdmin")), refVal_isAdmin );
        setIsAdmin(refVal_isAdmin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("provider")))
    {
        utility::string_t refVal_provider;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("provider")), refVal_provider );
        setProvider(refVal_provider);
    }
    return ok;
}

std::vector<utility::string_t>& UpdateUserVM::getSubscriptions()
{
    return m_subscriptions;
}

void UpdateUserVM::setSubscriptions(const std::vector<utility::string_t>& value)
{
    m_subscriptions = value;
    m_subscriptionsIsSet = true;
}

bool UpdateUserVM::subscriptionsIsSet() const
{
    return m_subscriptionsIsSet;
}

void UpdateUserVM::unsetsubscriptions()
{
    m_subscriptionsIsSet = false;
}
std::vector<utility::string_t>& UpdateUserVM::getGroups()
{
    return m_groups;
}

void UpdateUserVM::setGroups(const std::vector<utility::string_t>& value)
{
    m_groups = value;
    m_groupsIsSet = true;
}

bool UpdateUserVM::groupsIsSet() const
{
    return m_groupsIsSet;
}

void UpdateUserVM::unsetgroups()
{
    m_groupsIsSet = false;
}
std::shared_ptr<AdminPermission> UpdateUserVM::getAdminPermission() const
{
    return m_adminPermission;
}

void UpdateUserVM::setAdminPermission(const std::shared_ptr<AdminPermission>& value)
{
    m_adminPermission = value;
    m_adminPermissionIsSet = true;
}

bool UpdateUserVM::adminPermissionIsSet() const
{
    return m_adminPermissionIsSet;
}

void UpdateUserVM::unsetadminPermission()
{
    m_adminPermissionIsSet = false;
}
utility::string_t UpdateUserVM::getName() const
{
    return m_name;
}

void UpdateUserVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool UpdateUserVM::nameIsSet() const
{
    return m_nameIsSet;
}

void UpdateUserVM::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t UpdateUserVM::getUsername() const
{
    return m_username;
}

void UpdateUserVM::setUsername(const utility::string_t& value)
{
    m_username = value;
    m_usernameIsSet = true;
}

bool UpdateUserVM::usernameIsSet() const
{
    return m_usernameIsSet;
}

void UpdateUserVM::unsetusername()
{
    m_usernameIsSet = false;
}
utility::string_t UpdateUserVM::getEmail() const
{
    return m_email;
}

void UpdateUserVM::setEmail(const utility::string_t& value)
{
    m_email = value;
    m_emailIsSet = true;
}

bool UpdateUserVM::emailIsSet() const
{
    return m_emailIsSet;
}

void UpdateUserVM::unsetemail()
{
    m_emailIsSet = false;
}
utility::string_t UpdateUserVM::getPassword() const
{
    return m_password;
}

void UpdateUserVM::setPassword(const utility::string_t& value)
{
    m_password = value;
    m_passwordIsSet = true;
}

bool UpdateUserVM::passwordIsSet() const
{
    return m_passwordIsSet;
}

void UpdateUserVM::unsetpassword()
{
    m_passwordIsSet = false;
}
bool UpdateUserVM::isIsAdmin() const
{
    return m_isAdmin;
}

void UpdateUserVM::setIsAdmin(bool value)
{
    m_isAdmin = value;
    m_isAdminIsSet = true;
}

bool UpdateUserVM::isAdminIsSet() const
{
    return m_isAdminIsSet;
}

void UpdateUserVM::unsetisAdmin()
{
    m_isAdminIsSet = false;
}
utility::string_t UpdateUserVM::getProvider() const
{
    return m_provider;
}

void UpdateUserVM::setProvider(const utility::string_t& value)
{
    m_provider = value;
    m_providerIsSet = true;
}

bool UpdateUserVM::providerIsSet() const
{
    return m_providerIsSet;
}

void UpdateUserVM::unsetprovider()
{
    m_providerIsSet = false;
}
}
}
}


