/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ExportFormat.h"

namespace fastreport {
namespace cloud {
namespace models {



ExportFormat::ExportFormat()
{
}

ExportFormat::~ExportFormat()
{
}

void ExportFormat::validate()
{
    // TODO: implement validation
}

web::json::value ExportFormat::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eExportFormat::ExportFormat_PDF) val = web::json::value::string(U(Pdf));
    if (m_value == eExportFormat::ExportFormat_HTML) val = web::json::value::string(U(Html));
    if (m_value == eExportFormat::ExportFormat_MHT) val = web::json::value::string(U(Mht));
    if (m_value == eExportFormat::ExportFormat_IMAGE) val = web::json::value::string(U(Image));
    if (m_value == eExportFormat::ExportFormat_BIFF8) val = web::json::value::string(U(Biff8));
    if (m_value == eExportFormat::ExportFormat_CSV) val = web::json::value::string(U(Csv));
    if (m_value == eExportFormat::ExportFormat_DBF) val = web::json::value::string(U(Dbf));
    if (m_value == eExportFormat::ExportFormat_JSON) val = web::json::value::string(U(Json));
    if (m_value == eExportFormat::ExportFormat_LATEX) val = web::json::value::string(U(LaTeX));
    if (m_value == eExportFormat::ExportFormat_ODT) val = web::json::value::string(U(Odt));
    if (m_value == eExportFormat::ExportFormat_ODS) val = web::json::value::string(U(Ods));
    if (m_value == eExportFormat::ExportFormat_DOCX) val = web::json::value::string(U(Docx));
    if (m_value == eExportFormat::ExportFormat_PPTX) val = web::json::value::string(U(Pptx));
    if (m_value == eExportFormat::ExportFormat_XLSX) val = web::json::value::string(U(Xlsx));
    if (m_value == eExportFormat::ExportFormat_XPS) val = web::json::value::string(U(Xps));
    if (m_value == eExportFormat::ExportFormat_PPML) val = web::json::value::string(U(Ppml));
    if (m_value == eExportFormat::ExportFormat_PS) val = web::json::value::string(U(PS));
    if (m_value == eExportFormat::ExportFormat_RICHTEXT) val = web::json::value::string(U(Richtext));
    if (m_value == eExportFormat::ExportFormat_SVG) val = web::json::value::string(U(Svg));
    if (m_value == eExportFormat::ExportFormat_TEXT) val = web::json::value::string(U(Text));
    if (m_value == eExportFormat::ExportFormat_XAML) val = web::json::value::string(U(Xaml));
    if (m_value == eExportFormat::ExportFormat_XML) val = web::json::value::string(U(Xml));
    if (m_value == eExportFormat::ExportFormat_ZPL) val = web::json::value::string(U(Zpl));

    return val;
}

bool ExportFormat::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(Pdf)) m_value = eExportFormat::ExportFormat_PDF;
    if (s == utility::conversions::to_string_t(Html)) m_value = eExportFormat::ExportFormat_HTML;
    if (s == utility::conversions::to_string_t(Mht)) m_value = eExportFormat::ExportFormat_MHT;
    if (s == utility::conversions::to_string_t(Image)) m_value = eExportFormat::ExportFormat_IMAGE;
    if (s == utility::conversions::to_string_t(Biff8)) m_value = eExportFormat::ExportFormat_BIFF8;
    if (s == utility::conversions::to_string_t(Csv)) m_value = eExportFormat::ExportFormat_CSV;
    if (s == utility::conversions::to_string_t(Dbf)) m_value = eExportFormat::ExportFormat_DBF;
    if (s == utility::conversions::to_string_t(Json)) m_value = eExportFormat::ExportFormat_JSON;
    if (s == utility::conversions::to_string_t(LaTeX)) m_value = eExportFormat::ExportFormat_LATEX;
    if (s == utility::conversions::to_string_t(Odt)) m_value = eExportFormat::ExportFormat_ODT;
    if (s == utility::conversions::to_string_t(Ods)) m_value = eExportFormat::ExportFormat_ODS;
    if (s == utility::conversions::to_string_t(Docx)) m_value = eExportFormat::ExportFormat_DOCX;
    if (s == utility::conversions::to_string_t(Pptx)) m_value = eExportFormat::ExportFormat_PPTX;
    if (s == utility::conversions::to_string_t(Xlsx)) m_value = eExportFormat::ExportFormat_XLSX;
    if (s == utility::conversions::to_string_t(Xps)) m_value = eExportFormat::ExportFormat_XPS;
    if (s == utility::conversions::to_string_t(Ppml)) m_value = eExportFormat::ExportFormat_PPML;
    if (s == utility::conversions::to_string_t(PS)) m_value = eExportFormat::ExportFormat_PS;
    if (s == utility::conversions::to_string_t(Richtext)) m_value = eExportFormat::ExportFormat_RICHTEXT;
    if (s == utility::conversions::to_string_t(Svg)) m_value = eExportFormat::ExportFormat_SVG;
    if (s == utility::conversions::to_string_t(Text)) m_value = eExportFormat::ExportFormat_TEXT;
    if (s == utility::conversions::to_string_t(Xaml)) m_value = eExportFormat::ExportFormat_XAML;
    if (s == utility::conversions::to_string_t(Xml)) m_value = eExportFormat::ExportFormat_XML;
    if (s == utility::conversions::to_string_t(Zpl)) m_value = eExportFormat::ExportFormat_ZPL;
    return true;
}

void ExportFormat::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eExportFormat::ExportFormat_PDF) s = utility::conversions::to_string_t(Pdf);
    if (m_value == eExportFormat::ExportFormat_HTML) s = utility::conversions::to_string_t(Html);
    if (m_value == eExportFormat::ExportFormat_MHT) s = utility::conversions::to_string_t(Mht);
    if (m_value == eExportFormat::ExportFormat_IMAGE) s = utility::conversions::to_string_t(Image);
    if (m_value == eExportFormat::ExportFormat_BIFF8) s = utility::conversions::to_string_t(Biff8);
    if (m_value == eExportFormat::ExportFormat_CSV) s = utility::conversions::to_string_t(Csv);
    if (m_value == eExportFormat::ExportFormat_DBF) s = utility::conversions::to_string_t(Dbf);
    if (m_value == eExportFormat::ExportFormat_JSON) s = utility::conversions::to_string_t(Json);
    if (m_value == eExportFormat::ExportFormat_LATEX) s = utility::conversions::to_string_t(LaTeX);
    if (m_value == eExportFormat::ExportFormat_ODT) s = utility::conversions::to_string_t(Odt);
    if (m_value == eExportFormat::ExportFormat_ODS) s = utility::conversions::to_string_t(Ods);
    if (m_value == eExportFormat::ExportFormat_DOCX) s = utility::conversions::to_string_t(Docx);
    if (m_value == eExportFormat::ExportFormat_PPTX) s = utility::conversions::to_string_t(Pptx);
    if (m_value == eExportFormat::ExportFormat_XLSX) s = utility::conversions::to_string_t(Xlsx);
    if (m_value == eExportFormat::ExportFormat_XPS) s = utility::conversions::to_string_t(Xps);
    if (m_value == eExportFormat::ExportFormat_PPML) s = utility::conversions::to_string_t(Ppml);
    if (m_value == eExportFormat::ExportFormat_PS) s = utility::conversions::to_string_t(PS);
    if (m_value == eExportFormat::ExportFormat_RICHTEXT) s = utility::conversions::to_string_t(Richtext);
    if (m_value == eExportFormat::ExportFormat_SVG) s = utility::conversions::to_string_t(Svg);
    if (m_value == eExportFormat::ExportFormat_TEXT) s = utility::conversions::to_string_t(Text);
    if (m_value == eExportFormat::ExportFormat_XAML) s = utility::conversions::to_string_t(Xaml);
    if (m_value == eExportFormat::ExportFormat_XML) s = utility::conversions::to_string_t(Xml);
    if (m_value == eExportFormat::ExportFormat_ZPL) s = utility::conversions::to_string_t(Zpl);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool ExportFormat::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eExportFormat v;

        
        if (s == utility::conversions::to_string_t(Pdf)) v = eExportFormat::ExportFormat_PDF;
        if (s == utility::conversions::to_string_t(Html)) v = eExportFormat::ExportFormat_HTML;
        if (s == utility::conversions::to_string_t(Mht)) v = eExportFormat::ExportFormat_MHT;
        if (s == utility::conversions::to_string_t(Image)) v = eExportFormat::ExportFormat_IMAGE;
        if (s == utility::conversions::to_string_t(Biff8)) v = eExportFormat::ExportFormat_BIFF8;
        if (s == utility::conversions::to_string_t(Csv)) v = eExportFormat::ExportFormat_CSV;
        if (s == utility::conversions::to_string_t(Dbf)) v = eExportFormat::ExportFormat_DBF;
        if (s == utility::conversions::to_string_t(Json)) v = eExportFormat::ExportFormat_JSON;
        if (s == utility::conversions::to_string_t(LaTeX)) v = eExportFormat::ExportFormat_LATEX;
        if (s == utility::conversions::to_string_t(Odt)) v = eExportFormat::ExportFormat_ODT;
        if (s == utility::conversions::to_string_t(Ods)) v = eExportFormat::ExportFormat_ODS;
        if (s == utility::conversions::to_string_t(Docx)) v = eExportFormat::ExportFormat_DOCX;
        if (s == utility::conversions::to_string_t(Pptx)) v = eExportFormat::ExportFormat_PPTX;
        if (s == utility::conversions::to_string_t(Xlsx)) v = eExportFormat::ExportFormat_XLSX;
        if (s == utility::conversions::to_string_t(Xps)) v = eExportFormat::ExportFormat_XPS;
        if (s == utility::conversions::to_string_t(Ppml)) v = eExportFormat::ExportFormat_PPML;
        if (s == utility::conversions::to_string_t(PS)) v = eExportFormat::ExportFormat_PS;
        if (s == utility::conversions::to_string_t(Richtext)) v = eExportFormat::ExportFormat_RICHTEXT;
        if (s == utility::conversions::to_string_t(Svg)) v = eExportFormat::ExportFormat_SVG;
        if (s == utility::conversions::to_string_t(Text)) v = eExportFormat::ExportFormat_TEXT;
        if (s == utility::conversions::to_string_t(Xaml)) v = eExportFormat::ExportFormat_XAML;
        if (s == utility::conversions::to_string_t(Xml)) v = eExportFormat::ExportFormat_XML;
        if (s == utility::conversions::to_string_t(Zpl)) v = eExportFormat::ExportFormat_ZPL;

        setValue(v);
    }
    return ok;
}

ExportFormat::eExportFormat ExportFormat::getValue() const
{
   return m_value;
}

void ExportFormat::setValue(ExportFormat::eExportFormat const value)
{
   m_value = value;
}


}
}
}


