/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SaveMode.h"

namespace fastreport {
namespace cloud {
namespace models {



SaveMode::SaveMode()
{
}

SaveMode::~SaveMode()
{
}

void SaveMode::validate()
{
    // TODO: implement validation
}

web::json::value SaveMode::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eSaveMode::SaveMode_ALL) val = web::json::value::string(U(All));
    if (m_value == eSaveMode::SaveMode_ORIGINAL) val = web::json::value::string(U(Original));
    if (m_value == eSaveMode::SaveMode_USER) val = web::json::value::string(U(User));
    if (m_value == eSaveMode::SaveMode_ROLE) val = web::json::value::string(U(Role));
    if (m_value == eSaveMode::SaveMode_SECURITY) val = web::json::value::string(U(Security));
    if (m_value == eSaveMode::SaveMode_DENY) val = web::json::value::string(U(Deny));
    if (m_value == eSaveMode::SaveMode_CUSTOM) val = web::json::value::string(U(Custom));

    return val;
}

bool SaveMode::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(All)) m_value = eSaveMode::SaveMode_ALL;
    if (s == utility::conversions::to_string_t(Original)) m_value = eSaveMode::SaveMode_ORIGINAL;
    if (s == utility::conversions::to_string_t(User)) m_value = eSaveMode::SaveMode_USER;
    if (s == utility::conversions::to_string_t(Role)) m_value = eSaveMode::SaveMode_ROLE;
    if (s == utility::conversions::to_string_t(Security)) m_value = eSaveMode::SaveMode_SECURITY;
    if (s == utility::conversions::to_string_t(Deny)) m_value = eSaveMode::SaveMode_DENY;
    if (s == utility::conversions::to_string_t(Custom)) m_value = eSaveMode::SaveMode_CUSTOM;
    return true;
}

void SaveMode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eSaveMode::SaveMode_ALL) s = utility::conversions::to_string_t(All);
    if (m_value == eSaveMode::SaveMode_ORIGINAL) s = utility::conversions::to_string_t(Original);
    if (m_value == eSaveMode::SaveMode_USER) s = utility::conversions::to_string_t(User);
    if (m_value == eSaveMode::SaveMode_ROLE) s = utility::conversions::to_string_t(Role);
    if (m_value == eSaveMode::SaveMode_SECURITY) s = utility::conversions::to_string_t(Security);
    if (m_value == eSaveMode::SaveMode_DENY) s = utility::conversions::to_string_t(Deny);
    if (m_value == eSaveMode::SaveMode_CUSTOM) s = utility::conversions::to_string_t(Custom);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool SaveMode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eSaveMode v;

        
        if (s == utility::conversions::to_string_t(All)) v = eSaveMode::SaveMode_ALL;
        if (s == utility::conversions::to_string_t(Original)) v = eSaveMode::SaveMode_ORIGINAL;
        if (s == utility::conversions::to_string_t(User)) v = eSaveMode::SaveMode_USER;
        if (s == utility::conversions::to_string_t(Role)) v = eSaveMode::SaveMode_ROLE;
        if (s == utility::conversions::to_string_t(Security)) v = eSaveMode::SaveMode_SECURITY;
        if (s == utility::conversions::to_string_t(Deny)) v = eSaveMode::SaveMode_DENY;
        if (s == utility::conversions::to_string_t(Custom)) v = eSaveMode::SaveMode_CUSTOM;

        setValue(v);
    }
    return ok;
}

SaveMode::eSaveMode SaveMode::getValue() const
{
   return m_value;
}

void SaveMode::setValue(SaveMode::eSaveMode const value)
{
   m_value = value;
}


}
}
}


