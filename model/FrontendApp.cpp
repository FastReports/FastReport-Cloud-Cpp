/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FrontendApp.h"

namespace fastreport {
namespace cloud {
namespace models {




FrontendApp::FrontendApp()
{
    m_mixinsIsSet = false;
    m_invariantLocale = utility::conversions::to_string_t("");
    m_invariantLocaleIsSet = false;
}

FrontendApp::~FrontendApp()
{
}

void FrontendApp::validate()
{
    // TODO: implement validation
}

web::json::value FrontendApp::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_mixinsIsSet)
    {
        val[utility::conversions::to_string_t("mixins")] = ModelBase::toJson(m_mixins);
    }
    if(m_invariantLocaleIsSet)
    {
        val[utility::conversions::to_string_t("invariantLocale")] = ModelBase::toJson(m_invariantLocale);
    }

    return val;
}

bool FrontendApp::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("mixins")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mixins"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AppMixins> refVal_mixins;
            ok &= ModelBase::fromJson(fieldValue, refVal_mixins);
            setMixins(refVal_mixins);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("invariantLocale")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("invariantLocale"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_invariantLocale;
            ok &= ModelBase::fromJson(fieldValue, refVal_invariantLocale);
            setInvariantLocale(refVal_invariantLocale);
        }
    }
    return ok;
}

void FrontendApp::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_mixinsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mixins"), m_mixins));
    }
    if(m_invariantLocaleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("invariantLocale"), m_invariantLocale));
    }
}

bool FrontendApp::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("mixins")))
    {
        std::shared_ptr<AppMixins> refVal_mixins;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mixins")), refVal_mixins );
        setMixins(refVal_mixins);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("invariantLocale")))
    {
        utility::string_t refVal_invariantLocale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("invariantLocale")), refVal_invariantLocale );
        setInvariantLocale(refVal_invariantLocale);
    }
    return ok;
}

std::shared_ptr<AppMixins> FrontendApp::getMixins() const
{
    return m_mixins;
}

void FrontendApp::setMixins(const std::shared_ptr<AppMixins>& value)
{
    m_mixins = value;
    m_mixinsIsSet = true;
}

bool FrontendApp::mixinsIsSet() const
{
    return m_mixinsIsSet;
}

void FrontendApp::unsetmixins()
{
    m_mixinsIsSet = false;
}
utility::string_t FrontendApp::getInvariantLocale() const
{
    return m_invariantLocale;
}

void FrontendApp::setInvariantLocale(const utility::string_t& value)
{
    m_invariantLocale = value;
    m_invariantLocaleIsSet = true;
}

bool FrontendApp::invariantLocaleIsSet() const
{
    return m_invariantLocaleIsSet;
}

void FrontendApp::unsetinvariantLocale()
{
    m_invariantLocaleIsSet = false;
}
}
}
}


