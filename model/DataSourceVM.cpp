/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataSourceVM.h"

namespace fastreport {
namespace cloud {
namespace models {




DataSourceVM::DataSourceVM()
{
    m_id = utility::conversions::to_string_t("");
    m_idIsSet = false;
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_connectionTypeIsSet = false;
    m_connectionString = utility::conversions::to_string_t("");
    m_connectionStringIsSet = false;
    m_dataStructure = utility::conversions::to_string_t("");
    m_dataStructureIsSet = false;
    m_subscriptionId = utility::conversions::to_string_t("");
    m_subscriptionIdIsSet = false;
    m_editedTime = utility::datetime();
    m_editedTimeIsSet = false;
    m_editorUserId = utility::conversions::to_string_t("");
    m_editorUserIdIsSet = false;
    m_createdTime = utility::datetime();
    m_createdTimeIsSet = false;
    m_creatorUserId = utility::conversions::to_string_t("");
    m_creatorUserIdIsSet = false;
    m_statusIsSet = false;
}

DataSourceVM::~DataSourceVM()
{
}

void DataSourceVM::validate()
{
    // TODO: implement validation
}

web::json::value DataSourceVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_idIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_id);
    }
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_name);
    }
    if(m_connectionTypeIsSet)
    {
        val[utility::conversions::to_string_t("connectionType")] = ModelBase::toJson(m_connectionType);
    }
    if(m_connectionStringIsSet)
    {
        val[utility::conversions::to_string_t("connectionString")] = ModelBase::toJson(m_connectionString);
    }
    if(m_dataStructureIsSet)
    {
        val[utility::conversions::to_string_t("dataStructure")] = ModelBase::toJson(m_dataStructure);
    }
    if(m_subscriptionIdIsSet)
    {
        val[utility::conversions::to_string_t("subscriptionId")] = ModelBase::toJson(m_subscriptionId);
    }
    if(m_editedTimeIsSet)
    {
        val[utility::conversions::to_string_t("editedTime")] = ModelBase::toJson(m_editedTime);
    }
    if(m_editorUserIdIsSet)
    {
        val[utility::conversions::to_string_t("editorUserId")] = ModelBase::toJson(m_editorUserId);
    }
    if(m_createdTimeIsSet)
    {
        val[utility::conversions::to_string_t("createdTime")] = ModelBase::toJson(m_createdTime);
    }
    if(m_creatorUserIdIsSet)
    {
        val[utility::conversions::to_string_t("creatorUserId")] = ModelBase::toJson(m_creatorUserId);
    }
    if(m_statusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_status);
    }

    return val;
}

bool DataSourceVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connectionType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("connectionType"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataSourceConnectionType> refVal_connectionType;
            ok &= ModelBase::fromJson(fieldValue, refVal_connectionType);
            setConnectionType(refVal_connectionType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connectionString")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("connectionString"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_connectionString;
            ok &= ModelBase::fromJson(fieldValue, refVal_connectionString);
            setConnectionString(refVal_connectionString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dataStructure")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dataStructure"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dataStructure;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataStructure);
            setDataStructure(refVal_dataStructure);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscriptionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscriptionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subscriptionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscriptionId);
            setSubscriptionId(refVal_subscriptionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("editedTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("editedTime"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_editedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_editedTime);
            setEditedTime(refVal_editedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("editorUserId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("editorUserId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_editorUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_editorUserId);
            setEditorUserId(refVal_editorUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdTime"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdTime);
            setCreatedTime(refVal_createdTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("creatorUserId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("creatorUserId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_creatorUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_creatorUserId);
            setCreatorUserId(refVal_creatorUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataSourceStatus> refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    return ok;
}

void DataSourceVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_id));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_name));
    }
    if(m_connectionTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("connectionType"), m_connectionType));
    }
    if(m_connectionStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("connectionString"), m_connectionString));
    }
    if(m_dataStructureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dataStructure"), m_dataStructure));
    }
    if(m_subscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscriptionId"), m_subscriptionId));
    }
    if(m_editedTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editedTime"), m_editedTime));
    }
    if(m_editorUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editorUserId"), m_editorUserId));
    }
    if(m_createdTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdTime"), m_createdTime));
    }
    if(m_creatorUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("creatorUserId"), m_creatorUserId));
    }
    if(m_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_status));
    }
}

bool DataSourceVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connectionType")))
    {
        std::shared_ptr<DataSourceConnectionType> refVal_connectionType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("connectionType")), refVal_connectionType );
        setConnectionType(refVal_connectionType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connectionString")))
    {
        utility::string_t refVal_connectionString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("connectionString")), refVal_connectionString );
        setConnectionString(refVal_connectionString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataStructure")))
    {
        utility::string_t refVal_dataStructure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dataStructure")), refVal_dataStructure );
        setDataStructure(refVal_dataStructure);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscriptionId")))
    {
        utility::string_t refVal_subscriptionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscriptionId")), refVal_subscriptionId );
        setSubscriptionId(refVal_subscriptionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editedTime")))
    {
        utility::datetime refVal_editedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editedTime")), refVal_editedTime );
        setEditedTime(refVal_editedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editorUserId")))
    {
        utility::string_t refVal_editorUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editorUserId")), refVal_editorUserId );
        setEditorUserId(refVal_editorUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdTime")))
    {
        utility::datetime refVal_createdTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdTime")), refVal_createdTime );
        setCreatedTime(refVal_createdTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("creatorUserId")))
    {
        utility::string_t refVal_creatorUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("creatorUserId")), refVal_creatorUserId );
        setCreatorUserId(refVal_creatorUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        std::shared_ptr<DataSourceStatus> refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status );
        setStatus(refVal_status);
    }
    return ok;
}

utility::string_t DataSourceVM::getId() const
{
    return m_id;
}

void DataSourceVM::setId(const utility::string_t& value)
{
    m_id = value;
    m_idIsSet = true;
}

bool DataSourceVM::idIsSet() const
{
    return m_idIsSet;
}

void DataSourceVM::unsetid()
{
    m_idIsSet = false;
}
utility::string_t DataSourceVM::getName() const
{
    return m_name;
}

void DataSourceVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool DataSourceVM::nameIsSet() const
{
    return m_nameIsSet;
}

void DataSourceVM::unsetname()
{
    m_nameIsSet = false;
}
std::shared_ptr<DataSourceConnectionType> DataSourceVM::getConnectionType() const
{
    return m_connectionType;
}

void DataSourceVM::setConnectionType(const std::shared_ptr<DataSourceConnectionType>& value)
{
    m_connectionType = value;
    m_connectionTypeIsSet = true;
}

bool DataSourceVM::connectionTypeIsSet() const
{
    return m_connectionTypeIsSet;
}

void DataSourceVM::unsetconnectionType()
{
    m_connectionTypeIsSet = false;
}
utility::string_t DataSourceVM::getConnectionString() const
{
    return m_connectionString;
}

void DataSourceVM::setConnectionString(const utility::string_t& value)
{
    m_connectionString = value;
    m_connectionStringIsSet = true;
}

bool DataSourceVM::connectionStringIsSet() const
{
    return m_connectionStringIsSet;
}

void DataSourceVM::unsetconnectionString()
{
    m_connectionStringIsSet = false;
}
utility::string_t DataSourceVM::getDataStructure() const
{
    return m_dataStructure;
}

void DataSourceVM::setDataStructure(const utility::string_t& value)
{
    m_dataStructure = value;
    m_dataStructureIsSet = true;
}

bool DataSourceVM::dataStructureIsSet() const
{
    return m_dataStructureIsSet;
}

void DataSourceVM::unsetdataStructure()
{
    m_dataStructureIsSet = false;
}
utility::string_t DataSourceVM::getSubscriptionId() const
{
    return m_subscriptionId;
}

void DataSourceVM::setSubscriptionId(const utility::string_t& value)
{
    m_subscriptionId = value;
    m_subscriptionIdIsSet = true;
}

bool DataSourceVM::subscriptionIdIsSet() const
{
    return m_subscriptionIdIsSet;
}

void DataSourceVM::unsetsubscriptionId()
{
    m_subscriptionIdIsSet = false;
}
utility::datetime DataSourceVM::getEditedTime() const
{
    return m_editedTime;
}

void DataSourceVM::setEditedTime(const utility::datetime& value)
{
    m_editedTime = value;
    m_editedTimeIsSet = true;
}

bool DataSourceVM::editedTimeIsSet() const
{
    return m_editedTimeIsSet;
}

void DataSourceVM::unseteditedTime()
{
    m_editedTimeIsSet = false;
}
utility::string_t DataSourceVM::getEditorUserId() const
{
    return m_editorUserId;
}

void DataSourceVM::setEditorUserId(const utility::string_t& value)
{
    m_editorUserId = value;
    m_editorUserIdIsSet = true;
}

bool DataSourceVM::editorUserIdIsSet() const
{
    return m_editorUserIdIsSet;
}

void DataSourceVM::unseteditorUserId()
{
    m_editorUserIdIsSet = false;
}
utility::datetime DataSourceVM::getCreatedTime() const
{
    return m_createdTime;
}

void DataSourceVM::setCreatedTime(const utility::datetime& value)
{
    m_createdTime = value;
    m_createdTimeIsSet = true;
}

bool DataSourceVM::createdTimeIsSet() const
{
    return m_createdTimeIsSet;
}

void DataSourceVM::unsetcreatedTime()
{
    m_createdTimeIsSet = false;
}
utility::string_t DataSourceVM::getCreatorUserId() const
{
    return m_creatorUserId;
}

void DataSourceVM::setCreatorUserId(const utility::string_t& value)
{
    m_creatorUserId = value;
    m_creatorUserIdIsSet = true;
}

bool DataSourceVM::creatorUserIdIsSet() const
{
    return m_creatorUserIdIsSet;
}

void DataSourceVM::unsetcreatorUserId()
{
    m_creatorUserIdIsSet = false;
}
std::shared_ptr<DataSourceStatus> DataSourceVM::getStatus() const
{
    return m_status;
}

void DataSourceVM::setStatus(const std::shared_ptr<DataSourceStatus>& value)
{
    m_status = value;
    m_statusIsSet = true;
}

bool DataSourceVM::statusIsSet() const
{
    return m_statusIsSet;
}

void DataSourceVM::unsetstatus()
{
    m_statusIsSet = false;
}
}
}
}


