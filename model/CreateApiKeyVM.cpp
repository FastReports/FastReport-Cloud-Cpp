/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateApiKeyVM.h"

namespace fastreport {
namespace cloud {
namespace models {




CreateApiKeyVM::CreateApiKeyVM()
{
    m_description = utility::conversions::to_string_t("");
    m_descriptionIsSet = false;
    m_expired = utility::datetime();
    m_expiredIsSet = false;
}

CreateApiKeyVM::~CreateApiKeyVM()
{
}

void CreateApiKeyVM::validate()
{
    // TODO: implement validation
}

web::json::value CreateApiKeyVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_descriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_description);
    }
    if(m_expiredIsSet)
    {
        val[utility::conversions::to_string_t("expired")] = ModelBase::toJson(m_expired);
    }

    return val;
}

bool CreateApiKeyVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expired")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expired"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_expired;
            ok &= ModelBase::fromJson(fieldValue, refVal_expired);
            setExpired(refVal_expired);
        }
    }
    return ok;
}

void CreateApiKeyVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_description));
    }
    if(m_expiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expired"), m_expired));
    }
}

bool CreateApiKeyVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expired")))
    {
        utility::datetime refVal_expired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expired")), refVal_expired );
        setExpired(refVal_expired);
    }
    return ok;
}

utility::string_t CreateApiKeyVM::getDescription() const
{
    return m_description;
}

void CreateApiKeyVM::setDescription(const utility::string_t& value)
{
    m_description = value;
    m_descriptionIsSet = true;
}

bool CreateApiKeyVM::descriptionIsSet() const
{
    return m_descriptionIsSet;
}

void CreateApiKeyVM::unsetdescription()
{
    m_descriptionIsSet = false;
}
utility::datetime CreateApiKeyVM::getExpired() const
{
    return m_expired;
}

void CreateApiKeyVM::setExpired(const utility::datetime& value)
{
    m_expired = value;
    m_expiredIsSet = true;
}

bool CreateApiKeyVM::expiredIsSet() const
{
    return m_expiredIsSet;
}

void CreateApiKeyVM::unsetexpired()
{
    m_expiredIsSet = false;
}
}
}
}


