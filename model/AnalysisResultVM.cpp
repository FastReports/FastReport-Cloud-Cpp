/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AnalysisResultVM.h"

namespace fastreport {
namespace cloud {
namespace models {




AnalysisResultVM::AnalysisResultVM()
{
    m_level = LevelEnum._0;
    m_levelIsSet = false;
    m_detail = utility::conversions::to_string_t("");
    m_detailIsSet = false;
    m_id = utility::conversions::to_string_t("");
    m_idIsSet = false;
    m_subscriptionId = utility::conversions::to_string_t("");
    m_subscriptionIdIsSet = false;
    m_fileId = utility::conversions::to_string_t("");
    m_fileIdIsSet = false;
    m_collectionName = utility::conversions::to_string_t("");
    m_collectionNameIsSet = false;
    m_type = TypeEnum._0;
    m_typeIsSet = false;
    m_signature = utility::conversions::to_string_t("");
    m_signatureIsSet = false;
}

AnalysisResultVM::~AnalysisResultVM()
{
}

void AnalysisResultVM::validate()
{
    // TODO: implement validation
}

web::json::value AnalysisResultVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_levelIsSet)
    {
        val[utility::conversions::to_string_t("level")] = ModelBase::toJson(m_level);
    }
    if(m_detailIsSet)
    {
        val[utility::conversions::to_string_t("detail")] = ModelBase::toJson(m_detail);
    }
    if(m_idIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_id);
    }
    if(m_subscriptionIdIsSet)
    {
        val[utility::conversions::to_string_t("subscriptionId")] = ModelBase::toJson(m_subscriptionId);
    }
    if(m_fileIdIsSet)
    {
        val[utility::conversions::to_string_t("fileId")] = ModelBase::toJson(m_fileId);
    }
    if(m_collectionNameIsSet)
    {
        val[utility::conversions::to_string_t("collectionName")] = ModelBase::toJson(m_collectionName);
    }
    if(m_typeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_type);
    }
    if(m_signatureIsSet)
    {
        val[utility::conversions::to_string_t("signature")] = ModelBase::toJson(m_signature);
    }

    return val;
}

bool AnalysisResultVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("level")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("level"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_level;
            ok &= ModelBase::fromJson(fieldValue, refVal_level);
            setLevel(refVal_level);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("detail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("detail"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_detail;
            ok &= ModelBase::fromJson(fieldValue, refVal_detail);
            setDetail(refVal_detail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscriptionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscriptionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subscriptionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscriptionId);
            setSubscriptionId(refVal_subscriptionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fileId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fileId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fileId;
            ok &= ModelBase::fromJson(fieldValue, refVal_fileId);
            setFileId(refVal_fileId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("collectionName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("collectionName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_collectionName;
            ok &= ModelBase::fromJson(fieldValue, refVal_collectionName);
            setCollectionName(refVal_collectionName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("signature")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("signature"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_signature;
            ok &= ModelBase::fromJson(fieldValue, refVal_signature);
            setSignature(refVal_signature);
        }
    }
    return ok;
}

void AnalysisResultVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_levelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("level"), m_level));
    }
    if(m_detailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("detail"), m_detail));
    }
    if(m_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_id));
    }
    if(m_subscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscriptionId"), m_subscriptionId));
    }
    if(m_fileIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fileId"), m_fileId));
    }
    if(m_collectionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collectionName"), m_collectionName));
    }
    if(m_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_type));
    }
    if(m_signatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signature"), m_signature));
    }
}

bool AnalysisResultVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("level")))
    {
        int32_t refVal_level;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("level")), refVal_level );
        setLevel(refVal_level);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("detail")))
    {
        utility::string_t refVal_detail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("detail")), refVal_detail );
        setDetail(refVal_detail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscriptionId")))
    {
        utility::string_t refVal_subscriptionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscriptionId")), refVal_subscriptionId );
        setSubscriptionId(refVal_subscriptionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fileId")))
    {
        utility::string_t refVal_fileId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fileId")), refVal_fileId );
        setFileId(refVal_fileId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("collectionName")))
    {
        utility::string_t refVal_collectionName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("collectionName")), refVal_collectionName );
        setCollectionName(refVal_collectionName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        int32_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("signature")))
    {
        utility::string_t refVal_signature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("signature")), refVal_signature );
        setSignature(refVal_signature);
    }
    return ok;
}

int32_t AnalysisResultVM::getLevel() const
{
    return m_level;
}

void AnalysisResultVM::setLevel(int32_t value)
{
    m_level = value;
    m_levelIsSet = true;
}

bool AnalysisResultVM::levelIsSet() const
{
    return m_levelIsSet;
}

void AnalysisResultVM::unsetlevel()
{
    m_levelIsSet = false;
}
utility::string_t AnalysisResultVM::getDetail() const
{
    return m_detail;
}

void AnalysisResultVM::setDetail(const utility::string_t& value)
{
    m_detail = value;
    m_detailIsSet = true;
}

bool AnalysisResultVM::detailIsSet() const
{
    return m_detailIsSet;
}

void AnalysisResultVM::unsetdetail()
{
    m_detailIsSet = false;
}
utility::string_t AnalysisResultVM::getId() const
{
    return m_id;
}

void AnalysisResultVM::setId(const utility::string_t& value)
{
    m_id = value;
    m_idIsSet = true;
}

bool AnalysisResultVM::idIsSet() const
{
    return m_idIsSet;
}

void AnalysisResultVM::unsetid()
{
    m_idIsSet = false;
}
utility::string_t AnalysisResultVM::getSubscriptionId() const
{
    return m_subscriptionId;
}

void AnalysisResultVM::setSubscriptionId(const utility::string_t& value)
{
    m_subscriptionId = value;
    m_subscriptionIdIsSet = true;
}

bool AnalysisResultVM::subscriptionIdIsSet() const
{
    return m_subscriptionIdIsSet;
}

void AnalysisResultVM::unsetsubscriptionId()
{
    m_subscriptionIdIsSet = false;
}
utility::string_t AnalysisResultVM::getFileId() const
{
    return m_fileId;
}

void AnalysisResultVM::setFileId(const utility::string_t& value)
{
    m_fileId = value;
    m_fileIdIsSet = true;
}

bool AnalysisResultVM::fileIdIsSet() const
{
    return m_fileIdIsSet;
}

void AnalysisResultVM::unsetfileId()
{
    m_fileIdIsSet = false;
}
utility::string_t AnalysisResultVM::getCollectionName() const
{
    return m_collectionName;
}

void AnalysisResultVM::setCollectionName(const utility::string_t& value)
{
    m_collectionName = value;
    m_collectionNameIsSet = true;
}

bool AnalysisResultVM::collectionNameIsSet() const
{
    return m_collectionNameIsSet;
}

void AnalysisResultVM::unsetcollectionName()
{
    m_collectionNameIsSet = false;
}
int32_t AnalysisResultVM::getType() const
{
    return m_type;
}

void AnalysisResultVM::setType(int32_t value)
{
    m_type = value;
    m_typeIsSet = true;
}

bool AnalysisResultVM::typeIsSet() const
{
    return m_typeIsSet;
}

void AnalysisResultVM::unsettype()
{
    m_typeIsSet = false;
}
utility::string_t AnalysisResultVM::getSignature() const
{
    return m_signature;
}

void AnalysisResultVM::setSignature(const utility::string_t& value)
{
    m_signature = value;
    m_signatureIsSet = true;
}

bool AnalysisResultVM::signatureIsSet() const
{
    return m_signatureIsSet;
}

void AnalysisResultVM::unsetsignature()
{
    m_signatureIsSet = false;
}
}
}
}


