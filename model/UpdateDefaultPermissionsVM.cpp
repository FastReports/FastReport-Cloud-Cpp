/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UpdateDefaultPermissionsVM.h"

namespace fastreport {
namespace cloud {
namespace models {




UpdateDefaultPermissionsVM::UpdateDefaultPermissionsVM()
{
    m_filePermissionsIsSet = false;
    m_groupPermissionsIsSet = false;
    m_dataSourcePermissionsIsSet = false;
}

UpdateDefaultPermissionsVM::~UpdateDefaultPermissionsVM()
{
}

void UpdateDefaultPermissionsVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdateDefaultPermissionsVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_filePermissionsIsSet)
    {
        val[utility::conversions::to_string_t("filePermissions")] = ModelBase::toJson(m_filePermissions);
    }
    if(m_groupPermissionsIsSet)
    {
        val[utility::conversions::to_string_t("groupPermissions")] = ModelBase::toJson(m_groupPermissions);
    }
    if(m_dataSourcePermissionsIsSet)
    {
        val[utility::conversions::to_string_t("dataSourcePermissions")] = ModelBase::toJson(m_dataSourcePermissions);
    }

    return val;
}

bool UpdateDefaultPermissionsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("filePermissions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("filePermissions"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpdateFilePermissionsVM> refVal_filePermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_filePermissions);
            setFilePermissions(refVal_filePermissions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groupPermissions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groupPermissions"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpdateGroupPermissionsVM> refVal_groupPermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_groupPermissions);
            setGroupPermissions(refVal_groupPermissions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dataSourcePermissions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dataSourcePermissions"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpdateDataSourcePermissionsVM> refVal_dataSourcePermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataSourcePermissions);
            setDataSourcePermissions(refVal_dataSourcePermissions);
        }
    }
    return ok;
}

void UpdateDefaultPermissionsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_filePermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filePermissions"), m_filePermissions));
    }
    if(m_groupPermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groupPermissions"), m_groupPermissions));
    }
    if(m_dataSourcePermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dataSourcePermissions"), m_dataSourcePermissions));
    }
}

bool UpdateDefaultPermissionsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("filePermissions")))
    {
        std::shared_ptr<UpdateFilePermissionsVM> refVal_filePermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("filePermissions")), refVal_filePermissions );
        setFilePermissions(refVal_filePermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groupPermissions")))
    {
        std::shared_ptr<UpdateGroupPermissionsVM> refVal_groupPermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groupPermissions")), refVal_groupPermissions );
        setGroupPermissions(refVal_groupPermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataSourcePermissions")))
    {
        std::shared_ptr<UpdateDataSourcePermissionsVM> refVal_dataSourcePermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dataSourcePermissions")), refVal_dataSourcePermissions );
        setDataSourcePermissions(refVal_dataSourcePermissions);
    }
    return ok;
}

std::shared_ptr<UpdateFilePermissionsVM> UpdateDefaultPermissionsVM::getFilePermissions() const
{
    return m_filePermissions;
}

void UpdateDefaultPermissionsVM::setFilePermissions(const std::shared_ptr<UpdateFilePermissionsVM>& value)
{
    m_filePermissions = value;
    m_filePermissionsIsSet = true;
}

bool UpdateDefaultPermissionsVM::filePermissionsIsSet() const
{
    return m_filePermissionsIsSet;
}

void UpdateDefaultPermissionsVM::unsetfilePermissions()
{
    m_filePermissionsIsSet = false;
}
std::shared_ptr<UpdateGroupPermissionsVM> UpdateDefaultPermissionsVM::getGroupPermissions() const
{
    return m_groupPermissions;
}

void UpdateDefaultPermissionsVM::setGroupPermissions(const std::shared_ptr<UpdateGroupPermissionsVM>& value)
{
    m_groupPermissions = value;
    m_groupPermissionsIsSet = true;
}

bool UpdateDefaultPermissionsVM::groupPermissionsIsSet() const
{
    return m_groupPermissionsIsSet;
}

void UpdateDefaultPermissionsVM::unsetgroupPermissions()
{
    m_groupPermissionsIsSet = false;
}
std::shared_ptr<UpdateDataSourcePermissionsVM> UpdateDefaultPermissionsVM::getDataSourcePermissions() const
{
    return m_dataSourcePermissions;
}

void UpdateDefaultPermissionsVM::setDataSourcePermissions(const std::shared_ptr<UpdateDataSourcePermissionsVM>& value)
{
    m_dataSourcePermissions = value;
    m_dataSourcePermissionsIsSet = true;
}

bool UpdateDefaultPermissionsVM::dataSourcePermissionsIsSet() const
{
    return m_dataSourcePermissionsIsSet;
}

void UpdateDefaultPermissionsVM::unsetdataSourcePermissions()
{
    m_dataSourcePermissionsIsSet = false;
}
}
}
}


