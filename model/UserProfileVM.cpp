/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UserProfileVM.h"

namespace fastreport {
namespace cloud {
namespace models {




UserProfileVM::UserProfileVM()
{
    m_id = utility::conversions::to_string_t("");
    m_idIsSet = false;
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_username = utility::conversions::to_string_t("");
    m_usernameIsSet = false;
    m_email = utility::conversions::to_string_t("");
    m_emailIsSet = false;
    m_isReadOnly = false;
    m_isReadOnlyIsSet = false;
}

UserProfileVM::~UserProfileVM()
{
}

void UserProfileVM::validate()
{
    // TODO: implement validation
}

web::json::value UserProfileVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_idIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_id);
    }
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_name);
    }
    if(m_usernameIsSet)
    {
        val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_username);
    }
    if(m_emailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_email);
    }
    if(m_isReadOnlyIsSet)
    {
        val[utility::conversions::to_string_t("isReadOnly")] = ModelBase::toJson(m_isReadOnly);
    }

    return val;
}

bool UserProfileVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("username"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_username;
            ok &= ModelBase::fromJson(fieldValue, refVal_username);
            setUsername(refVal_username);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isReadOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isReadOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_isReadOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_isReadOnly);
            setIsReadOnly(refVal_isReadOnly);
        }
    }
    return ok;
}

void UserProfileVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_id));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_name));
    }
    if(m_usernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_username));
    }
    if(m_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_email));
    }
    if(m_isReadOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isReadOnly"), m_isReadOnly));
    }
}

bool UserProfileVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("username")))
    {
        utility::string_t refVal_username;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("username")), refVal_username );
        setUsername(refVal_username);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        utility::string_t refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email")), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isReadOnly")))
    {
        bool refVal_isReadOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isReadOnly")), refVal_isReadOnly );
        setIsReadOnly(refVal_isReadOnly);
    }
    return ok;
}

utility::string_t UserProfileVM::getId() const
{
    return m_id;
}

void UserProfileVM::setId(const utility::string_t& value)
{
    m_id = value;
    m_idIsSet = true;
}

bool UserProfileVM::idIsSet() const
{
    return m_idIsSet;
}

void UserProfileVM::unsetid()
{
    m_idIsSet = false;
}
utility::string_t UserProfileVM::getName() const
{
    return m_name;
}

void UserProfileVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool UserProfileVM::nameIsSet() const
{
    return m_nameIsSet;
}

void UserProfileVM::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t UserProfileVM::getUsername() const
{
    return m_username;
}

void UserProfileVM::setUsername(const utility::string_t& value)
{
    m_username = value;
    m_usernameIsSet = true;
}

bool UserProfileVM::usernameIsSet() const
{
    return m_usernameIsSet;
}

void UserProfileVM::unsetusername()
{
    m_usernameIsSet = false;
}
utility::string_t UserProfileVM::getEmail() const
{
    return m_email;
}

void UserProfileVM::setEmail(const utility::string_t& value)
{
    m_email = value;
    m_emailIsSet = true;
}

bool UserProfileVM::emailIsSet() const
{
    return m_emailIsSet;
}

void UserProfileVM::unsetemail()
{
    m_emailIsSet = false;
}
bool UserProfileVM::isIsReadOnly() const
{
    return m_isReadOnly;
}

void UserProfileVM::setIsReadOnly(bool value)
{
    m_isReadOnly = value;
    m_isReadOnlyIsSet = true;
}

bool UserProfileVM::isReadOnlyIsSet() const
{
    return m_isReadOnlyIsSet;
}

void UserProfileVM::unsetisReadOnly()
{
    m_isReadOnlyIsSet = false;
}
}
}
}


