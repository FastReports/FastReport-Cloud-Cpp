/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ExportReportVM.h"

namespace fastreport {
namespace cloud {
namespace models {




ExportReportVM::ExportReportVM()
{
    m_fileName = utility::conversions::to_string_t("");
    m_fileNameIsSet = false;
    m_folderId = utility::conversions::to_string_t("");
    m_folderIdIsSet = false;
    m_locale = utility::conversions::to_string_t("");
    m_localeIsSet = false;
    m_pagesCount = 0;
    m_pagesCountIsSet = false;
    m_formatIsSet = false;
    m_exportParametersIsSet = false;
}

ExportReportVM::~ExportReportVM()
{
}

void ExportReportVM::validate()
{
    // TODO: implement validation
}

web::json::value ExportReportVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_fileNameIsSet)
    {
        val[utility::conversions::to_string_t("fileName")] = ModelBase::toJson(m_fileName);
    }
    if(m_folderIdIsSet)
    {
        val[utility::conversions::to_string_t("folderId")] = ModelBase::toJson(m_folderId);
    }
    if(m_localeIsSet)
    {
        val[utility::conversions::to_string_t("locale")] = ModelBase::toJson(m_locale);
    }
    if(m_pagesCountIsSet)
    {
        val[utility::conversions::to_string_t("pagesCount")] = ModelBase::toJson(m_pagesCount);
    }
    if(m_formatIsSet)
    {
        val[utility::conversions::to_string_t("format")] = ModelBase::toJson(m_format);
    }
    if(m_exportParametersIsSet)
    {
        val[utility::conversions::to_string_t("exportParameters")] = ModelBase::toJson(m_exportParameters);
    }

    return val;
}

bool ExportReportVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("fileName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fileName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fileName;
            ok &= ModelBase::fromJson(fieldValue, refVal_fileName);
            setFileName(refVal_fileName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("folderId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("folderId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_folderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_folderId);
            setFolderId(refVal_folderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locale")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locale"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_locale;
            ok &= ModelBase::fromJson(fieldValue, refVal_locale);
            setLocale(refVal_locale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pagesCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pagesCount"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_pagesCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_pagesCount);
            setPagesCount(refVal_pagesCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("format")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("format"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ExportFormat> refVal_format;
            ok &= ModelBase::fromJson(fieldValue, refVal_format);
            setFormat(refVal_format);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exportParameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exportParameters"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_exportParameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_exportParameters);
            setExportParameters(refVal_exportParameters);
        }
    }
    return ok;
}

void ExportReportVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_fileNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fileName"), m_fileName));
    }
    if(m_folderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("folderId"), m_folderId));
    }
    if(m_localeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locale"), m_locale));
    }
    if(m_pagesCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pagesCount"), m_pagesCount));
    }
    if(m_formatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("format"), m_format));
    }
    if(m_exportParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exportParameters"), m_exportParameters));
    }
}

bool ExportReportVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("fileName")))
    {
        utility::string_t refVal_fileName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fileName")), refVal_fileName );
        setFileName(refVal_fileName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("folderId")))
    {
        utility::string_t refVal_folderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("folderId")), refVal_folderId );
        setFolderId(refVal_folderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locale")))
    {
        utility::string_t refVal_locale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locale")), refVal_locale );
        setLocale(refVal_locale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pagesCount")))
    {
        int32_t refVal_pagesCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pagesCount")), refVal_pagesCount );
        setPagesCount(refVal_pagesCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("format")))
    {
        std::shared_ptr<ExportFormat> refVal_format;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("format")), refVal_format );
        setFormat(refVal_format);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exportParameters")))
    {
        std::map<utility::string_t, utility::string_t> refVal_exportParameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exportParameters")), refVal_exportParameters );
        setExportParameters(refVal_exportParameters);
    }
    return ok;
}

utility::string_t ExportReportVM::getFileName() const
{
    return m_fileName;
}

void ExportReportVM::setFileName(const utility::string_t& value)
{
    m_fileName = value;
    m_fileNameIsSet = true;
}

bool ExportReportVM::fileNameIsSet() const
{
    return m_fileNameIsSet;
}

void ExportReportVM::unsetfileName()
{
    m_fileNameIsSet = false;
}
utility::string_t ExportReportVM::getFolderId() const
{
    return m_folderId;
}

void ExportReportVM::setFolderId(const utility::string_t& value)
{
    m_folderId = value;
    m_folderIdIsSet = true;
}

bool ExportReportVM::folderIdIsSet() const
{
    return m_folderIdIsSet;
}

void ExportReportVM::unsetfolderId()
{
    m_folderIdIsSet = false;
}
utility::string_t ExportReportVM::getLocale() const
{
    return m_locale;
}

void ExportReportVM::setLocale(const utility::string_t& value)
{
    m_locale = value;
    m_localeIsSet = true;
}

bool ExportReportVM::localeIsSet() const
{
    return m_localeIsSet;
}

void ExportReportVM::unsetlocale()
{
    m_localeIsSet = false;
}
int32_t ExportReportVM::getPagesCount() const
{
    return m_pagesCount;
}

void ExportReportVM::setPagesCount(int32_t value)
{
    m_pagesCount = value;
    m_pagesCountIsSet = true;
}

bool ExportReportVM::pagesCountIsSet() const
{
    return m_pagesCountIsSet;
}

void ExportReportVM::unsetpagesCount()
{
    m_pagesCountIsSet = false;
}
std::shared_ptr<ExportFormat> ExportReportVM::getFormat() const
{
    return m_format;
}

void ExportReportVM::setFormat(const std::shared_ptr<ExportFormat>& value)
{
    m_format = value;
    m_formatIsSet = true;
}

bool ExportReportVM::formatIsSet() const
{
    return m_formatIsSet;
}

void ExportReportVM::unsetformat()
{
    m_formatIsSet = false;
}
std::map<utility::string_t, utility::string_t>& ExportReportVM::getExportParameters()
{
    return m_exportParameters;
}

void ExportReportVM::setExportParameters(const std::map<utility::string_t, utility::string_t>& value)
{
    m_exportParameters = value;
    m_exportParametersIsSet = true;
}

bool ExportReportVM::exportParametersIsSet() const
{
    return m_exportParametersIsSet;
}

void ExportReportVM::unsetexportParameters()
{
    m_exportParametersIsSet = false;
}
}
}
}


