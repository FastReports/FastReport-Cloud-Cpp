/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataSourceCreate.h"

namespace fastreport {
namespace cloud {
namespace models {



DataSourceCreate::DataSourceCreate()
{
}

DataSourceCreate::~DataSourceCreate()
{
}

void DataSourceCreate::validate()
{
    // TODO: implement validation
}

web::json::value DataSourceCreate::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eDataSourceCreate::DataSourceCreate__0) val = web::json::value::string(U(0));
    if (m_value == eDataSourceCreate::DataSourceCreate__1) val = web::json::value::string(U(-1));

    return val;
}

bool DataSourceCreate::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(0)) m_value = eDataSourceCreate::DataSourceCreate__0;
    if (s == utility::conversions::to_string_t(-1)) m_value = eDataSourceCreate::DataSourceCreate__1;
    return true;
}

void DataSourceCreate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eDataSourceCreate::DataSourceCreate__0) s = utility::conversions::to_string_t(0);
    if (m_value == eDataSourceCreate::DataSourceCreate__1) s = utility::conversions::to_string_t(-1);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool DataSourceCreate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eDataSourceCreate v;

        
        if (s == utility::conversions::to_string_t(0)) v = eDataSourceCreate::DataSourceCreate__0;
        if (s == utility::conversions::to_string_t(-1)) v = eDataSourceCreate::DataSourceCreate__1;

        setValue(v);
    }
    return ok;
}

DataSourceCreate::eDataSourceCreate DataSourceCreate::getValue() const
{
   return m_value;
}

void DataSourceCreate::setValue(DataSourceCreate::eDataSourceCreate const value)
{
   m_value = value;
}


}
}
}


