/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FileStatusReason.h"

namespace fastreport {
namespace cloud {
namespace models {



FileStatusReason::FileStatusReason()
{
}

FileStatusReason::~FileStatusReason()
{
}

void FileStatusReason::validate()
{
    // TODO: implement validation
}

web::json::value FileStatusReason::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eFileStatusReason::FileStatusReason_NONE) val = web::json::value::string(U(None));
    if (m_value == eFileStatusReason::FileStatusReason_ALLRIGHT) val = web::json::value::string(U(AllRight));
    if (m_value == eFileStatusReason::FileStatusReason_HANG) val = web::json::value::string(U(Hang));
    if (m_value == eFileStatusReason::FileStatusReason_ERROR) val = web::json::value::string(U(Error));
    if (m_value == eFileStatusReason::FileStatusReason_NOTFOUND) val = web::json::value::string(U(NotFound));
    if (m_value == eFileStatusReason::FileStatusReason_NOTENOUGHSPACE) val = web::json::value::string(U(NotEnoughSpace));
    if (m_value == eFileStatusReason::FileStatusReason_EXPORTSTARTED) val = web::json::value::string(U(ExportStarted));
    if (m_value == eFileStatusReason::FileStatusReason_PREPARATIONSTARTED) val = web::json::value::string(U(PreparationStarted));
    if (m_value == eFileStatusReason::FileStatusReason_CRASHLOOP) val = web::json::value::string(U(CrashLoop));

    return val;
}

bool FileStatusReason::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(None)) m_value = eFileStatusReason::FileStatusReason_NONE;
    if (s == utility::conversions::to_string_t(AllRight)) m_value = eFileStatusReason::FileStatusReason_ALLRIGHT;
    if (s == utility::conversions::to_string_t(Hang)) m_value = eFileStatusReason::FileStatusReason_HANG;
    if (s == utility::conversions::to_string_t(Error)) m_value = eFileStatusReason::FileStatusReason_ERROR;
    if (s == utility::conversions::to_string_t(NotFound)) m_value = eFileStatusReason::FileStatusReason_NOTFOUND;
    if (s == utility::conversions::to_string_t(NotEnoughSpace)) m_value = eFileStatusReason::FileStatusReason_NOTENOUGHSPACE;
    if (s == utility::conversions::to_string_t(ExportStarted)) m_value = eFileStatusReason::FileStatusReason_EXPORTSTARTED;
    if (s == utility::conversions::to_string_t(PreparationStarted)) m_value = eFileStatusReason::FileStatusReason_PREPARATIONSTARTED;
    if (s == utility::conversions::to_string_t(CrashLoop)) m_value = eFileStatusReason::FileStatusReason_CRASHLOOP;
    return true;
}

void FileStatusReason::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eFileStatusReason::FileStatusReason_NONE) s = utility::conversions::to_string_t(None);
    if (m_value == eFileStatusReason::FileStatusReason_ALLRIGHT) s = utility::conversions::to_string_t(AllRight);
    if (m_value == eFileStatusReason::FileStatusReason_HANG) s = utility::conversions::to_string_t(Hang);
    if (m_value == eFileStatusReason::FileStatusReason_ERROR) s = utility::conversions::to_string_t(Error);
    if (m_value == eFileStatusReason::FileStatusReason_NOTFOUND) s = utility::conversions::to_string_t(NotFound);
    if (m_value == eFileStatusReason::FileStatusReason_NOTENOUGHSPACE) s = utility::conversions::to_string_t(NotEnoughSpace);
    if (m_value == eFileStatusReason::FileStatusReason_EXPORTSTARTED) s = utility::conversions::to_string_t(ExportStarted);
    if (m_value == eFileStatusReason::FileStatusReason_PREPARATIONSTARTED) s = utility::conversions::to_string_t(PreparationStarted);
    if (m_value == eFileStatusReason::FileStatusReason_CRASHLOOP) s = utility::conversions::to_string_t(CrashLoop);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool FileStatusReason::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eFileStatusReason v;

        
        if (s == utility::conversions::to_string_t(None)) v = eFileStatusReason::FileStatusReason_NONE;
        if (s == utility::conversions::to_string_t(AllRight)) v = eFileStatusReason::FileStatusReason_ALLRIGHT;
        if (s == utility::conversions::to_string_t(Hang)) v = eFileStatusReason::FileStatusReason_HANG;
        if (s == utility::conversions::to_string_t(Error)) v = eFileStatusReason::FileStatusReason_ERROR;
        if (s == utility::conversions::to_string_t(NotFound)) v = eFileStatusReason::FileStatusReason_NOTFOUND;
        if (s == utility::conversions::to_string_t(NotEnoughSpace)) v = eFileStatusReason::FileStatusReason_NOTENOUGHSPACE;
        if (s == utility::conversions::to_string_t(ExportStarted)) v = eFileStatusReason::FileStatusReason_EXPORTSTARTED;
        if (s == utility::conversions::to_string_t(PreparationStarted)) v = eFileStatusReason::FileStatusReason_PREPARATIONSTARTED;
        if (s == utility::conversions::to_string_t(CrashLoop)) v = eFileStatusReason::FileStatusReason_CRASHLOOP;

        setValue(v);
    }
    return ok;
}

FileStatusReason::eFileStatusReason FileStatusReason::getValue() const
{
   return m_value;
}

void FileStatusReason::setValue(FileStatusReason::eFileStatusReason const value)
{
   m_value = value;
}


}
}
}


