/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AppMixins.h"

namespace fastreport {
namespace cloud {
namespace models {




AppMixins::AppMixins()
{
    m_head = utility::conversions::to_string_t("");
    m_headIsSet = false;
    m_body = utility::conversions::to_string_t("");
    m_bodyIsSet = false;
}

AppMixins::~AppMixins()
{
}

void AppMixins::validate()
{
    // TODO: implement validation
}

web::json::value AppMixins::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_headIsSet)
    {
        val[utility::conversions::to_string_t("head")] = ModelBase::toJson(m_head);
    }
    if(m_bodyIsSet)
    {
        val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_body);
    }

    return val;
}

bool AppMixins::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("head")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("head"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_head;
            ok &= ModelBase::fromJson(fieldValue, refVal_head);
            setHead(refVal_head);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("body"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_body;
            ok &= ModelBase::fromJson(fieldValue, refVal_body);
            setBody(refVal_body);
        }
    }
    return ok;
}

void AppMixins::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_headIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("head"), m_head));
    }
    if(m_bodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_body));
    }
}

bool AppMixins::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("head")))
    {
        utility::string_t refVal_head;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("head")), refVal_head );
        setHead(refVal_head);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        utility::string_t refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    return ok;
}

utility::string_t AppMixins::getHead() const
{
    return m_head;
}

void AppMixins::setHead(const utility::string_t& value)
{
    m_head = value;
    m_headIsSet = true;
}

bool AppMixins::headIsSet() const
{
    return m_headIsSet;
}

void AppMixins::unsethead()
{
    m_headIsSet = false;
}
utility::string_t AppMixins::getBody() const
{
    return m_body;
}

void AppMixins::setBody(const utility::string_t& value)
{
    m_body = value;
    m_bodyIsSet = true;
}

bool AppMixins::bodyIsSet() const
{
    return m_bodyIsSet;
}

void AppMixins::unsetbody()
{
    m_bodyIsSet = false;
}
}
}
}


