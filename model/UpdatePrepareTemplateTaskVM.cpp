/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UpdatePrepareTemplateTaskVM.h"

namespace fastreport {
namespace cloud {
namespace models {




UpdatePrepareTemplateTaskVM::UpdatePrepareTemplateTaskVM()
{
    m_exportsIsSet = false;
    m_pagesCount = 0;
    m_pagesCountIsSet = false;
    m_reportParametersIsSet = false;
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_subscriptionId = utility::conversions::to_string_t("");
    m_subscriptionIdIsSet = false;
    m_typeIsSet = false;
    m_delayedRunTime = utility::datetime();
    m_delayedRunTimeIsSet = false;
    m_cronExpression = utility::conversions::to_string_t("");
    m_cronExpressionIsSet = false;
}

UpdatePrepareTemplateTaskVM::~UpdatePrepareTemplateTaskVM()
{
}

void UpdatePrepareTemplateTaskVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdatePrepareTemplateTaskVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_exportsIsSet)
    {
        val[utility::conversions::to_string_t("exports")] = ModelBase::toJson(m_exports);
    }
    if(m_pagesCountIsSet)
    {
        val[utility::conversions::to_string_t("pagesCount")] = ModelBase::toJson(m_pagesCount);
    }
    if(m_reportParametersIsSet)
    {
        val[utility::conversions::to_string_t("reportParameters")] = ModelBase::toJson(m_reportParameters);
    }
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_name);
    }
    if(m_subscriptionIdIsSet)
    {
        val[utility::conversions::to_string_t("subscriptionId")] = ModelBase::toJson(m_subscriptionId);
    }
    if(m_typeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_type);
    }
    if(m_delayedRunTimeIsSet)
    {
        val[utility::conversions::to_string_t("delayedRunTime")] = ModelBase::toJson(m_delayedRunTime);
    }
    if(m_cronExpressionIsSet)
    {
        val[utility::conversions::to_string_t("cronExpression")] = ModelBase::toJson(m_cronExpression);
    }

    return val;
}

bool UpdatePrepareTemplateTaskVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("exports")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exports"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<UpdateExportReportTaskVM>> refVal_exports;
            ok &= ModelBase::fromJson(fieldValue, refVal_exports);
            setExports(refVal_exports);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pagesCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pagesCount"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_pagesCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_pagesCount);
            setPagesCount(refVal_pagesCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reportParameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reportParameters"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_reportParameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_reportParameters);
            setReportParameters(refVal_reportParameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscriptionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscriptionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subscriptionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscriptionId);
            setSubscriptionId(refVal_subscriptionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TaskType> refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("delayedRunTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("delayedRunTime"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_delayedRunTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_delayedRunTime);
            setDelayedRunTime(refVal_delayedRunTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cronExpression")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cronExpression"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cronExpression;
            ok &= ModelBase::fromJson(fieldValue, refVal_cronExpression);
            setCronExpression(refVal_cronExpression);
        }
    }
    return ok;
}

void UpdatePrepareTemplateTaskVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_exportsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exports"), m_exports));
    }
    if(m_pagesCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pagesCount"), m_pagesCount));
    }
    if(m_reportParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reportParameters"), m_reportParameters));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_name));
    }
    if(m_subscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscriptionId"), m_subscriptionId));
    }
    if(m_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_type));
    }
    if(m_delayedRunTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("delayedRunTime"), m_delayedRunTime));
    }
    if(m_cronExpressionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cronExpression"), m_cronExpression));
    }
}

bool UpdatePrepareTemplateTaskVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("exports")))
    {
        std::vector<std::shared_ptr<UpdateExportReportTaskVM>> refVal_exports;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exports")), refVal_exports );
        setExports(refVal_exports);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pagesCount")))
    {
        int32_t refVal_pagesCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pagesCount")), refVal_pagesCount );
        setPagesCount(refVal_pagesCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reportParameters")))
    {
        std::map<utility::string_t, utility::string_t> refVal_reportParameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reportParameters")), refVal_reportParameters );
        setReportParameters(refVal_reportParameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscriptionId")))
    {
        utility::string_t refVal_subscriptionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscriptionId")), refVal_subscriptionId );
        setSubscriptionId(refVal_subscriptionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        std::shared_ptr<TaskType> refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("delayedRunTime")))
    {
        utility::datetime refVal_delayedRunTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("delayedRunTime")), refVal_delayedRunTime );
        setDelayedRunTime(refVal_delayedRunTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cronExpression")))
    {
        utility::string_t refVal_cronExpression;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cronExpression")), refVal_cronExpression );
        setCronExpression(refVal_cronExpression);
    }
    return ok;
}

std::vector<std::shared_ptr<UpdateExportReportTaskVM>>& UpdatePrepareTemplateTaskVM::getExports()
{
    return m_exports;
}

void UpdatePrepareTemplateTaskVM::setExports(const std::vector<std::shared_ptr<UpdateExportReportTaskVM>>& value)
{
    m_exports = value;
    m_exportsIsSet = true;
}

bool UpdatePrepareTemplateTaskVM::exportsIsSet() const
{
    return m_exportsIsSet;
}

void UpdatePrepareTemplateTaskVM::unsetexports()
{
    m_exportsIsSet = false;
}
int32_t UpdatePrepareTemplateTaskVM::getPagesCount() const
{
    return m_pagesCount;
}

void UpdatePrepareTemplateTaskVM::setPagesCount(int32_t value)
{
    m_pagesCount = value;
    m_pagesCountIsSet = true;
}

bool UpdatePrepareTemplateTaskVM::pagesCountIsSet() const
{
    return m_pagesCountIsSet;
}

void UpdatePrepareTemplateTaskVM::unsetpagesCount()
{
    m_pagesCountIsSet = false;
}
std::map<utility::string_t, utility::string_t>& UpdatePrepareTemplateTaskVM::getReportParameters()
{
    return m_reportParameters;
}

void UpdatePrepareTemplateTaskVM::setReportParameters(const std::map<utility::string_t, utility::string_t>& value)
{
    m_reportParameters = value;
    m_reportParametersIsSet = true;
}

bool UpdatePrepareTemplateTaskVM::reportParametersIsSet() const
{
    return m_reportParametersIsSet;
}

void UpdatePrepareTemplateTaskVM::unsetreportParameters()
{
    m_reportParametersIsSet = false;
}
utility::string_t UpdatePrepareTemplateTaskVM::getName() const
{
    return m_name;
}

void UpdatePrepareTemplateTaskVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool UpdatePrepareTemplateTaskVM::nameIsSet() const
{
    return m_nameIsSet;
}

void UpdatePrepareTemplateTaskVM::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t UpdatePrepareTemplateTaskVM::getSubscriptionId() const
{
    return m_subscriptionId;
}

void UpdatePrepareTemplateTaskVM::setSubscriptionId(const utility::string_t& value)
{
    m_subscriptionId = value;
    m_subscriptionIdIsSet = true;
}

bool UpdatePrepareTemplateTaskVM::subscriptionIdIsSet() const
{
    return m_subscriptionIdIsSet;
}

void UpdatePrepareTemplateTaskVM::unsetsubscriptionId()
{
    m_subscriptionIdIsSet = false;
}
std::shared_ptr<TaskType> UpdatePrepareTemplateTaskVM::getType() const
{
    return m_type;
}

void UpdatePrepareTemplateTaskVM::setType(const std::shared_ptr<TaskType>& value)
{
    m_type = value;
    m_typeIsSet = true;
}

bool UpdatePrepareTemplateTaskVM::typeIsSet() const
{
    return m_typeIsSet;
}

void UpdatePrepareTemplateTaskVM::unsettype()
{
    m_typeIsSet = false;
}
utility::datetime UpdatePrepareTemplateTaskVM::getDelayedRunTime() const
{
    return m_delayedRunTime;
}

void UpdatePrepareTemplateTaskVM::setDelayedRunTime(const utility::datetime& value)
{
    m_delayedRunTime = value;
    m_delayedRunTimeIsSet = true;
}

bool UpdatePrepareTemplateTaskVM::delayedRunTimeIsSet() const
{
    return m_delayedRunTimeIsSet;
}

void UpdatePrepareTemplateTaskVM::unsetdelayedRunTime()
{
    m_delayedRunTimeIsSet = false;
}
utility::string_t UpdatePrepareTemplateTaskVM::getCronExpression() const
{
    return m_cronExpression;
}

void UpdatePrepareTemplateTaskVM::setCronExpression(const utility::string_t& value)
{
    m_cronExpression = value;
    m_cronExpressionIsSet = true;
}

bool UpdatePrepareTemplateTaskVM::cronExpressionIsSet() const
{
    return m_cronExpressionIsSet;
}

void UpdatePrepareTemplateTaskVM::unsetcronExpression()
{
    m_cronExpressionIsSet = false;
}
}
}
}


