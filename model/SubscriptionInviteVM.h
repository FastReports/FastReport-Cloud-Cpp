/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SubscriptionInviteVM.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_MODELS_SubscriptionInviteVM_H_
#define FASTREPORT_CLOUD_MODELS_SubscriptionInviteVM_H_

#include "CloudKludge.h"
#include "../ModelBase.h"

#include "InvitedUser.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace fastreport {
namespace cloud {
namespace models {


/// <summary>
/// 
/// </summary>
class  SubscriptionInviteVM
    : public ModelBase
{
public:
    SubscriptionInviteVM();
    virtual ~SubscriptionInviteVM();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SubscriptionInviteVM members

    /// <summary>
    /// 
    /// </summary>
    int64_t getUsages() const;
    bool usagesIsSet() const;
    void unsetusages();

    void setUsages(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isDurable() const;
    bool durableIsSet() const;
    void unsetdurable();

    void setDurable(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccessToken() const;
    bool accessTokenIsSet() const;
    void unsetaccessToken();

    void setAccessToken(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpiredDate() const;
    bool expiredDateIsSet() const;
    void unsetexpiredDate();

    void setExpiredDate(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<InvitedUser>>& getAddedUsers();
    bool addedUsersIsSet() const;
    void unsetaddedUsers();

    void setAddedUsers(const std::vector<std::shared_ptr<InvitedUser>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreatorUserId() const;
    bool creatorUserIdIsSet() const;
    void unsetcreatorUserId();

    void setCreatorUserId(const utility::string_t& value);


protected:
    int64_t m_usages;
    bool m_usagesIsSet;
    bool m_durable;
    bool m_durableIsSet;
    utility::string_t m_accessToken;
    bool m_accessTokenIsSet;
    utility::datetime m_expiredDate;
    bool m_expiredDateIsSet;
    std::vector<std::shared_ptr<InvitedUser>> m_addedUsers;
    bool m_addedUsersIsSet;
    utility::string_t m_creatorUserId;
    bool m_creatorUserIdIsSet;
};


}
}
}

#endif /* FASTREPORT_CLOUD_MODELS_SubscriptionInviteVM_H_ */
