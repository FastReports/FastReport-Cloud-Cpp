/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ExportFolderCreateVM.h"

namespace fastreport {
namespace cloud {
namespace models {




ExportFolderCreateVM::ExportFolderCreateVM()
{
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_tagsIsSet = false;
    m_icon = utility::conversions::to_string_t("");
    m_iconIsSet = false;
}

ExportFolderCreateVM::~ExportFolderCreateVM()
{
}

void ExportFolderCreateVM::validate()
{
    // TODO: implement validation
}

web::json::value ExportFolderCreateVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_name);
    }
    if(m_tagsIsSet)
    {
        val[utility::conversions::to_string_t("tags")] = ModelBase::toJson(m_tags);
    }
    if(m_iconIsSet)
    {
        val[utility::conversions::to_string_t("icon")] = ModelBase::toJson(m_icon);
    }

    return val;
}

bool ExportFolderCreateVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tags")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tags"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_tags;
            ok &= ModelBase::fromJson(fieldValue, refVal_tags);
            setTags(refVal_tags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("icon")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("icon"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_icon);
            setIcon(refVal_icon);
        }
    }
    return ok;
}

void ExportFolderCreateVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_name));
    }
    if(m_tagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), m_tags));
    }
    if(m_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("icon"), m_icon));
    }
}

bool ExportFolderCreateVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tags")))
    {
        std::vector<utility::string_t> refVal_tags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags")), refVal_tags );
        setTags(refVal_tags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("icon")))
    {
        utility::string_t refVal_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("icon")), refVal_icon );
        setIcon(refVal_icon);
    }
    return ok;
}

utility::string_t ExportFolderCreateVM::getName() const
{
    return m_name;
}

void ExportFolderCreateVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool ExportFolderCreateVM::nameIsSet() const
{
    return m_nameIsSet;
}

void ExportFolderCreateVM::unsetname()
{
    m_nameIsSet = false;
}
std::vector<utility::string_t>& ExportFolderCreateVM::getTags()
{
    return m_tags;
}

void ExportFolderCreateVM::setTags(const std::vector<utility::string_t>& value)
{
    m_tags = value;
    m_tagsIsSet = true;
}

bool ExportFolderCreateVM::tagsIsSet() const
{
    return m_tagsIsSet;
}

void ExportFolderCreateVM::unsettags()
{
    m_tagsIsSet = false;
}
utility::string_t ExportFolderCreateVM::getIcon() const
{
    return m_icon;
}

void ExportFolderCreateVM::setIcon(const utility::string_t& value)
{
    m_icon = value;
    m_iconIsSet = true;
}

bool ExportFolderCreateVM::iconIsSet() const
{
    return m_iconIsSet;
}

void ExportFolderCreateVM::unseticon()
{
    m_iconIsSet = false;
}
}
}
}


