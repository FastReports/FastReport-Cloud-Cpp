/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyPermissionsVM.h"

namespace fastreport {
namespace cloud {
namespace models {




MyPermissionsVM::MyPermissionsVM()
{
    m_subscriptionIsSet = false;
    m_filesIsSet = false;
    m_datasourcesIsSet = false;
    m_groupsIsSet = false;
}

MyPermissionsVM::~MyPermissionsVM()
{
}

void MyPermissionsVM::validate()
{
    // TODO: implement validation
}

web::json::value MyPermissionsVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_subscriptionIsSet)
    {
        val[utility::conversions::to_string_t("subscription")] = ModelBase::toJson(m_subscription);
    }
    if(m_filesIsSet)
    {
        val[utility::conversions::to_string_t("files")] = ModelBase::toJson(m_files);
    }
    if(m_datasourcesIsSet)
    {
        val[utility::conversions::to_string_t("datasources")] = ModelBase::toJson(m_datasources);
    }
    if(m_groupsIsSet)
    {
        val[utility::conversions::to_string_t("groups")] = ModelBase::toJson(m_groups);
    }

    return val;
}

bool MyPermissionsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("subscription")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscription"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscriptionPermission> refVal_subscription;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscription);
            setSubscription(refVal_subscription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("files")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("files"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FilePermission> refVal_files;
            ok &= ModelBase::fromJson(fieldValue, refVal_files);
            setFiles(refVal_files);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("datasources")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("datasources"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataSourcePermission> refVal_datasources;
            ok &= ModelBase::fromJson(fieldValue, refVal_datasources);
            setDatasources(refVal_datasources);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groups")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groups"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GroupPermission> refVal_groups;
            ok &= ModelBase::fromJson(fieldValue, refVal_groups);
            setGroups(refVal_groups);
        }
    }
    return ok;
}

void MyPermissionsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_subscriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscription"), m_subscription));
    }
    if(m_filesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("files"), m_files));
    }
    if(m_datasourcesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("datasources"), m_datasources));
    }
    if(m_groupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groups"), m_groups));
    }
}

bool MyPermissionsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("subscription")))
    {
        std::shared_ptr<SubscriptionPermission> refVal_subscription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscription")), refVal_subscription );
        setSubscription(refVal_subscription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("files")))
    {
        std::shared_ptr<FilePermission> refVal_files;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("files")), refVal_files );
        setFiles(refVal_files);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("datasources")))
    {
        std::shared_ptr<DataSourcePermission> refVal_datasources;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("datasources")), refVal_datasources );
        setDatasources(refVal_datasources);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groups")))
    {
        std::shared_ptr<GroupPermission> refVal_groups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groups")), refVal_groups );
        setGroups(refVal_groups);
    }
    return ok;
}

std::shared_ptr<SubscriptionPermission> MyPermissionsVM::getSubscription() const
{
    return m_subscription;
}

void MyPermissionsVM::setSubscription(const std::shared_ptr<SubscriptionPermission>& value)
{
    m_subscription = value;
    m_subscriptionIsSet = true;
}

bool MyPermissionsVM::subscriptionIsSet() const
{
    return m_subscriptionIsSet;
}

void MyPermissionsVM::unsetsubscription()
{
    m_subscriptionIsSet = false;
}
std::shared_ptr<FilePermission> MyPermissionsVM::getFiles() const
{
    return m_files;
}

void MyPermissionsVM::setFiles(const std::shared_ptr<FilePermission>& value)
{
    m_files = value;
    m_filesIsSet = true;
}

bool MyPermissionsVM::filesIsSet() const
{
    return m_filesIsSet;
}

void MyPermissionsVM::unsetfiles()
{
    m_filesIsSet = false;
}
std::shared_ptr<DataSourcePermission> MyPermissionsVM::getDatasources() const
{
    return m_datasources;
}

void MyPermissionsVM::setDatasources(const std::shared_ptr<DataSourcePermission>& value)
{
    m_datasources = value;
    m_datasourcesIsSet = true;
}

bool MyPermissionsVM::datasourcesIsSet() const
{
    return m_datasourcesIsSet;
}

void MyPermissionsVM::unsetdatasources()
{
    m_datasourcesIsSet = false;
}
std::shared_ptr<GroupPermission> MyPermissionsVM::getGroups() const
{
    return m_groups;
}

void MyPermissionsVM::setGroups(const std::shared_ptr<GroupPermission>& value)
{
    m_groups = value;
    m_groupsIsSet = true;
}

bool MyPermissionsVM::groupsIsSet() const
{
    return m_groupsIsSet;
}

void MyPermissionsVM::unsetgroups()
{
    m_groupsIsSet = false;
}
}
}
}


