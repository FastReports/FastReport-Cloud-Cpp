/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataSourceConnectionType.h"

namespace fastreport {
namespace cloud {
namespace models {



DataSourceConnectionType::DataSourceConnectionType()
{
}

DataSourceConnectionType::~DataSourceConnectionType()
{
}

void DataSourceConnectionType::validate()
{
    // TODO: implement validation
}

web::json::value DataSourceConnectionType::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_JSON) val = web::json::value::string(U(JSON));
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_MSSQL) val = web::json::value::string(U(MSSQL));
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_CSV) val = web::json::value::string(U(CSV));
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_XML) val = web::json::value::string(U(XML));
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_MYSQL) val = web::json::value::string(U(MySQL));
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_POSTGRES) val = web::json::value::string(U(Postgres));
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_ORACLEDB) val = web::json::value::string(U(OracleDB));
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_FIREBIRDDB) val = web::json::value::string(U(FirebirdDB));
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_MONGODB) val = web::json::value::string(U(MongoDB));

    return val;
}

bool DataSourceConnectionType::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(JSON)) m_value = eDataSourceConnectionType::DataSourceConnectionType_JSON;
    if (s == utility::conversions::to_string_t(MSSQL)) m_value = eDataSourceConnectionType::DataSourceConnectionType_MSSQL;
    if (s == utility::conversions::to_string_t(CSV)) m_value = eDataSourceConnectionType::DataSourceConnectionType_CSV;
    if (s == utility::conversions::to_string_t(XML)) m_value = eDataSourceConnectionType::DataSourceConnectionType_XML;
    if (s == utility::conversions::to_string_t(MySQL)) m_value = eDataSourceConnectionType::DataSourceConnectionType_MYSQL;
    if (s == utility::conversions::to_string_t(Postgres)) m_value = eDataSourceConnectionType::DataSourceConnectionType_POSTGRES;
    if (s == utility::conversions::to_string_t(OracleDB)) m_value = eDataSourceConnectionType::DataSourceConnectionType_ORACLEDB;
    if (s == utility::conversions::to_string_t(FirebirdDB)) m_value = eDataSourceConnectionType::DataSourceConnectionType_FIREBIRDDB;
    if (s == utility::conversions::to_string_t(MongoDB)) m_value = eDataSourceConnectionType::DataSourceConnectionType_MONGODB;
    return true;
}

void DataSourceConnectionType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_JSON) s = utility::conversions::to_string_t(JSON);
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_MSSQL) s = utility::conversions::to_string_t(MSSQL);
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_CSV) s = utility::conversions::to_string_t(CSV);
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_XML) s = utility::conversions::to_string_t(XML);
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_MYSQL) s = utility::conversions::to_string_t(MySQL);
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_POSTGRES) s = utility::conversions::to_string_t(Postgres);
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_ORACLEDB) s = utility::conversions::to_string_t(OracleDB);
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_FIREBIRDDB) s = utility::conversions::to_string_t(FirebirdDB);
    if (m_value == eDataSourceConnectionType::DataSourceConnectionType_MONGODB) s = utility::conversions::to_string_t(MongoDB);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool DataSourceConnectionType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eDataSourceConnectionType v;

        
        if (s == utility::conversions::to_string_t(JSON)) v = eDataSourceConnectionType::DataSourceConnectionType_JSON;
        if (s == utility::conversions::to_string_t(MSSQL)) v = eDataSourceConnectionType::DataSourceConnectionType_MSSQL;
        if (s == utility::conversions::to_string_t(CSV)) v = eDataSourceConnectionType::DataSourceConnectionType_CSV;
        if (s == utility::conversions::to_string_t(XML)) v = eDataSourceConnectionType::DataSourceConnectionType_XML;
        if (s == utility::conversions::to_string_t(MySQL)) v = eDataSourceConnectionType::DataSourceConnectionType_MYSQL;
        if (s == utility::conversions::to_string_t(Postgres)) v = eDataSourceConnectionType::DataSourceConnectionType_POSTGRES;
        if (s == utility::conversions::to_string_t(OracleDB)) v = eDataSourceConnectionType::DataSourceConnectionType_ORACLEDB;
        if (s == utility::conversions::to_string_t(FirebirdDB)) v = eDataSourceConnectionType::DataSourceConnectionType_FIREBIRDDB;
        if (s == utility::conversions::to_string_t(MongoDB)) v = eDataSourceConnectionType::DataSourceConnectionType_MONGODB;

        setValue(v);
    }
    return ok;
}

DataSourceConnectionType::eDataSourceConnectionType DataSourceConnectionType::getValue() const
{
   return m_value;
}

void DataSourceConnectionType::setValue(DataSourceConnectionType::eDataSourceConnectionType const value)
{
   m_value = value;
}


}
}
}


