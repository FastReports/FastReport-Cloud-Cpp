/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateSubscriptionPlanVM.h"

namespace fastreport {
namespace cloud {
namespace models {




CreateSubscriptionPlanVM::CreateSubscriptionPlanVM()
{
    m_isActive = false;
    m_isActiveIsSet = false;
    m_displayName = utility::conversions::to_string_t("");
    m_displayNameIsSet = false;
    m_timePeriodType = utility::conversions::to_string_t("");
    m_timePeriodTypeIsSet = false;
    m_timePeriod = 0;
    m_timePeriodIsSet = false;
    m_templatesSpaceLimit = 0L;
    m_templatesSpaceLimitIsSet = false;
    m_reportsSpaceLimit = 0L;
    m_reportsSpaceLimitIsSet = false;
    m_exportsSpaceLimit = 0L;
    m_exportsSpaceLimitIsSet = false;
    m_fileUploadSizeLimit = 0L;
    m_fileUploadSizeLimitIsSet = false;
    m_dataSourceLimit = 0;
    m_dataSourceLimitIsSet = false;
    m_maxUsersCount = 0;
    m_maxUsersCountIsSet = false;
    m_hasSpaceOverdraft = false;
    m_hasSpaceOverdraftIsSet = false;
    m_groupLimit = 0;
    m_groupLimitIsSet = false;
    m_onlineDesigner = false;
    m_onlineDesignerIsSet = false;
    m_isDemo = false;
    m_isDemoIsSet = false;
    m_urlToBuy = utility::conversions::to_string_t("");
    m_urlToBuyIsSet = false;
    m_unlimitedPage = false;
    m_unlimitedPageIsSet = false;
    m_pageLimit = 0;
    m_pageLimitIsSet = false;
}

CreateSubscriptionPlanVM::~CreateSubscriptionPlanVM()
{
}

void CreateSubscriptionPlanVM::validate()
{
    // TODO: implement validation
}

web::json::value CreateSubscriptionPlanVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_isActiveIsSet)
    {
        val[utility::conversions::to_string_t("isActive")] = ModelBase::toJson(m_isActive);
    }
    if(m_displayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_displayName);
    }
    if(m_timePeriodTypeIsSet)
    {
        val[utility::conversions::to_string_t("timePeriodType")] = ModelBase::toJson(m_timePeriodType);
    }
    if(m_timePeriodIsSet)
    {
        val[utility::conversions::to_string_t("timePeriod")] = ModelBase::toJson(m_timePeriod);
    }
    if(m_templatesSpaceLimitIsSet)
    {
        val[utility::conversions::to_string_t("templatesSpaceLimit")] = ModelBase::toJson(m_templatesSpaceLimit);
    }
    if(m_reportsSpaceLimitIsSet)
    {
        val[utility::conversions::to_string_t("reportsSpaceLimit")] = ModelBase::toJson(m_reportsSpaceLimit);
    }
    if(m_exportsSpaceLimitIsSet)
    {
        val[utility::conversions::to_string_t("exportsSpaceLimit")] = ModelBase::toJson(m_exportsSpaceLimit);
    }
    if(m_fileUploadSizeLimitIsSet)
    {
        val[utility::conversions::to_string_t("fileUploadSizeLimit")] = ModelBase::toJson(m_fileUploadSizeLimit);
    }
    if(m_dataSourceLimitIsSet)
    {
        val[utility::conversions::to_string_t("dataSourceLimit")] = ModelBase::toJson(m_dataSourceLimit);
    }
    if(m_maxUsersCountIsSet)
    {
        val[utility::conversions::to_string_t("maxUsersCount")] = ModelBase::toJson(m_maxUsersCount);
    }
    if(m_hasSpaceOverdraftIsSet)
    {
        val[utility::conversions::to_string_t("hasSpaceOverdraft")] = ModelBase::toJson(m_hasSpaceOverdraft);
    }
    if(m_groupLimitIsSet)
    {
        val[utility::conversions::to_string_t("groupLimit")] = ModelBase::toJson(m_groupLimit);
    }
    if(m_onlineDesignerIsSet)
    {
        val[utility::conversions::to_string_t("onlineDesigner")] = ModelBase::toJson(m_onlineDesigner);
    }
    if(m_isDemoIsSet)
    {
        val[utility::conversions::to_string_t("isDemo")] = ModelBase::toJson(m_isDemo);
    }
    if(m_urlToBuyIsSet)
    {
        val[utility::conversions::to_string_t("urlToBuy")] = ModelBase::toJson(m_urlToBuy);
    }
    if(m_unlimitedPageIsSet)
    {
        val[utility::conversions::to_string_t("unlimitedPage")] = ModelBase::toJson(m_unlimitedPage);
    }
    if(m_pageLimitIsSet)
    {
        val[utility::conversions::to_string_t("pageLimit")] = ModelBase::toJson(m_pageLimit);
    }

    return val;
}

bool CreateSubscriptionPlanVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("isActive")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isActive"));
        if(!fieldValue.is_null())
        {
            bool refVal_isActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_isActive);
            setIsActive(refVal_isActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("displayName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_displayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_displayName);
            setDisplayName(refVal_displayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timePeriodType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timePeriodType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_timePeriodType;
            ok &= ModelBase::fromJson(fieldValue, refVal_timePeriodType);
            setTimePeriodType(refVal_timePeriodType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timePeriod")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timePeriod"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_timePeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_timePeriod);
            setTimePeriod(refVal_timePeriod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templatesSpaceLimit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("templatesSpaceLimit"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_templatesSpaceLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_templatesSpaceLimit);
            setTemplatesSpaceLimit(refVal_templatesSpaceLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reportsSpaceLimit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reportsSpaceLimit"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_reportsSpaceLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_reportsSpaceLimit);
            setReportsSpaceLimit(refVal_reportsSpaceLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exportsSpaceLimit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exportsSpaceLimit"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_exportsSpaceLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_exportsSpaceLimit);
            setExportsSpaceLimit(refVal_exportsSpaceLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fileUploadSizeLimit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fileUploadSizeLimit"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_fileUploadSizeLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_fileUploadSizeLimit);
            setFileUploadSizeLimit(refVal_fileUploadSizeLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dataSourceLimit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dataSourceLimit"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_dataSourceLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataSourceLimit);
            setDataSourceLimit(refVal_dataSourceLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxUsersCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("maxUsersCount"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_maxUsersCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_maxUsersCount);
            setMaxUsersCount(refVal_maxUsersCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasSpaceOverdraft")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasSpaceOverdraft"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasSpaceOverdraft;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasSpaceOverdraft);
            setHasSpaceOverdraft(refVal_hasSpaceOverdraft);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groupLimit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groupLimit"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_groupLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_groupLimit);
            setGroupLimit(refVal_groupLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("onlineDesigner")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("onlineDesigner"));
        if(!fieldValue.is_null())
        {
            bool refVal_onlineDesigner;
            ok &= ModelBase::fromJson(fieldValue, refVal_onlineDesigner);
            setOnlineDesigner(refVal_onlineDesigner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isDemo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isDemo"));
        if(!fieldValue.is_null())
        {
            bool refVal_isDemo;
            ok &= ModelBase::fromJson(fieldValue, refVal_isDemo);
            setIsDemo(refVal_isDemo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("urlToBuy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("urlToBuy"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_urlToBuy;
            ok &= ModelBase::fromJson(fieldValue, refVal_urlToBuy);
            setUrlToBuy(refVal_urlToBuy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unlimitedPage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unlimitedPage"));
        if(!fieldValue.is_null())
        {
            bool refVal_unlimitedPage;
            ok &= ModelBase::fromJson(fieldValue, refVal_unlimitedPage);
            setUnlimitedPage(refVal_unlimitedPage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pageLimit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pageLimit"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_pageLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_pageLimit);
            setPageLimit(refVal_pageLimit);
        }
    }
    return ok;
}

void CreateSubscriptionPlanVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_isActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isActive"), m_isActive));
    }
    if(m_displayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_displayName));
    }
    if(m_timePeriodTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timePeriodType"), m_timePeriodType));
    }
    if(m_timePeriodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timePeriod"), m_timePeriod));
    }
    if(m_templatesSpaceLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("templatesSpaceLimit"), m_templatesSpaceLimit));
    }
    if(m_reportsSpaceLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reportsSpaceLimit"), m_reportsSpaceLimit));
    }
    if(m_exportsSpaceLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exportsSpaceLimit"), m_exportsSpaceLimit));
    }
    if(m_fileUploadSizeLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fileUploadSizeLimit"), m_fileUploadSizeLimit));
    }
    if(m_dataSourceLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dataSourceLimit"), m_dataSourceLimit));
    }
    if(m_maxUsersCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maxUsersCount"), m_maxUsersCount));
    }
    if(m_hasSpaceOverdraftIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasSpaceOverdraft"), m_hasSpaceOverdraft));
    }
    if(m_groupLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groupLimit"), m_groupLimit));
    }
    if(m_onlineDesignerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("onlineDesigner"), m_onlineDesigner));
    }
    if(m_isDemoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isDemo"), m_isDemo));
    }
    if(m_urlToBuyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("urlToBuy"), m_urlToBuy));
    }
    if(m_unlimitedPageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unlimitedPage"), m_unlimitedPage));
    }
    if(m_pageLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pageLimit"), m_pageLimit));
    }
}

bool CreateSubscriptionPlanVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("isActive")))
    {
        bool refVal_isActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isActive")), refVal_isActive );
        setIsActive(refVal_isActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        utility::string_t refVal_displayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName")), refVal_displayName );
        setDisplayName(refVal_displayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timePeriodType")))
    {
        utility::string_t refVal_timePeriodType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timePeriodType")), refVal_timePeriodType );
        setTimePeriodType(refVal_timePeriodType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timePeriod")))
    {
        int32_t refVal_timePeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timePeriod")), refVal_timePeriod );
        setTimePeriod(refVal_timePeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templatesSpaceLimit")))
    {
        int64_t refVal_templatesSpaceLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("templatesSpaceLimit")), refVal_templatesSpaceLimit );
        setTemplatesSpaceLimit(refVal_templatesSpaceLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reportsSpaceLimit")))
    {
        int64_t refVal_reportsSpaceLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reportsSpaceLimit")), refVal_reportsSpaceLimit );
        setReportsSpaceLimit(refVal_reportsSpaceLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exportsSpaceLimit")))
    {
        int64_t refVal_exportsSpaceLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exportsSpaceLimit")), refVal_exportsSpaceLimit );
        setExportsSpaceLimit(refVal_exportsSpaceLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fileUploadSizeLimit")))
    {
        int64_t refVal_fileUploadSizeLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fileUploadSizeLimit")), refVal_fileUploadSizeLimit );
        setFileUploadSizeLimit(refVal_fileUploadSizeLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataSourceLimit")))
    {
        int32_t refVal_dataSourceLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dataSourceLimit")), refVal_dataSourceLimit );
        setDataSourceLimit(refVal_dataSourceLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxUsersCount")))
    {
        int32_t refVal_maxUsersCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("maxUsersCount")), refVal_maxUsersCount );
        setMaxUsersCount(refVal_maxUsersCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasSpaceOverdraft")))
    {
        bool refVal_hasSpaceOverdraft;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasSpaceOverdraft")), refVal_hasSpaceOverdraft );
        setHasSpaceOverdraft(refVal_hasSpaceOverdraft);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groupLimit")))
    {
        int32_t refVal_groupLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groupLimit")), refVal_groupLimit );
        setGroupLimit(refVal_groupLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("onlineDesigner")))
    {
        bool refVal_onlineDesigner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("onlineDesigner")), refVal_onlineDesigner );
        setOnlineDesigner(refVal_onlineDesigner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isDemo")))
    {
        bool refVal_isDemo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isDemo")), refVal_isDemo );
        setIsDemo(refVal_isDemo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("urlToBuy")))
    {
        utility::string_t refVal_urlToBuy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("urlToBuy")), refVal_urlToBuy );
        setUrlToBuy(refVal_urlToBuy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unlimitedPage")))
    {
        bool refVal_unlimitedPage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unlimitedPage")), refVal_unlimitedPage );
        setUnlimitedPage(refVal_unlimitedPage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pageLimit")))
    {
        int32_t refVal_pageLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pageLimit")), refVal_pageLimit );
        setPageLimit(refVal_pageLimit);
    }
    return ok;
}

bool CreateSubscriptionPlanVM::isIsActive() const
{
    return m_isActive;
}

void CreateSubscriptionPlanVM::setIsActive(bool value)
{
    m_isActive = value;
    m_isActiveIsSet = true;
}

bool CreateSubscriptionPlanVM::isActiveIsSet() const
{
    return m_isActiveIsSet;
}

void CreateSubscriptionPlanVM::unsetisActive()
{
    m_isActiveIsSet = false;
}
utility::string_t CreateSubscriptionPlanVM::getDisplayName() const
{
    return m_displayName;
}

void CreateSubscriptionPlanVM::setDisplayName(const utility::string_t& value)
{
    m_displayName = value;
    m_displayNameIsSet = true;
}

bool CreateSubscriptionPlanVM::displayNameIsSet() const
{
    return m_displayNameIsSet;
}

void CreateSubscriptionPlanVM::unsetdisplayName()
{
    m_displayNameIsSet = false;
}
utility::string_t CreateSubscriptionPlanVM::getTimePeriodType() const
{
    return m_timePeriodType;
}

void CreateSubscriptionPlanVM::setTimePeriodType(const utility::string_t& value)
{
    m_timePeriodType = value;
    m_timePeriodTypeIsSet = true;
}

bool CreateSubscriptionPlanVM::timePeriodTypeIsSet() const
{
    return m_timePeriodTypeIsSet;
}

void CreateSubscriptionPlanVM::unsettimePeriodType()
{
    m_timePeriodTypeIsSet = false;
}
int32_t CreateSubscriptionPlanVM::getTimePeriod() const
{
    return m_timePeriod;
}

void CreateSubscriptionPlanVM::setTimePeriod(int32_t value)
{
    m_timePeriod = value;
    m_timePeriodIsSet = true;
}

bool CreateSubscriptionPlanVM::timePeriodIsSet() const
{
    return m_timePeriodIsSet;
}

void CreateSubscriptionPlanVM::unsettimePeriod()
{
    m_timePeriodIsSet = false;
}
int64_t CreateSubscriptionPlanVM::getTemplatesSpaceLimit() const
{
    return m_templatesSpaceLimit;
}

void CreateSubscriptionPlanVM::setTemplatesSpaceLimit(int64_t value)
{
    m_templatesSpaceLimit = value;
    m_templatesSpaceLimitIsSet = true;
}

bool CreateSubscriptionPlanVM::templatesSpaceLimitIsSet() const
{
    return m_templatesSpaceLimitIsSet;
}

void CreateSubscriptionPlanVM::unsettemplatesSpaceLimit()
{
    m_templatesSpaceLimitIsSet = false;
}
int64_t CreateSubscriptionPlanVM::getReportsSpaceLimit() const
{
    return m_reportsSpaceLimit;
}

void CreateSubscriptionPlanVM::setReportsSpaceLimit(int64_t value)
{
    m_reportsSpaceLimit = value;
    m_reportsSpaceLimitIsSet = true;
}

bool CreateSubscriptionPlanVM::reportsSpaceLimitIsSet() const
{
    return m_reportsSpaceLimitIsSet;
}

void CreateSubscriptionPlanVM::unsetreportsSpaceLimit()
{
    m_reportsSpaceLimitIsSet = false;
}
int64_t CreateSubscriptionPlanVM::getExportsSpaceLimit() const
{
    return m_exportsSpaceLimit;
}

void CreateSubscriptionPlanVM::setExportsSpaceLimit(int64_t value)
{
    m_exportsSpaceLimit = value;
    m_exportsSpaceLimitIsSet = true;
}

bool CreateSubscriptionPlanVM::exportsSpaceLimitIsSet() const
{
    return m_exportsSpaceLimitIsSet;
}

void CreateSubscriptionPlanVM::unsetexportsSpaceLimit()
{
    m_exportsSpaceLimitIsSet = false;
}
int64_t CreateSubscriptionPlanVM::getFileUploadSizeLimit() const
{
    return m_fileUploadSizeLimit;
}

void CreateSubscriptionPlanVM::setFileUploadSizeLimit(int64_t value)
{
    m_fileUploadSizeLimit = value;
    m_fileUploadSizeLimitIsSet = true;
}

bool CreateSubscriptionPlanVM::fileUploadSizeLimitIsSet() const
{
    return m_fileUploadSizeLimitIsSet;
}

void CreateSubscriptionPlanVM::unsetfileUploadSizeLimit()
{
    m_fileUploadSizeLimitIsSet = false;
}
int32_t CreateSubscriptionPlanVM::getDataSourceLimit() const
{
    return m_dataSourceLimit;
}

void CreateSubscriptionPlanVM::setDataSourceLimit(int32_t value)
{
    m_dataSourceLimit = value;
    m_dataSourceLimitIsSet = true;
}

bool CreateSubscriptionPlanVM::dataSourceLimitIsSet() const
{
    return m_dataSourceLimitIsSet;
}

void CreateSubscriptionPlanVM::unsetdataSourceLimit()
{
    m_dataSourceLimitIsSet = false;
}
int32_t CreateSubscriptionPlanVM::getMaxUsersCount() const
{
    return m_maxUsersCount;
}

void CreateSubscriptionPlanVM::setMaxUsersCount(int32_t value)
{
    m_maxUsersCount = value;
    m_maxUsersCountIsSet = true;
}

bool CreateSubscriptionPlanVM::maxUsersCountIsSet() const
{
    return m_maxUsersCountIsSet;
}

void CreateSubscriptionPlanVM::unsetmaxUsersCount()
{
    m_maxUsersCountIsSet = false;
}
bool CreateSubscriptionPlanVM::isHasSpaceOverdraft() const
{
    return m_hasSpaceOverdraft;
}

void CreateSubscriptionPlanVM::setHasSpaceOverdraft(bool value)
{
    m_hasSpaceOverdraft = value;
    m_hasSpaceOverdraftIsSet = true;
}

bool CreateSubscriptionPlanVM::hasSpaceOverdraftIsSet() const
{
    return m_hasSpaceOverdraftIsSet;
}

void CreateSubscriptionPlanVM::unsethasSpaceOverdraft()
{
    m_hasSpaceOverdraftIsSet = false;
}
int32_t CreateSubscriptionPlanVM::getGroupLimit() const
{
    return m_groupLimit;
}

void CreateSubscriptionPlanVM::setGroupLimit(int32_t value)
{
    m_groupLimit = value;
    m_groupLimitIsSet = true;
}

bool CreateSubscriptionPlanVM::groupLimitIsSet() const
{
    return m_groupLimitIsSet;
}

void CreateSubscriptionPlanVM::unsetgroupLimit()
{
    m_groupLimitIsSet = false;
}
bool CreateSubscriptionPlanVM::isOnlineDesigner() const
{
    return m_onlineDesigner;
}

void CreateSubscriptionPlanVM::setOnlineDesigner(bool value)
{
    m_onlineDesigner = value;
    m_onlineDesignerIsSet = true;
}

bool CreateSubscriptionPlanVM::onlineDesignerIsSet() const
{
    return m_onlineDesignerIsSet;
}

void CreateSubscriptionPlanVM::unsetonlineDesigner()
{
    m_onlineDesignerIsSet = false;
}
bool CreateSubscriptionPlanVM::isIsDemo() const
{
    return m_isDemo;
}

void CreateSubscriptionPlanVM::setIsDemo(bool value)
{
    m_isDemo = value;
    m_isDemoIsSet = true;
}

bool CreateSubscriptionPlanVM::isDemoIsSet() const
{
    return m_isDemoIsSet;
}

void CreateSubscriptionPlanVM::unsetisDemo()
{
    m_isDemoIsSet = false;
}
utility::string_t CreateSubscriptionPlanVM::getUrlToBuy() const
{
    return m_urlToBuy;
}

void CreateSubscriptionPlanVM::setUrlToBuy(const utility::string_t& value)
{
    m_urlToBuy = value;
    m_urlToBuyIsSet = true;
}

bool CreateSubscriptionPlanVM::urlToBuyIsSet() const
{
    return m_urlToBuyIsSet;
}

void CreateSubscriptionPlanVM::unseturlToBuy()
{
    m_urlToBuyIsSet = false;
}
bool CreateSubscriptionPlanVM::isUnlimitedPage() const
{
    return m_unlimitedPage;
}

void CreateSubscriptionPlanVM::setUnlimitedPage(bool value)
{
    m_unlimitedPage = value;
    m_unlimitedPageIsSet = true;
}

bool CreateSubscriptionPlanVM::unlimitedPageIsSet() const
{
    return m_unlimitedPageIsSet;
}

void CreateSubscriptionPlanVM::unsetunlimitedPage()
{
    m_unlimitedPageIsSet = false;
}
int32_t CreateSubscriptionPlanVM::getPageLimit() const
{
    return m_pageLimit;
}

void CreateSubscriptionPlanVM::setPageLimit(int32_t value)
{
    m_pageLimit = value;
    m_pageLimitIsSet = true;
}

bool CreateSubscriptionPlanVM::pageLimitIsSet() const
{
    return m_pageLimitIsSet;
}

void CreateSubscriptionPlanVM::unsetpageLimit()
{
    m_pageLimitIsSet = false;
}
}
}
}


