/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ServerConfigurationVM.h"

namespace fastreport {
namespace cloud {
namespace models {




ServerConfigurationVM::ServerConfigurationVM()
{
    m_title = utility::conversions::to_string_t("");
    m_titleIsSet = false;
    m_corporateServerMode = false;
    m_corporateServerModeIsSet = false;
    m_appMixinsIsSet = false;
}

ServerConfigurationVM::~ServerConfigurationVM()
{
}

void ServerConfigurationVM::validate()
{
    // TODO: implement validation
}

web::json::value ServerConfigurationVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_titleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_title);
    }
    if(m_corporateServerModeIsSet)
    {
        val[utility::conversions::to_string_t("corporateServerMode")] = ModelBase::toJson(m_corporateServerMode);
    }
    if(m_appMixinsIsSet)
    {
        val[utility::conversions::to_string_t("appMixins")] = ModelBase::toJson(m_appMixins);
    }

    return val;
}

bool ServerConfigurationVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("corporateServerMode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("corporateServerMode"));
        if(!fieldValue.is_null())
        {
            bool refVal_corporateServerMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_corporateServerMode);
            setCorporateServerMode(refVal_corporateServerMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("appMixins")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("appMixins"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AppMixins> refVal_appMixins;
            ok &= ModelBase::fromJson(fieldValue, refVal_appMixins);
            setAppMixins(refVal_appMixins);
        }
    }
    return ok;
}

void ServerConfigurationVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_titleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_title));
    }
    if(m_corporateServerModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("corporateServerMode"), m_corporateServerMode));
    }
    if(m_appMixinsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appMixins"), m_appMixins));
    }
}

bool ServerConfigurationVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("corporateServerMode")))
    {
        bool refVal_corporateServerMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("corporateServerMode")), refVal_corporateServerMode );
        setCorporateServerMode(refVal_corporateServerMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("appMixins")))
    {
        std::shared_ptr<AppMixins> refVal_appMixins;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("appMixins")), refVal_appMixins );
        setAppMixins(refVal_appMixins);
    }
    return ok;
}

utility::string_t ServerConfigurationVM::getTitle() const
{
    return m_title;
}

void ServerConfigurationVM::setTitle(const utility::string_t& value)
{
    m_title = value;
    m_titleIsSet = true;
}

bool ServerConfigurationVM::titleIsSet() const
{
    return m_titleIsSet;
}

void ServerConfigurationVM::unsettitle()
{
    m_titleIsSet = false;
}
bool ServerConfigurationVM::isCorporateServerMode() const
{
    return m_corporateServerMode;
}

void ServerConfigurationVM::setCorporateServerMode(bool value)
{
    m_corporateServerMode = value;
    m_corporateServerModeIsSet = true;
}

bool ServerConfigurationVM::corporateServerModeIsSet() const
{
    return m_corporateServerModeIsSet;
}

void ServerConfigurationVM::unsetcorporateServerMode()
{
    m_corporateServerModeIsSet = false;
}
std::shared_ptr<AppMixins> ServerConfigurationVM::getAppMixins() const
{
    return m_appMixins;
}

void ServerConfigurationVM::setAppMixins(const std::shared_ptr<AppMixins>& value)
{
    m_appMixins = value;
    m_appMixinsIsSet = true;
}

bool ServerConfigurationVM::appMixinsIsSet() const
{
    return m_appMixinsIsSet;
}

void ServerConfigurationVM::unsetappMixins()
{
    m_appMixinsIsSet = false;
}
}
}
}


