/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ServerConfigurationVM.h"

namespace fastreport {
namespace cloud {
namespace models {




ServerConfigurationVM::ServerConfigurationVM()
{
    m_title = utility::conversions::to_string_t("");
    m_titleIsSet = false;
    m_logoLink = utility::conversions::to_string_t("");
    m_logoLinkIsSet = false;
    m_copyright = utility::conversions::to_string_t("");
    m_copyrightIsSet = false;
    m_corporateServerMode = false;
    m_corporateServerModeIsSet = false;
    m_isDisabled = false;
    m_isDisabledIsSet = false;
    m_frontendIsSet = false;
    m_authIsSet = false;
    m_designerForAnons = false;
    m_designerForAnonsIsSet = false;
}

ServerConfigurationVM::~ServerConfigurationVM()
{
}

void ServerConfigurationVM::validate()
{
    // TODO: implement validation
}

web::json::value ServerConfigurationVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_titleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_title);
    }
    if(m_logoLinkIsSet)
    {
        val[utility::conversions::to_string_t("logoLink")] = ModelBase::toJson(m_logoLink);
    }
    if(m_copyrightIsSet)
    {
        val[utility::conversions::to_string_t("copyright")] = ModelBase::toJson(m_copyright);
    }
    if(m_corporateServerModeIsSet)
    {
        val[utility::conversions::to_string_t("corporateServerMode")] = ModelBase::toJson(m_corporateServerMode);
    }
    if(m_isDisabledIsSet)
    {
        val[utility::conversions::to_string_t("isDisabled")] = ModelBase::toJson(m_isDisabled);
    }
    if(m_frontendIsSet)
    {
        val[utility::conversions::to_string_t("frontend")] = ModelBase::toJson(m_frontend);
    }
    if(m_authIsSet)
    {
        val[utility::conversions::to_string_t("auth")] = ModelBase::toJson(m_auth);
    }
    if(m_designerForAnonsIsSet)
    {
        val[utility::conversions::to_string_t("designerForAnons")] = ModelBase::toJson(m_designerForAnons);
    }

    return val;
}

bool ServerConfigurationVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("logoLink")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("logoLink"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_logoLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_logoLink);
            setLogoLink(refVal_logoLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("copyright")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("copyright"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_copyright;
            ok &= ModelBase::fromJson(fieldValue, refVal_copyright);
            setCopyright(refVal_copyright);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("corporateServerMode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("corporateServerMode"));
        if(!fieldValue.is_null())
        {
            bool refVal_corporateServerMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_corporateServerMode);
            setCorporateServerMode(refVal_corporateServerMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isDisabled")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isDisabled"));
        if(!fieldValue.is_null())
        {
            bool refVal_isDisabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_isDisabled);
            setIsDisabled(refVal_isDisabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("frontend")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("frontend"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FrontendApp> refVal_frontend;
            ok &= ModelBase::fromJson(fieldValue, refVal_frontend);
            setFrontend(refVal_frontend);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("auth"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AuthConfigVM> refVal_auth;
            ok &= ModelBase::fromJson(fieldValue, refVal_auth);
            setAuth(refVal_auth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("designerForAnons")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("designerForAnons"));
        if(!fieldValue.is_null())
        {
            bool refVal_designerForAnons;
            ok &= ModelBase::fromJson(fieldValue, refVal_designerForAnons);
            setDesignerForAnons(refVal_designerForAnons);
        }
    }
    return ok;
}

void ServerConfigurationVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_titleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_title));
    }
    if(m_logoLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("logoLink"), m_logoLink));
    }
    if(m_copyrightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("copyright"), m_copyright));
    }
    if(m_corporateServerModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("corporateServerMode"), m_corporateServerMode));
    }
    if(m_isDisabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isDisabled"), m_isDisabled));
    }
    if(m_frontendIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("frontend"), m_frontend));
    }
    if(m_authIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("auth"), m_auth));
    }
    if(m_designerForAnonsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("designerForAnons"), m_designerForAnons));
    }
}

bool ServerConfigurationVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("logoLink")))
    {
        utility::string_t refVal_logoLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("logoLink")), refVal_logoLink );
        setLogoLink(refVal_logoLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("copyright")))
    {
        utility::string_t refVal_copyright;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("copyright")), refVal_copyright );
        setCopyright(refVal_copyright);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("corporateServerMode")))
    {
        bool refVal_corporateServerMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("corporateServerMode")), refVal_corporateServerMode );
        setCorporateServerMode(refVal_corporateServerMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isDisabled")))
    {
        bool refVal_isDisabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isDisabled")), refVal_isDisabled );
        setIsDisabled(refVal_isDisabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("frontend")))
    {
        std::shared_ptr<FrontendApp> refVal_frontend;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("frontend")), refVal_frontend );
        setFrontend(refVal_frontend);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth")))
    {
        std::shared_ptr<AuthConfigVM> refVal_auth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("auth")), refVal_auth );
        setAuth(refVal_auth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("designerForAnons")))
    {
        bool refVal_designerForAnons;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("designerForAnons")), refVal_designerForAnons );
        setDesignerForAnons(refVal_designerForAnons);
    }
    return ok;
}

utility::string_t ServerConfigurationVM::getTitle() const
{
    return m_title;
}

void ServerConfigurationVM::setTitle(const utility::string_t& value)
{
    m_title = value;
    m_titleIsSet = true;
}

bool ServerConfigurationVM::titleIsSet() const
{
    return m_titleIsSet;
}

void ServerConfigurationVM::unsettitle()
{
    m_titleIsSet = false;
}
utility::string_t ServerConfigurationVM::getLogoLink() const
{
    return m_logoLink;
}

void ServerConfigurationVM::setLogoLink(const utility::string_t& value)
{
    m_logoLink = value;
    m_logoLinkIsSet = true;
}

bool ServerConfigurationVM::logoLinkIsSet() const
{
    return m_logoLinkIsSet;
}

void ServerConfigurationVM::unsetlogoLink()
{
    m_logoLinkIsSet = false;
}
utility::string_t ServerConfigurationVM::getCopyright() const
{
    return m_copyright;
}

void ServerConfigurationVM::setCopyright(const utility::string_t& value)
{
    m_copyright = value;
    m_copyrightIsSet = true;
}

bool ServerConfigurationVM::copyrightIsSet() const
{
    return m_copyrightIsSet;
}

void ServerConfigurationVM::unsetcopyright()
{
    m_copyrightIsSet = false;
}
bool ServerConfigurationVM::isCorporateServerMode() const
{
    return m_corporateServerMode;
}

void ServerConfigurationVM::setCorporateServerMode(bool value)
{
    m_corporateServerMode = value;
    m_corporateServerModeIsSet = true;
}

bool ServerConfigurationVM::corporateServerModeIsSet() const
{
    return m_corporateServerModeIsSet;
}

void ServerConfigurationVM::unsetcorporateServerMode()
{
    m_corporateServerModeIsSet = false;
}
bool ServerConfigurationVM::isIsDisabled() const
{
    return m_isDisabled;
}

void ServerConfigurationVM::setIsDisabled(bool value)
{
    m_isDisabled = value;
    m_isDisabledIsSet = true;
}

bool ServerConfigurationVM::isDisabledIsSet() const
{
    return m_isDisabledIsSet;
}

void ServerConfigurationVM::unsetisDisabled()
{
    m_isDisabledIsSet = false;
}
std::shared_ptr<FrontendApp> ServerConfigurationVM::getFrontend() const
{
    return m_frontend;
}

void ServerConfigurationVM::setFrontend(const std::shared_ptr<FrontendApp>& value)
{
    m_frontend = value;
    m_frontendIsSet = true;
}

bool ServerConfigurationVM::frontendIsSet() const
{
    return m_frontendIsSet;
}

void ServerConfigurationVM::unsetfrontend()
{
    m_frontendIsSet = false;
}
std::shared_ptr<AuthConfigVM> ServerConfigurationVM::getAuth() const
{
    return m_auth;
}

void ServerConfigurationVM::setAuth(const std::shared_ptr<AuthConfigVM>& value)
{
    m_auth = value;
    m_authIsSet = true;
}

bool ServerConfigurationVM::authIsSet() const
{
    return m_authIsSet;
}

void ServerConfigurationVM::unsetauth()
{
    m_authIsSet = false;
}
bool ServerConfigurationVM::isDesignerForAnons() const
{
    return m_designerForAnons;
}

void ServerConfigurationVM::setDesignerForAnons(bool value)
{
    m_designerForAnons = value;
    m_designerForAnonsIsSet = true;
}

bool ServerConfigurationVM::designerForAnonsIsSet() const
{
    return m_designerForAnonsIsSet;
}

void ServerConfigurationVM::unsetdesignerForAnons()
{
    m_designerForAnonsIsSet = false;
}
}
}
}


