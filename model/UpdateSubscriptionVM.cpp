/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UpdateSubscriptionVM.h"

namespace fastreport {
namespace cloud {
namespace models {




UpdateSubscriptionVM::UpdateSubscriptionVM()
{
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_locale = utility::conversions::to_string_t("");
    m_localeIsSet = false;
    m_defaultPermissionsIsSet = false;
}

UpdateSubscriptionVM::~UpdateSubscriptionVM()
{
}

void UpdateSubscriptionVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdateSubscriptionVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_name);
    }
    if(m_localeIsSet)
    {
        val[utility::conversions::to_string_t("locale")] = ModelBase::toJson(m_locale);
    }
    if(m_defaultPermissionsIsSet)
    {
        val[utility::conversions::to_string_t("defaultPermissions")] = ModelBase::toJson(m_defaultPermissions);
    }

    return val;
}

bool UpdateSubscriptionVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locale")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locale"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_locale;
            ok &= ModelBase::fromJson(fieldValue, refVal_locale);
            setLocale(refVal_locale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultPermissions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultPermissions"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DefaultPermissions> refVal_defaultPermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultPermissions);
            setDefaultPermissions(refVal_defaultPermissions);
        }
    }
    return ok;
}

void UpdateSubscriptionVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_name));
    }
    if(m_localeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locale"), m_locale));
    }
    if(m_defaultPermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultPermissions"), m_defaultPermissions));
    }
}

bool UpdateSubscriptionVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locale")))
    {
        utility::string_t refVal_locale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locale")), refVal_locale );
        setLocale(refVal_locale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultPermissions")))
    {
        std::shared_ptr<DefaultPermissions> refVal_defaultPermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultPermissions")), refVal_defaultPermissions );
        setDefaultPermissions(refVal_defaultPermissions);
    }
    return ok;
}

utility::string_t UpdateSubscriptionVM::getName() const
{
    return m_name;
}

void UpdateSubscriptionVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool UpdateSubscriptionVM::nameIsSet() const
{
    return m_nameIsSet;
}

void UpdateSubscriptionVM::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t UpdateSubscriptionVM::getLocale() const
{
    return m_locale;
}

void UpdateSubscriptionVM::setLocale(const utility::string_t& value)
{
    m_locale = value;
    m_localeIsSet = true;
}

bool UpdateSubscriptionVM::localeIsSet() const
{
    return m_localeIsSet;
}

void UpdateSubscriptionVM::unsetlocale()
{
    m_localeIsSet = false;
}
std::shared_ptr<DefaultPermissions> UpdateSubscriptionVM::getDefaultPermissions() const
{
    return m_defaultPermissions;
}

void UpdateSubscriptionVM::setDefaultPermissions(const std::shared_ptr<DefaultPermissions>& value)
{
    m_defaultPermissions = value;
    m_defaultPermissionsIsSet = true;
}

bool UpdateSubscriptionVM::defaultPermissionsIsSet() const
{
    return m_defaultPermissionsIsSet;
}

void UpdateSubscriptionVM::unsetdefaultPermissions()
{
    m_defaultPermissionsIsSet = false;
}
}
}
}


