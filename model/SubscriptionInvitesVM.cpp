/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SubscriptionInvitesVM.h"

namespace fastreport {
namespace cloud {
namespace models {




SubscriptionInvitesVM::SubscriptionInvitesVM()
{
    m_invitesIsSet = false;
    m_count = 0L;
    m_countIsSet = false;
}

SubscriptionInvitesVM::~SubscriptionInvitesVM()
{
}

void SubscriptionInvitesVM::validate()
{
    // TODO: implement validation
}

web::json::value SubscriptionInvitesVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_invitesIsSet)
    {
        val[utility::conversions::to_string_t("invites")] = ModelBase::toJson(m_invites);
    }
    if(m_countIsSet)
    {
        val[utility::conversions::to_string_t("count")] = ModelBase::toJson(m_count);
    }

    return val;
}

bool SubscriptionInvitesVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("invites")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("invites"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SubscriptionInviteVM>> refVal_invites;
            ok &= ModelBase::fromJson(fieldValue, refVal_invites);
            setInvites(refVal_invites);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("count"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_count);
            setCount(refVal_count);
        }
    }
    return ok;
}

void SubscriptionInvitesVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_invitesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("invites"), m_invites));
    }
    if(m_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("count"), m_count));
    }
}

bool SubscriptionInvitesVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("invites")))
    {
        std::vector<std::shared_ptr<SubscriptionInviteVM>> refVal_invites;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("invites")), refVal_invites );
        setInvites(refVal_invites);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("count")))
    {
        int64_t refVal_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("count")), refVal_count );
        setCount(refVal_count);
    }
    return ok;
}

std::vector<std::shared_ptr<SubscriptionInviteVM>>& SubscriptionInvitesVM::getInvites()
{
    return m_invites;
}

void SubscriptionInvitesVM::setInvites(const std::vector<std::shared_ptr<SubscriptionInviteVM>>& value)
{
    m_invites = value;
    m_invitesIsSet = true;
}

bool SubscriptionInvitesVM::invitesIsSet() const
{
    return m_invitesIsSet;
}

void SubscriptionInvitesVM::unsetinvites()
{
    m_invitesIsSet = false;
}
int64_t SubscriptionInvitesVM::getCount() const
{
    return m_count;
}

void SubscriptionInvitesVM::setCount(int64_t value)
{
    m_count = value;
    m_countIsSet = true;
}

bool SubscriptionInvitesVM::countIsSet() const
{
    return m_countIsSet;
}

void SubscriptionInvitesVM::unsetcount()
{
    m_countIsSet = false;
}
}
}
}


