/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ReportInfo.h"

namespace fastreport {
namespace cloud {
namespace models {




ReportInfo::ReportInfo()
{
    m_author = utility::conversions::to_string_t("");
    m_authorIsSet = false;
    m_created = utility::datetime();
    m_createdIsSet = false;
    m_creatorVersion = utility::conversions::to_string_t("");
    m_creatorVersionIsSet = false;
    m_description = utility::conversions::to_string_t("");
    m_descriptionIsSet = false;
    m_modified = utility::datetime();
    m_modifiedIsSet = false;
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_pictureIsSet = false;
    m_previewPictureRatio = 0.0f;
    m_previewPictureRatioIsSet = false;
    m_saveModeIsSet = false;
    m_savePreviewPicture = false;
    m_savePreviewPictureIsSet = false;
    m_tag = utility::conversions::to_string_t("");
    m_tagIsSet = false;
    m_version = utility::conversions::to_string_t("");
    m_versionIsSet = false;
}

ReportInfo::~ReportInfo()
{
}

void ReportInfo::validate()
{
    // TODO: implement validation
}

web::json::value ReportInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_authorIsSet)
    {
        val[utility::conversions::to_string_t("author")] = ModelBase::toJson(m_author);
    }
    if(m_createdIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_created);
    }
    if(m_creatorVersionIsSet)
    {
        val[utility::conversions::to_string_t("creatorVersion")] = ModelBase::toJson(m_creatorVersion);
    }
    if(m_descriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_description);
    }
    if(m_modifiedIsSet)
    {
        val[utility::conversions::to_string_t("modified")] = ModelBase::toJson(m_modified);
    }
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_name);
    }
    if(m_pictureIsSet)
    {
        val[utility::conversions::to_string_t("picture")] = ModelBase::toJson(m_picture);
    }
    if(m_previewPictureRatioIsSet)
    {
        val[utility::conversions::to_string_t("previewPictureRatio")] = ModelBase::toJson(m_previewPictureRatio);
    }
    if(m_saveModeIsSet)
    {
        val[utility::conversions::to_string_t("saveMode")] = ModelBase::toJson(m_saveMode);
    }
    if(m_savePreviewPictureIsSet)
    {
        val[utility::conversions::to_string_t("savePreviewPicture")] = ModelBase::toJson(m_savePreviewPicture);
    }
    if(m_tagIsSet)
    {
        val[utility::conversions::to_string_t("tag")] = ModelBase::toJson(m_tag);
    }
    if(m_versionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_version);
    }

    return val;
}

bool ReportInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("author")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("author"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_author;
            ok &= ModelBase::fromJson(fieldValue, refVal_author);
            setAuthor(refVal_author);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("created"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_created;
            ok &= ModelBase::fromJson(fieldValue, refVal_created);
            setCreated(refVal_created);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("creatorVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("creatorVersion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_creatorVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_creatorVersion);
            setCreatorVersion(refVal_creatorVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modified")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modified"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_modified;
            ok &= ModelBase::fromJson(fieldValue, refVal_modified);
            setModified(refVal_modified);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("picture")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("picture"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_picture;
            ok &= ModelBase::fromJson(fieldValue, refVal_picture);
            setPicture(refVal_picture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("previewPictureRatio")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("previewPictureRatio"));
        if(!fieldValue.is_null())
        {
            float refVal_previewPictureRatio;
            ok &= ModelBase::fromJson(fieldValue, refVal_previewPictureRatio);
            setPreviewPictureRatio(refVal_previewPictureRatio);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("saveMode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("saveMode"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SaveMode> refVal_saveMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_saveMode);
            setSaveMode(refVal_saveMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("savePreviewPicture")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("savePreviewPicture"));
        if(!fieldValue.is_null())
        {
            bool refVal_savePreviewPicture;
            ok &= ModelBase::fromJson(fieldValue, refVal_savePreviewPicture);
            setSavePreviewPicture(refVal_savePreviewPicture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tag")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tag"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_tag;
            ok &= ModelBase::fromJson(fieldValue, refVal_tag);
            setTag(refVal_tag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    return ok;
}

void ReportInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_authorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("author"), m_author));
    }
    if(m_createdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_created));
    }
    if(m_creatorVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("creatorVersion"), m_creatorVersion));
    }
    if(m_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_description));
    }
    if(m_modifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modified"), m_modified));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_name));
    }
    if(m_pictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("picture"), m_picture));
    }
    if(m_previewPictureRatioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("previewPictureRatio"), m_previewPictureRatio));
    }
    if(m_saveModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("saveMode"), m_saveMode));
    }
    if(m_savePreviewPictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("savePreviewPicture"), m_savePreviewPicture));
    }
    if(m_tagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tag"), m_tag));
    }
    if(m_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_version));
    }
}

bool ReportInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("author")))
    {
        utility::string_t refVal_author;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("author")), refVal_author );
        setAuthor(refVal_author);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        utility::datetime refVal_created;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("created")), refVal_created );
        setCreated(refVal_created);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("creatorVersion")))
    {
        utility::string_t refVal_creatorVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("creatorVersion")), refVal_creatorVersion );
        setCreatorVersion(refVal_creatorVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modified")))
    {
        utility::datetime refVal_modified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modified")), refVal_modified );
        setModified(refVal_modified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("picture")))
    {
        utility::string_t refVal_picture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("picture")), refVal_picture );
        setPicture(refVal_picture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("previewPictureRatio")))
    {
        float refVal_previewPictureRatio;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("previewPictureRatio")), refVal_previewPictureRatio );
        setPreviewPictureRatio(refVal_previewPictureRatio);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("saveMode")))
    {
        std::shared_ptr<SaveMode> refVal_saveMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("saveMode")), refVal_saveMode );
        setSaveMode(refVal_saveMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("savePreviewPicture")))
    {
        bool refVal_savePreviewPicture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("savePreviewPicture")), refVal_savePreviewPicture );
        setSavePreviewPicture(refVal_savePreviewPicture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tag")))
    {
        utility::string_t refVal_tag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tag")), refVal_tag );
        setTag(refVal_tag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        utility::string_t refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    return ok;
}

utility::string_t ReportInfo::getAuthor() const
{
    return m_author;
}

void ReportInfo::setAuthor(const utility::string_t& value)
{
    m_author = value;
    m_authorIsSet = true;
}

bool ReportInfo::authorIsSet() const
{
    return m_authorIsSet;
}

void ReportInfo::unsetauthor()
{
    m_authorIsSet = false;
}
utility::datetime ReportInfo::getCreated() const
{
    return m_created;
}

void ReportInfo::setCreated(const utility::datetime& value)
{
    m_created = value;
    m_createdIsSet = true;
}

bool ReportInfo::createdIsSet() const
{
    return m_createdIsSet;
}

void ReportInfo::unsetcreated()
{
    m_createdIsSet = false;
}
utility::string_t ReportInfo::getCreatorVersion() const
{
    return m_creatorVersion;
}

void ReportInfo::setCreatorVersion(const utility::string_t& value)
{
    m_creatorVersion = value;
    m_creatorVersionIsSet = true;
}

bool ReportInfo::creatorVersionIsSet() const
{
    return m_creatorVersionIsSet;
}

void ReportInfo::unsetcreatorVersion()
{
    m_creatorVersionIsSet = false;
}
utility::string_t ReportInfo::getDescription() const
{
    return m_description;
}

void ReportInfo::setDescription(const utility::string_t& value)
{
    m_description = value;
    m_descriptionIsSet = true;
}

bool ReportInfo::descriptionIsSet() const
{
    return m_descriptionIsSet;
}

void ReportInfo::unsetdescription()
{
    m_descriptionIsSet = false;
}
utility::datetime ReportInfo::getModified() const
{
    return m_modified;
}

void ReportInfo::setModified(const utility::datetime& value)
{
    m_modified = value;
    m_modifiedIsSet = true;
}

bool ReportInfo::modifiedIsSet() const
{
    return m_modifiedIsSet;
}

void ReportInfo::unsetmodified()
{
    m_modifiedIsSet = false;
}
utility::string_t ReportInfo::getName() const
{
    return m_name;
}

void ReportInfo::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool ReportInfo::nameIsSet() const
{
    return m_nameIsSet;
}

void ReportInfo::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t ReportInfo::getPicture() const
{
    return m_picture;
}

void ReportInfo::setPicture(const utility::string_t& value)
{
    m_picture = value;
    m_pictureIsSet = true;
}

bool ReportInfo::pictureIsSet() const
{
    return m_pictureIsSet;
}

void ReportInfo::unsetpicture()
{
    m_pictureIsSet = false;
}
float ReportInfo::getPreviewPictureRatio() const
{
    return m_previewPictureRatio;
}

void ReportInfo::setPreviewPictureRatio(float value)
{
    m_previewPictureRatio = value;
    m_previewPictureRatioIsSet = true;
}

bool ReportInfo::previewPictureRatioIsSet() const
{
    return m_previewPictureRatioIsSet;
}

void ReportInfo::unsetpreviewPictureRatio()
{
    m_previewPictureRatioIsSet = false;
}
std::shared_ptr<SaveMode> ReportInfo::getSaveMode() const
{
    return m_saveMode;
}

void ReportInfo::setSaveMode(const std::shared_ptr<SaveMode>& value)
{
    m_saveMode = value;
    m_saveModeIsSet = true;
}

bool ReportInfo::saveModeIsSet() const
{
    return m_saveModeIsSet;
}

void ReportInfo::unsetsaveMode()
{
    m_saveModeIsSet = false;
}
bool ReportInfo::isSavePreviewPicture() const
{
    return m_savePreviewPicture;
}

void ReportInfo::setSavePreviewPicture(bool value)
{
    m_savePreviewPicture = value;
    m_savePreviewPictureIsSet = true;
}

bool ReportInfo::savePreviewPictureIsSet() const
{
    return m_savePreviewPictureIsSet;
}

void ReportInfo::unsetsavePreviewPicture()
{
    m_savePreviewPictureIsSet = false;
}
utility::string_t ReportInfo::getTag() const
{
    return m_tag;
}

void ReportInfo::setTag(const utility::string_t& value)
{
    m_tag = value;
    m_tagIsSet = true;
}

bool ReportInfo::tagIsSet() const
{
    return m_tagIsSet;
}

void ReportInfo::unsettag()
{
    m_tagIsSet = false;
}
utility::string_t ReportInfo::getVersion() const
{
    return m_version;
}

void ReportInfo::setVersion(const utility::string_t& value)
{
    m_version = value;
    m_versionIsSet = true;
}

bool ReportInfo::versionIsSet() const
{
    return m_versionIsSet;
}

void ReportInfo::unsetversion()
{
    m_versionIsSet = false;
}
}
}
}


