/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TaskSettingsVM.h"

namespace fastreport {
namespace cloud {
namespace models {




TaskSettingsVM::TaskSettingsVM()
{
    m_prepare = false;
    m_prepareIsSet = false;
    m_exportTemplate = false;
    m_exportTemplateIsSet = false;
    m_exportReport = false;
    m_exportReportIsSet = false;
    m_sendViaEmail = false;
    m_sendViaEmailIsSet = false;
    m_sendViaWebhook = false;
    m_sendViaWebhookIsSet = false;
    m_fetchData = false;
    m_fetchDataIsSet = false;
}

TaskSettingsVM::~TaskSettingsVM()
{
}

void TaskSettingsVM::validate()
{
    // TODO: implement validation
}

web::json::value TaskSettingsVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_prepareIsSet)
    {
        val[utility::conversions::to_string_t("prepare")] = ModelBase::toJson(m_prepare);
    }
    if(m_exportTemplateIsSet)
    {
        val[utility::conversions::to_string_t("exportTemplate")] = ModelBase::toJson(m_exportTemplate);
    }
    if(m_exportReportIsSet)
    {
        val[utility::conversions::to_string_t("exportReport")] = ModelBase::toJson(m_exportReport);
    }
    if(m_sendViaEmailIsSet)
    {
        val[utility::conversions::to_string_t("sendViaEmail")] = ModelBase::toJson(m_sendViaEmail);
    }
    if(m_sendViaWebhookIsSet)
    {
        val[utility::conversions::to_string_t("sendViaWebhook")] = ModelBase::toJson(m_sendViaWebhook);
    }
    if(m_fetchDataIsSet)
    {
        val[utility::conversions::to_string_t("fetchData")] = ModelBase::toJson(m_fetchData);
    }

    return val;
}

bool TaskSettingsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("prepare")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("prepare"));
        if(!fieldValue.is_null())
        {
            bool refVal_prepare;
            ok &= ModelBase::fromJson(fieldValue, refVal_prepare);
            setPrepare(refVal_prepare);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exportTemplate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exportTemplate"));
        if(!fieldValue.is_null())
        {
            bool refVal_exportTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_exportTemplate);
            setExportTemplate(refVal_exportTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exportReport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exportReport"));
        if(!fieldValue.is_null())
        {
            bool refVal_exportReport;
            ok &= ModelBase::fromJson(fieldValue, refVal_exportReport);
            setExportReport(refVal_exportReport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sendViaEmail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sendViaEmail"));
        if(!fieldValue.is_null())
        {
            bool refVal_sendViaEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_sendViaEmail);
            setSendViaEmail(refVal_sendViaEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sendViaWebhook")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sendViaWebhook"));
        if(!fieldValue.is_null())
        {
            bool refVal_sendViaWebhook;
            ok &= ModelBase::fromJson(fieldValue, refVal_sendViaWebhook);
            setSendViaWebhook(refVal_sendViaWebhook);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fetchData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fetchData"));
        if(!fieldValue.is_null())
        {
            bool refVal_fetchData;
            ok &= ModelBase::fromJson(fieldValue, refVal_fetchData);
            setFetchData(refVal_fetchData);
        }
    }
    return ok;
}

void TaskSettingsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_prepareIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prepare"), m_prepare));
    }
    if(m_exportTemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exportTemplate"), m_exportTemplate));
    }
    if(m_exportReportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exportReport"), m_exportReport));
    }
    if(m_sendViaEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sendViaEmail"), m_sendViaEmail));
    }
    if(m_sendViaWebhookIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sendViaWebhook"), m_sendViaWebhook));
    }
    if(m_fetchDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fetchData"), m_fetchData));
    }
}

bool TaskSettingsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("prepare")))
    {
        bool refVal_prepare;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("prepare")), refVal_prepare );
        setPrepare(refVal_prepare);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exportTemplate")))
    {
        bool refVal_exportTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exportTemplate")), refVal_exportTemplate );
        setExportTemplate(refVal_exportTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exportReport")))
    {
        bool refVal_exportReport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exportReport")), refVal_exportReport );
        setExportReport(refVal_exportReport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sendViaEmail")))
    {
        bool refVal_sendViaEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sendViaEmail")), refVal_sendViaEmail );
        setSendViaEmail(refVal_sendViaEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sendViaWebhook")))
    {
        bool refVal_sendViaWebhook;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sendViaWebhook")), refVal_sendViaWebhook );
        setSendViaWebhook(refVal_sendViaWebhook);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fetchData")))
    {
        bool refVal_fetchData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fetchData")), refVal_fetchData );
        setFetchData(refVal_fetchData);
    }
    return ok;
}

bool TaskSettingsVM::isPrepare() const
{
    return m_prepare;
}

void TaskSettingsVM::setPrepare(bool value)
{
    m_prepare = value;
    m_prepareIsSet = true;
}

bool TaskSettingsVM::prepareIsSet() const
{
    return m_prepareIsSet;
}

void TaskSettingsVM::unsetprepare()
{
    m_prepareIsSet = false;
}
bool TaskSettingsVM::isExportTemplate() const
{
    return m_exportTemplate;
}

void TaskSettingsVM::setExportTemplate(bool value)
{
    m_exportTemplate = value;
    m_exportTemplateIsSet = true;
}

bool TaskSettingsVM::exportTemplateIsSet() const
{
    return m_exportTemplateIsSet;
}

void TaskSettingsVM::unsetexportTemplate()
{
    m_exportTemplateIsSet = false;
}
bool TaskSettingsVM::isExportReport() const
{
    return m_exportReport;
}

void TaskSettingsVM::setExportReport(bool value)
{
    m_exportReport = value;
    m_exportReportIsSet = true;
}

bool TaskSettingsVM::exportReportIsSet() const
{
    return m_exportReportIsSet;
}

void TaskSettingsVM::unsetexportReport()
{
    m_exportReportIsSet = false;
}
bool TaskSettingsVM::isSendViaEmail() const
{
    return m_sendViaEmail;
}

void TaskSettingsVM::setSendViaEmail(bool value)
{
    m_sendViaEmail = value;
    m_sendViaEmailIsSet = true;
}

bool TaskSettingsVM::sendViaEmailIsSet() const
{
    return m_sendViaEmailIsSet;
}

void TaskSettingsVM::unsetsendViaEmail()
{
    m_sendViaEmailIsSet = false;
}
bool TaskSettingsVM::isSendViaWebhook() const
{
    return m_sendViaWebhook;
}

void TaskSettingsVM::setSendViaWebhook(bool value)
{
    m_sendViaWebhook = value;
    m_sendViaWebhookIsSet = true;
}

bool TaskSettingsVM::sendViaWebhookIsSet() const
{
    return m_sendViaWebhookIsSet;
}

void TaskSettingsVM::unsetsendViaWebhook()
{
    m_sendViaWebhookIsSet = false;
}
bool TaskSettingsVM::isFetchData() const
{
    return m_fetchData;
}

void TaskSettingsVM::setFetchData(bool value)
{
    m_fetchData = value;
    m_fetchDataIsSet = true;
}

bool TaskSettingsVM::fetchDataIsSet() const
{
    return m_fetchDataIsSet;
}

void TaskSettingsVM::unsetfetchData()
{
    m_fetchDataIsSet = false;
}
}
}
}


