/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ValidationProblemDetails.h"

namespace fastreport {
namespace cloud {
namespace models {




ValidationProblemDetails::ValidationProblemDetails()
{
    m_errorsIsSet = false;
    m_type = utility::conversions::to_string_t("");
    m_typeIsSet = false;
    m_title = utility::conversions::to_string_t("");
    m_titleIsSet = false;
    m_status = 0;
    m_statusIsSet = false;
    m_detail = utility::conversions::to_string_t("");
    m_detailIsSet = false;
    m_instance = utility::conversions::to_string_t("");
    m_instanceIsSet = false;
}

ValidationProblemDetails::~ValidationProblemDetails()
{
}

void ValidationProblemDetails::validate()
{
    // TODO: implement validation
}

web::json::value ValidationProblemDetails::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_errorsIsSet)
    {
        val[utility::conversions::to_string_t("errors")] = ModelBase::toJson(m_errors);
    }
    if(m_typeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_type);
    }
    if(m_titleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_title);
    }
    if(m_statusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_status);
    }
    if(m_detailIsSet)
    {
        val[utility::conversions::to_string_t("detail")] = ModelBase::toJson(m_detail);
    }
    if(m_instanceIsSet)
    {
        val[utility::conversions::to_string_t("instance")] = ModelBase::toJson(m_instance);
    }

    return val;
}

bool ValidationProblemDetails::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("errors")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errors"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::vector<utility::string_t>> refVal_errors;
            ok &= ModelBase::fromJson(fieldValue, refVal_errors);
            setErrors(refVal_errors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("detail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("detail"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_detail;
            ok &= ModelBase::fromJson(fieldValue, refVal_detail);
            setDetail(refVal_detail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("instance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("instance"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_instance;
            ok &= ModelBase::fromJson(fieldValue, refVal_instance);
            setInstance(refVal_instance);
        }
    }
    return ok;
}

void ValidationProblemDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_errorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errors"), m_errors));
    }
    if(m_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_type));
    }
    if(m_titleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_title));
    }
    if(m_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_status));
    }
    if(m_detailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("detail"), m_detail));
    }
    if(m_instanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instance"), m_instance));
    }
}

bool ValidationProblemDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("errors")))
    {
        std::map<utility::string_t, std::vector<utility::string_t>> refVal_errors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errors")), refVal_errors );
        setErrors(refVal_errors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        int32_t refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("detail")))
    {
        utility::string_t refVal_detail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("detail")), refVal_detail );
        setDetail(refVal_detail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("instance")))
    {
        utility::string_t refVal_instance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("instance")), refVal_instance );
        setInstance(refVal_instance);
    }
    return ok;
}

std::map<utility::string_t, std::vector<utility::string_t>>& ValidationProblemDetails::getErrors()
{
    return m_errors;
}

void ValidationProblemDetails::setErrors(const std::map<utility::string_t, std::vector<utility::string_t>>& value)
{
    m_errors = value;
    m_errorsIsSet = true;
}

bool ValidationProblemDetails::errorsIsSet() const
{
    return m_errorsIsSet;
}

void ValidationProblemDetails::unseterrors()
{
    m_errorsIsSet = false;
}
utility::string_t ValidationProblemDetails::getType() const
{
    return m_type;
}

void ValidationProblemDetails::setType(const utility::string_t& value)
{
    m_type = value;
    m_typeIsSet = true;
}

bool ValidationProblemDetails::typeIsSet() const
{
    return m_typeIsSet;
}

void ValidationProblemDetails::unsettype()
{
    m_typeIsSet = false;
}
utility::string_t ValidationProblemDetails::getTitle() const
{
    return m_title;
}

void ValidationProblemDetails::setTitle(const utility::string_t& value)
{
    m_title = value;
    m_titleIsSet = true;
}

bool ValidationProblemDetails::titleIsSet() const
{
    return m_titleIsSet;
}

void ValidationProblemDetails::unsettitle()
{
    m_titleIsSet = false;
}
int32_t ValidationProblemDetails::getStatus() const
{
    return m_status;
}

void ValidationProblemDetails::setStatus(int32_t value)
{
    m_status = value;
    m_statusIsSet = true;
}

bool ValidationProblemDetails::statusIsSet() const
{
    return m_statusIsSet;
}

void ValidationProblemDetails::unsetstatus()
{
    m_statusIsSet = false;
}
utility::string_t ValidationProblemDetails::getDetail() const
{
    return m_detail;
}

void ValidationProblemDetails::setDetail(const utility::string_t& value)
{
    m_detail = value;
    m_detailIsSet = true;
}

bool ValidationProblemDetails::detailIsSet() const
{
    return m_detailIsSet;
}

void ValidationProblemDetails::unsetdetail()
{
    m_detailIsSet = false;
}
utility::string_t ValidationProblemDetails::getInstance() const
{
    return m_instance;
}

void ValidationProblemDetails::setInstance(const utility::string_t& value)
{
    m_instance = value;
    m_instanceIsSet = true;
}

bool ValidationProblemDetails::instanceIsSet() const
{
    return m_instanceIsSet;
}

void ValidationProblemDetails::unsetinstance()
{
    m_instanceIsSet = false;
}
}
}
}


