/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GroupsVM.h"

namespace fastreport {
namespace cloud {
namespace models {




GroupsVM::GroupsVM()
{
    m_groupsIsSet = false;
    m_count = 0L;
    m_countIsSet = false;
    m_skip = 0;
    m_skipIsSet = false;
    m_take = 0;
    m_takeIsSet = false;
}

GroupsVM::~GroupsVM()
{
}

void GroupsVM::validate()
{
    // TODO: implement validation
}

web::json::value GroupsVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_groupsIsSet)
    {
        val[utility::conversions::to_string_t("groups")] = ModelBase::toJson(m_groups);
    }
    if(m_countIsSet)
    {
        val[utility::conversions::to_string_t("count")] = ModelBase::toJson(m_count);
    }
    if(m_skipIsSet)
    {
        val[utility::conversions::to_string_t("skip")] = ModelBase::toJson(m_skip);
    }
    if(m_takeIsSet)
    {
        val[utility::conversions::to_string_t("take")] = ModelBase::toJson(m_take);
    }

    return val;
}

bool GroupsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("groups")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groups"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<GroupVM>> refVal_groups;
            ok &= ModelBase::fromJson(fieldValue, refVal_groups);
            setGroups(refVal_groups);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("count"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_count);
            setCount(refVal_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("skip")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("skip"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_skip;
            ok &= ModelBase::fromJson(fieldValue, refVal_skip);
            setSkip(refVal_skip);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("take")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("take"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_take;
            ok &= ModelBase::fromJson(fieldValue, refVal_take);
            setTake(refVal_take);
        }
    }
    return ok;
}

void GroupsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_groupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groups"), m_groups));
    }
    if(m_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("count"), m_count));
    }
    if(m_skipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("skip"), m_skip));
    }
    if(m_takeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("take"), m_take));
    }
}

bool GroupsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("groups")))
    {
        std::vector<std::shared_ptr<GroupVM>> refVal_groups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groups")), refVal_groups );
        setGroups(refVal_groups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("count")))
    {
        int64_t refVal_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("count")), refVal_count );
        setCount(refVal_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("skip")))
    {
        int32_t refVal_skip;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("skip")), refVal_skip );
        setSkip(refVal_skip);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("take")))
    {
        int32_t refVal_take;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("take")), refVal_take );
        setTake(refVal_take);
    }
    return ok;
}

std::vector<std::shared_ptr<GroupVM>>& GroupsVM::getGroups()
{
    return m_groups;
}

void GroupsVM::setGroups(const std::vector<std::shared_ptr<GroupVM>>& value)
{
    m_groups = value;
    m_groupsIsSet = true;
}

bool GroupsVM::groupsIsSet() const
{
    return m_groupsIsSet;
}

void GroupsVM::unsetgroups()
{
    m_groupsIsSet = false;
}
int64_t GroupsVM::getCount() const
{
    return m_count;
}

void GroupsVM::setCount(int64_t value)
{
    m_count = value;
    m_countIsSet = true;
}

bool GroupsVM::countIsSet() const
{
    return m_countIsSet;
}

void GroupsVM::unsetcount()
{
    m_countIsSet = false;
}
int32_t GroupsVM::getSkip() const
{
    return m_skip;
}

void GroupsVM::setSkip(int32_t value)
{
    m_skip = value;
    m_skipIsSet = true;
}

bool GroupsVM::skipIsSet() const
{
    return m_skipIsSet;
}

void GroupsVM::unsetskip()
{
    m_skipIsSet = false;
}
int32_t GroupsVM::getTake() const
{
    return m_take;
}

void GroupsVM::setTake(int32_t value)
{
    m_take = value;
    m_takeIsSet = true;
}

bool GroupsVM::takeIsSet() const
{
    return m_takeIsSet;
}

void GroupsVM::unsettake()
{
    m_takeIsSet = false;
}
}
}
}


