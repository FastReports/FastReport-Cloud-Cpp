/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TaskType.h"

namespace fastreport {
namespace cloud {
namespace models {



TaskType::TaskType()
{
}

TaskType::~TaskType()
{
}

void TaskType::validate()
{
    // TODO: implement validation
}

web::json::value TaskType::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eTaskType::TaskType_EXPORTTEMPLATE) val = web::json::value::string(U(ExportTemplate));
    if (m_value == eTaskType::TaskType_EXPORTREPORT) val = web::json::value::string(U(ExportReport));
    if (m_value == eTaskType::TaskType_PREPARE) val = web::json::value::string(U(Prepare));
    if (m_value == eTaskType::TaskType_FETCH) val = web::json::value::string(U(Fetch));
    if (m_value == eTaskType::TaskType_EMAIL) val = web::json::value::string(U(Email));
    if (m_value == eTaskType::TaskType_WEBHOOK) val = web::json::value::string(U(Webhook));
    if (m_value == eTaskType::TaskType_THUMBNAILTEMPLATE) val = web::json::value::string(U(ThumbnailTemplate));
    if (m_value == eTaskType::TaskType_THUMBNAILREPORT) val = web::json::value::string(U(ThumbnailReport));

    return val;
}

bool TaskType::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(ExportTemplate)) m_value = eTaskType::TaskType_EXPORTTEMPLATE;
    if (s == utility::conversions::to_string_t(ExportReport)) m_value = eTaskType::TaskType_EXPORTREPORT;
    if (s == utility::conversions::to_string_t(Prepare)) m_value = eTaskType::TaskType_PREPARE;
    if (s == utility::conversions::to_string_t(Fetch)) m_value = eTaskType::TaskType_FETCH;
    if (s == utility::conversions::to_string_t(Email)) m_value = eTaskType::TaskType_EMAIL;
    if (s == utility::conversions::to_string_t(Webhook)) m_value = eTaskType::TaskType_WEBHOOK;
    if (s == utility::conversions::to_string_t(ThumbnailTemplate)) m_value = eTaskType::TaskType_THUMBNAILTEMPLATE;
    if (s == utility::conversions::to_string_t(ThumbnailReport)) m_value = eTaskType::TaskType_THUMBNAILREPORT;
    return true;
}

void TaskType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eTaskType::TaskType_EXPORTTEMPLATE) s = utility::conversions::to_string_t(ExportTemplate);
    if (m_value == eTaskType::TaskType_EXPORTREPORT) s = utility::conversions::to_string_t(ExportReport);
    if (m_value == eTaskType::TaskType_PREPARE) s = utility::conversions::to_string_t(Prepare);
    if (m_value == eTaskType::TaskType_FETCH) s = utility::conversions::to_string_t(Fetch);
    if (m_value == eTaskType::TaskType_EMAIL) s = utility::conversions::to_string_t(Email);
    if (m_value == eTaskType::TaskType_WEBHOOK) s = utility::conversions::to_string_t(Webhook);
    if (m_value == eTaskType::TaskType_THUMBNAILTEMPLATE) s = utility::conversions::to_string_t(ThumbnailTemplate);
    if (m_value == eTaskType::TaskType_THUMBNAILREPORT) s = utility::conversions::to_string_t(ThumbnailReport);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool TaskType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eTaskType v;

        
        if (s == utility::conversions::to_string_t(ExportTemplate)) v = eTaskType::TaskType_EXPORTTEMPLATE;
        if (s == utility::conversions::to_string_t(ExportReport)) v = eTaskType::TaskType_EXPORTREPORT;
        if (s == utility::conversions::to_string_t(Prepare)) v = eTaskType::TaskType_PREPARE;
        if (s == utility::conversions::to_string_t(Fetch)) v = eTaskType::TaskType_FETCH;
        if (s == utility::conversions::to_string_t(Email)) v = eTaskType::TaskType_EMAIL;
        if (s == utility::conversions::to_string_t(Webhook)) v = eTaskType::TaskType_WEBHOOK;
        if (s == utility::conversions::to_string_t(ThumbnailTemplate)) v = eTaskType::TaskType_THUMBNAILTEMPLATE;
        if (s == utility::conversions::to_string_t(ThumbnailReport)) v = eTaskType::TaskType_THUMBNAILREPORT;

        setValue(v);
    }
    return ok;
}

TaskType::eTaskType TaskType::getValue() const
{
   return m_value;
}

void TaskType::setValue(TaskType::eTaskType const value)
{
   m_value = value;
}


}
}
}


