/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TemplateVM.h
 *
 * 
 */

#ifndef FASTREPORT_CLOUD_MODELS_TemplateVM_H_
#define FASTREPORT_CLOUD_MODELS_TemplateVM_H_

#include "CloudKludge.h"
#include "../ModelBase.h"

#include "ReportInfo.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace fastreport {
namespace cloud {
namespace models {


/// <summary>
/// 
/// </summary>
class  TemplateVM
    : public ModelBase
{
public:
    TemplateVM();
    virtual ~TemplateVM();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TemplateVM members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReportInfo> getReportInfo() const;
    bool reportInfoIsSet() const;
    void unsetreportInfo();

    void setReportInfo(const std::shared_ptr<ReportInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetname();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetparentId();

    void setParentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsettags();

    void setTags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIcon() const;
    bool iconIsSet() const;
    void unseticon();

    void setIcon(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsettype();

    void setType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getSize() const;
    bool sizeIsSet() const;
    void unsetsize();

    void setSize(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSubscriptionId() const;
    bool subscriptionIdIsSet() const;
    void unsetsubscriptionId();

    void setSubscriptionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetstatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStatusReason() const;
    bool statusReasonIsSet() const;
    void unsetstatusReason();

    void setStatusReason(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetid();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedTime() const;
    bool createdTimeIsSet() const;
    void unsetcreatedTime();

    void setCreatedTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreatorUserId() const;
    bool creatorUserIdIsSet() const;
    void unsetcreatorUserId();

    void setCreatorUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEditedTime() const;
    bool editedTimeIsSet() const;
    void unseteditedTime();

    void setEditedTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEditorUserId() const;
    bool editorUserIdIsSet() const;
    void unseteditorUserId();

    void setEditorUserId(const utility::string_t& value);


protected:
    std::shared_ptr<ReportInfo> m_reportInfo;
    bool m_reportInfoIsSet;
    utility::string_t m_name;
    bool m_nameIsSet;
    utility::string_t m_parentId;
    bool m_parentIdIsSet;
    std::vector<utility::string_t> m_tags;
    bool m_tagsIsSet;
    utility::string_t m_icon;
    bool m_iconIsSet;
    utility::string_t m_type;
    bool m_typeIsSet;
    int64_t m_size;
    bool m_sizeIsSet;
    utility::string_t m_subscriptionId;
    bool m_subscriptionIdIsSet;
    utility::string_t m_status;
    bool m_statusIsSet;
    utility::string_t m_statusReason;
    bool m_statusReasonIsSet;
    utility::string_t m_id;
    bool m_idIsSet;
    utility::datetime m_createdTime;
    bool m_createdTimeIsSet;
    utility::string_t m_creatorUserId;
    bool m_creatorUserIdIsSet;
    utility::datetime m_editedTime;
    bool m_editedTimeIsSet;
    utility::string_t m_editorUserId;
    bool m_editorUserIdIsSet;
};


}
}
}

#endif /* FASTREPORT_CLOUD_MODELS_TemplateVM_H_ */
