/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission.h"

namespace fastreport {
namespace cloud {
namespace models {




SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission()
{
    m_createIsSet = false;
    m_r_deleteIsSet = false;
    m_executeIsSet = false;
    m_getIsSet = false;
    m_updateIsSet = false;
    m_administrateIsSet = false;
}

SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::~SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission()
{
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::validate()
{
    // TODO: implement validation
}

web::json::value SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_createIsSet)
    {
        val[utility::conversions::to_string_t("create")] = ModelBase::toJson(m_create);
    }
    if(m_r_deleteIsSet)
    {
        val[utility::conversions::to_string_t("delete")] = ModelBase::toJson(m_r_delete);
    }
    if(m_executeIsSet)
    {
        val[utility::conversions::to_string_t("execute")] = ModelBase::toJson(m_execute);
    }
    if(m_getIsSet)
    {
        val[utility::conversions::to_string_t("get")] = ModelBase::toJson(m_get);
    }
    if(m_updateIsSet)
    {
        val[utility::conversions::to_string_t("update")] = ModelBase::toJson(m_update);
    }
    if(m_administrateIsSet)
    {
        val[utility::conversions::to_string_t("administrate")] = ModelBase::toJson(m_administrate);
    }

    return val;
}

bool SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("create")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("create"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscriptionCreate> refVal_create;
            ok &= ModelBase::fromJson(fieldValue, refVal_create);
            setCreate(refVal_create);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("delete")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("delete"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscriptionDelete> refVal_delete;
            ok &= ModelBase::fromJson(fieldValue, refVal_delete);
            setRDelete(refVal_delete);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("execute")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("execute"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscriptionExecute> refVal_execute;
            ok &= ModelBase::fromJson(fieldValue, refVal_execute);
            setExecute(refVal_execute);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("get")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("get"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscriptionGet> refVal_get;
            ok &= ModelBase::fromJson(fieldValue, refVal_get);
            setGet(refVal_get);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("update")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("update"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscriptionUpdate> refVal_update;
            ok &= ModelBase::fromJson(fieldValue, refVal_update);
            setUpdate(refVal_update);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("administrate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("administrate"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscriptionAdministrate> refVal_administrate;
            ok &= ModelBase::fromJson(fieldValue, refVal_administrate);
            setAdministrate(refVal_administrate);
        }
    }
    return ok;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_createIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("create"), m_create));
    }
    if(m_r_deleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("delete"), m_r_delete));
    }
    if(m_executeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("execute"), m_execute));
    }
    if(m_getIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("get"), m_get));
    }
    if(m_updateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("update"), m_update));
    }
    if(m_administrateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("administrate"), m_administrate));
    }
}

bool SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("create")))
    {
        std::shared_ptr<SubscriptionCreate> refVal_create;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("create")), refVal_create );
        setCreate(refVal_create);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("delete")))
    {
        std::shared_ptr<SubscriptionDelete> refVal_delete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("delete")), refVal_delete );
        setRDelete(refVal_delete);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("execute")))
    {
        std::shared_ptr<SubscriptionExecute> refVal_execute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("execute")), refVal_execute );
        setExecute(refVal_execute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("get")))
    {
        std::shared_ptr<SubscriptionGet> refVal_get;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("get")), refVal_get );
        setGet(refVal_get);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("update")))
    {
        std::shared_ptr<SubscriptionUpdate> refVal_update;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("update")), refVal_update );
        setUpdate(refVal_update);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("administrate")))
    {
        std::shared_ptr<SubscriptionAdministrate> refVal_administrate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("administrate")), refVal_administrate );
        setAdministrate(refVal_administrate);
    }
    return ok;
}

std::shared_ptr<SubscriptionCreate> SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::getCreate() const
{
    return m_create;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::setCreate(const std::shared_ptr<SubscriptionCreate>& value)
{
    m_create = value;
    m_createIsSet = true;
}

bool SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::createIsSet() const
{
    return m_createIsSet;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::unsetcreate()
{
    m_createIsSet = false;
}
std::shared_ptr<SubscriptionDelete> SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::getRDelete() const
{
    return m_r_delete;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::setRDelete(const std::shared_ptr<SubscriptionDelete>& value)
{
    m_r_delete = value;
    m_r_deleteIsSet = true;
}

bool SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::rDeleteIsSet() const
{
    return m_r_deleteIsSet;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::unsetr_delete()
{
    m_r_deleteIsSet = false;
}
std::shared_ptr<SubscriptionExecute> SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::getExecute() const
{
    return m_execute;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::setExecute(const std::shared_ptr<SubscriptionExecute>& value)
{
    m_execute = value;
    m_executeIsSet = true;
}

bool SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::executeIsSet() const
{
    return m_executeIsSet;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::unsetexecute()
{
    m_executeIsSet = false;
}
std::shared_ptr<SubscriptionGet> SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::getGet() const
{
    return m_get;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::setGet(const std::shared_ptr<SubscriptionGet>& value)
{
    m_get = value;
    m_getIsSet = true;
}

bool SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::getIsSet() const
{
    return m_getIsSet;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::unsetget()
{
    m_getIsSet = false;
}
std::shared_ptr<SubscriptionUpdate> SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::getUpdate() const
{
    return m_update;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::setUpdate(const std::shared_ptr<SubscriptionUpdate>& value)
{
    m_update = value;
    m_updateIsSet = true;
}

bool SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::updateIsSet() const
{
    return m_updateIsSet;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::unsetupdate()
{
    m_updateIsSet = false;
}
std::shared_ptr<SubscriptionAdministrate> SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::getAdministrate() const
{
    return m_administrate;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::setAdministrate(const std::shared_ptr<SubscriptionAdministrate>& value)
{
    m_administrate = value;
    m_administrateIsSet = true;
}

bool SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::administrateIsSet() const
{
    return m_administrateIsSet;
}

void SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission::unsetadministrate()
{
    m_administrateIsSet = false;
}
}
}
}


