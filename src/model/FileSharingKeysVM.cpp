/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FileSharingKeysVM.h"

namespace fastreport {
namespace cloud {
namespace models {



FileSharingKeysVM::FileSharingKeysVM()
{
    m_keysIsSet = false;
}

FileSharingKeysVM::~FileSharingKeysVM()
{
}

void FileSharingKeysVM::validate()
{
    // TODO: implement validation
}

web::json::value FileSharingKeysVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_keysIsSet)
    {
        val[utility::conversions::to_string_t(U("keys"))] = ModelBase::toJson(m_keys);
    }

    return val;
}

bool FileSharingKeysVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("keys"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("keys")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FileShareVM>> refVal_setKeys;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeys);
            setKeys(refVal_setKeys);
        }
    }
    return ok;
}

void FileSharingKeysVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_keysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("keys")), m_keys));
    }
}

bool FileSharingKeysVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("keys"))))
    {
        std::vector<std::shared_ptr<FileShareVM>> refVal_setKeys;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("keys"))), refVal_setKeys );
        setKeys(refVal_setKeys);
    }
    return ok;
}

std::vector<std::shared_ptr<FileShareVM>>& FileSharingKeysVM::getKeys()
{
    return m_keys;
}

void FileSharingKeysVM::setKeys(const std::vector<std::shared_ptr<FileShareVM>>& value)
{
    m_keys = value;
    m_keysIsSet = true;
}

bool FileSharingKeysVM::keysIsSet() const
{
    return m_keysIsSet;
}

void FileSharingKeysVM::unsetkeys()
{
    m_keysIsSet = false;
}
}
}
}


