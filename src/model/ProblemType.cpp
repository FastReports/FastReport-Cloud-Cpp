/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ProblemType.h"

namespace fastreport {
namespace cloud {
namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

ProblemType::eProblemType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("AnonPermissions")))
        return ProblemType::eProblemType::ProblemType_ANONPERMISSIONS;
    if (val == utility::conversions::to_string_t(U("UnrelatedFiles")))
        return ProblemType::eProblemType::ProblemType_UNRELATEDFILES;
    if (val == utility::conversions::to_string_t(U("OtherWithoutGet")))
        return ProblemType::eProblemType::ProblemType_OTHERWITHOUTGET;
    if (val == utility::conversions::to_string_t(U("DeadSubInUser")))
        return ProblemType::eProblemType::ProblemType_DEADSUBINUSER;
    if (val == utility::conversions::to_string_t(U("EmptySub")))
        return ProblemType::eProblemType::ProblemType_EMPTYSUB;
    if (val == utility::conversions::to_string_t(U("LostFileChunks")))
        return ProblemType::eProblemType::ProblemType_LOSTFILECHUNKS;
    if (val == utility::conversions::to_string_t(U("WrongSubscripitonSizes")))
        return ProblemType::eProblemType::ProblemType_WRONGSUBSCRIPITONSIZES;
    if (val == utility::conversions::to_string_t(U("FilesWithoutChunks")))
        return ProblemType::eProblemType::ProblemType_FILESWITHOUTCHUNKS;
    if (val == utility::conversions::to_string_t(U("FilesWithDeletedParents")))
        return ProblemType::eProblemType::ProblemType_FILESWITHDELETEDPARENTS;
    return {};
}

EnumUnderlyingType fromEnum(ProblemType::eProblemType e)
{
    switch (e)
    {
    case ProblemType::eProblemType::ProblemType_ANONPERMISSIONS:
        return U("AnonPermissions");
    case ProblemType::eProblemType::ProblemType_UNRELATEDFILES:
        return U("UnrelatedFiles");
    case ProblemType::eProblemType::ProblemType_OTHERWITHOUTGET:
        return U("OtherWithoutGet");
    case ProblemType::eProblemType::ProblemType_DEADSUBINUSER:
        return U("DeadSubInUser");
    case ProblemType::eProblemType::ProblemType_EMPTYSUB:
        return U("EmptySub");
    case ProblemType::eProblemType::ProblemType_LOSTFILECHUNKS:
        return U("LostFileChunks");
    case ProblemType::eProblemType::ProblemType_WRONGSUBSCRIPITONSIZES:
        return U("WrongSubscripitonSizes");
    case ProblemType::eProblemType::ProblemType_FILESWITHOUTCHUNKS:
        return U("FilesWithoutChunks");
    case ProblemType::eProblemType::ProblemType_FILESWITHDELETEDPARENTS:
        return U("FilesWithDeletedParents");
    default:
        break;
    }
    return {};
}
}

ProblemType::ProblemType()
{
}

ProblemType::~ProblemType()
{
}

void ProblemType::validate()
{
    // TODO: implement validation
}

web::json::value ProblemType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool ProblemType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void ProblemType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool ProblemType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

ProblemType::eProblemType ProblemType::getValue() const
{
   return m_value;
}

void ProblemType::setValue(ProblemType::eProblemType const value)
{
   m_value = value;
}


}
}
}


