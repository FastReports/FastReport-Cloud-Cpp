/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateUserSettingsVM.h"

namespace fastreport {
namespace cloud {
namespace models {



UpdateUserSettingsVM::UpdateUserSettingsVM()
{
    m_profileVisibilityIsSet = false;
    m_defaultSubscription = utility::conversions::to_string_t("");
    m_defaultSubscriptionIsSet = false;
    m_showHiddenFilesAndFolders = false;
    m_showHiddenFilesAndFoldersIsSet = false;
}

UpdateUserSettingsVM::~UpdateUserSettingsVM()
{
}

void UpdateUserSettingsVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdateUserSettingsVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_profileVisibilityIsSet)
    {
        val[utility::conversions::to_string_t(U("profileVisibility"))] = ModelBase::toJson(m_profileVisibility);
    }
    if(m_defaultSubscriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("defaultSubscription"))] = ModelBase::toJson(m_defaultSubscription);
    }
    if(m_showHiddenFilesAndFoldersIsSet)
    {
        val[utility::conversions::to_string_t(U("showHiddenFilesAndFolders"))] = ModelBase::toJson(m_showHiddenFilesAndFolders);
    }

    return val;
}

bool UpdateUserSettingsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("profileVisibility"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("profileVisibility")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProfileVisibility> refVal_setProfileVisibility;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProfileVisibility);
            setProfileVisibility(refVal_setProfileVisibility);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("defaultSubscription"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("defaultSubscription")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDefaultSubscription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefaultSubscription);
            setDefaultSubscription(refVal_setDefaultSubscription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("showHiddenFilesAndFolders"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("showHiddenFilesAndFolders")));
        if(!fieldValue.is_null())
        {
            bool refVal_setShowHiddenFilesAndFolders;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShowHiddenFilesAndFolders);
            setShowHiddenFilesAndFolders(refVal_setShowHiddenFilesAndFolders);
        }
    }
    return ok;
}

void UpdateUserSettingsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_profileVisibilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("profileVisibility")), m_profileVisibility));
    }
    if(m_defaultSubscriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("defaultSubscription")), m_defaultSubscription));
    }
    if(m_showHiddenFilesAndFoldersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("showHiddenFilesAndFolders")), m_showHiddenFilesAndFolders));
    }
}

bool UpdateUserSettingsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("profileVisibility"))))
    {
        std::shared_ptr<ProfileVisibility> refVal_setProfileVisibility;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("profileVisibility"))), refVal_setProfileVisibility );
        setProfileVisibility(refVal_setProfileVisibility);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("defaultSubscription"))))
    {
        utility::string_t refVal_setDefaultSubscription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("defaultSubscription"))), refVal_setDefaultSubscription );
        setDefaultSubscription(refVal_setDefaultSubscription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("showHiddenFilesAndFolders"))))
    {
        bool refVal_setShowHiddenFilesAndFolders;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("showHiddenFilesAndFolders"))), refVal_setShowHiddenFilesAndFolders );
        setShowHiddenFilesAndFolders(refVal_setShowHiddenFilesAndFolders);
    }
    return ok;
}

std::shared_ptr<ProfileVisibility> UpdateUserSettingsVM::getProfileVisibility() const
{
    return m_profileVisibility;
}

void UpdateUserSettingsVM::setProfileVisibility(const std::shared_ptr<ProfileVisibility>& value)
{
    m_profileVisibility = value;
    m_profileVisibilityIsSet = true;
}

bool UpdateUserSettingsVM::profileVisibilityIsSet() const
{
    return m_profileVisibilityIsSet;
}

void UpdateUserSettingsVM::unsetprofileVisibility()
{
    m_profileVisibilityIsSet = false;
}
utility::string_t UpdateUserSettingsVM::getDefaultSubscription() const
{
    return m_defaultSubscription;
}

void UpdateUserSettingsVM::setDefaultSubscription(const utility::string_t& value)
{
    m_defaultSubscription = value;
    m_defaultSubscriptionIsSet = true;
}

bool UpdateUserSettingsVM::defaultSubscriptionIsSet() const
{
    return m_defaultSubscriptionIsSet;
}

void UpdateUserSettingsVM::unsetdefaultSubscription()
{
    m_defaultSubscriptionIsSet = false;
}
bool UpdateUserSettingsVM::isShowHiddenFilesAndFolders() const
{
    return m_showHiddenFilesAndFolders;
}

void UpdateUserSettingsVM::setShowHiddenFilesAndFolders(bool value)
{
    m_showHiddenFilesAndFolders = value;
    m_showHiddenFilesAndFoldersIsSet = true;
}

bool UpdateUserSettingsVM::showHiddenFilesAndFoldersIsSet() const
{
    return m_showHiddenFilesAndFoldersIsSet;
}

void UpdateUserSettingsVM::unsetshowHiddenFilesAndFolders()
{
    m_showHiddenFilesAndFoldersIsSet = false;
}
}
}
}


