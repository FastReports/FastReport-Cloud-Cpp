/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ServerConfigurationVM.h"

namespace fastreport {
namespace cloud {
namespace models {



ServerConfigurationVM::ServerConfigurationVM()
{
    m_title = utility::conversions::to_string_t("");
    m_titleIsSet = false;
    m_logoLink = utility::conversions::to_string_t("");
    m_logoLinkIsSet = false;
    m_copyright = utility::conversions::to_string_t("");
    m_copyrightIsSet = false;
    m_corporateServerMode = false;
    m_corporateServerModeIsSet = false;
    m_lastSLAVersion = utility::datetime();
    m_lastSLAVersionIsSet = false;
    m_isDisabled = false;
    m_isDisabledIsSet = false;
    m_frontendIsSet = false;
    m_invariantLocale = utility::conversions::to_string_t("");
    m_invariantLocaleIsSet = false;
    m_authIsSet = false;
    m_designerForAnons = false;
    m_designerForAnonsIsSet = false;
    m_slaLink = utility::conversions::to_string_t("");
    m_slaLinkIsSet = false;
    m_firstStepsVideoLink = utility::conversions::to_string_t("");
    m_firstStepsVideoLinkIsSet = false;
    m_aboutLink = utility::conversions::to_string_t("");
    m_aboutLinkIsSet = false;
    m_homePageLink = utility::conversions::to_string_t("");
    m_homePageLinkIsSet = false;
    m_authServerName = utility::conversions::to_string_t("");
    m_authServerNameIsSet = false;
    m_updateWorkspaceLink = utility::conversions::to_string_t("");
    m_updateWorkspaceLinkIsSet = false;
}

ServerConfigurationVM::~ServerConfigurationVM()
{
}

void ServerConfigurationVM::validate()
{
    // TODO: implement validation
}

web::json::value ServerConfigurationVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_titleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_title);
    }
    if(m_logoLinkIsSet)
    {
        val[utility::conversions::to_string_t(U("logoLink"))] = ModelBase::toJson(m_logoLink);
    }
    if(m_copyrightIsSet)
    {
        val[utility::conversions::to_string_t(U("copyright"))] = ModelBase::toJson(m_copyright);
    }
    if(m_corporateServerModeIsSet)
    {
        val[utility::conversions::to_string_t(U("corporateServerMode"))] = ModelBase::toJson(m_corporateServerMode);
    }
    if(m_lastSLAVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("lastSLAVersion"))] = ModelBase::toJson(m_lastSLAVersion);
    }
    if(m_isDisabledIsSet)
    {
        val[utility::conversions::to_string_t(U("isDisabled"))] = ModelBase::toJson(m_isDisabled);
    }
    if(m_frontendIsSet)
    {
        val[utility::conversions::to_string_t(U("frontend"))] = ModelBase::toJson(m_frontend);
    }
    if(m_invariantLocaleIsSet)
    {
        val[utility::conversions::to_string_t(U("invariantLocale"))] = ModelBase::toJson(m_invariantLocale);
    }
    if(m_authIsSet)
    {
        val[utility::conversions::to_string_t(U("auth"))] = ModelBase::toJson(m_auth);
    }
    if(m_designerForAnonsIsSet)
    {
        val[utility::conversions::to_string_t(U("designerForAnons"))] = ModelBase::toJson(m_designerForAnons);
    }
    if(m_slaLinkIsSet)
    {
        val[utility::conversions::to_string_t(U("slaLink"))] = ModelBase::toJson(m_slaLink);
    }
    if(m_firstStepsVideoLinkIsSet)
    {
        val[utility::conversions::to_string_t(U("firstStepsVideoLink"))] = ModelBase::toJson(m_firstStepsVideoLink);
    }
    if(m_aboutLinkIsSet)
    {
        val[utility::conversions::to_string_t(U("aboutLink"))] = ModelBase::toJson(m_aboutLink);
    }
    if(m_homePageLinkIsSet)
    {
        val[utility::conversions::to_string_t(U("homePageLink"))] = ModelBase::toJson(m_homePageLink);
    }
    if(m_authServerNameIsSet)
    {
        val[utility::conversions::to_string_t(U("authServerName"))] = ModelBase::toJson(m_authServerName);
    }
    if(m_updateWorkspaceLinkIsSet)
    {
        val[utility::conversions::to_string_t(U("updateWorkspaceLink"))] = ModelBase::toJson(m_updateWorkspaceLink);
    }

    return val;
}

bool ServerConfigurationVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logoLink"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logoLink")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLogoLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogoLink);
            setLogoLink(refVal_setLogoLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("copyright"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("copyright")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCopyright;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCopyright);
            setCopyright(refVal_setCopyright);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("corporateServerMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("corporateServerMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCorporateServerMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCorporateServerMode);
            setCorporateServerMode(refVal_setCorporateServerMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastSLAVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastSLAVersion")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setLastSLAVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastSLAVersion);
            setLastSLAVersion(refVal_setLastSLAVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isDisabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isDisabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsDisabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsDisabled);
            setIsDisabled(refVal_setIsDisabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("frontend"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("frontend")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FrontendApp> refVal_setFrontend;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrontend);
            setFrontend(refVal_setFrontend);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invariantLocale"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invariantLocale")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInvariantLocale;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInvariantLocale);
            setInvariantLocale(refVal_setInvariantLocale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("auth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("auth")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AuthConfigVM> refVal_setAuth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuth);
            setAuth(refVal_setAuth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("designerForAnons"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("designerForAnons")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDesignerForAnons;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDesignerForAnons);
            setDesignerForAnons(refVal_setDesignerForAnons);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("slaLink"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slaLink")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSlaLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSlaLink);
            setSlaLink(refVal_setSlaLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("firstStepsVideoLink"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("firstStepsVideoLink")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFirstStepsVideoLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFirstStepsVideoLink);
            setFirstStepsVideoLink(refVal_setFirstStepsVideoLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aboutLink"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aboutLink")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAboutLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAboutLink);
            setAboutLink(refVal_setAboutLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("homePageLink"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("homePageLink")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHomePageLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHomePageLink);
            setHomePageLink(refVal_setHomePageLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("authServerName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("authServerName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAuthServerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuthServerName);
            setAuthServerName(refVal_setAuthServerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updateWorkspaceLink"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updateWorkspaceLink")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUpdateWorkspaceLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdateWorkspaceLink);
            setUpdateWorkspaceLink(refVal_setUpdateWorkspaceLink);
        }
    }
    return ok;
}

void ServerConfigurationVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_titleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_title));
    }
    if(m_logoLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logoLink")), m_logoLink));
    }
    if(m_copyrightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("copyright")), m_copyright));
    }
    if(m_corporateServerModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("corporateServerMode")), m_corporateServerMode));
    }
    if(m_lastSLAVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastSLAVersion")), m_lastSLAVersion));
    }
    if(m_isDisabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isDisabled")), m_isDisabled));
    }
    if(m_frontendIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("frontend")), m_frontend));
    }
    if(m_invariantLocaleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invariantLocale")), m_invariantLocale));
    }
    if(m_authIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("auth")), m_auth));
    }
    if(m_designerForAnonsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("designerForAnons")), m_designerForAnons));
    }
    if(m_slaLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slaLink")), m_slaLink));
    }
    if(m_firstStepsVideoLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("firstStepsVideoLink")), m_firstStepsVideoLink));
    }
    if(m_aboutLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aboutLink")), m_aboutLink));
    }
    if(m_homePageLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("homePageLink")), m_homePageLink));
    }
    if(m_authServerNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("authServerName")), m_authServerName));
    }
    if(m_updateWorkspaceLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updateWorkspaceLink")), m_updateWorkspaceLink));
    }
}

bool ServerConfigurationVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logoLink"))))
    {
        utility::string_t refVal_setLogoLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logoLink"))), refVal_setLogoLink );
        setLogoLink(refVal_setLogoLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("copyright"))))
    {
        utility::string_t refVal_setCopyright;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("copyright"))), refVal_setCopyright );
        setCopyright(refVal_setCopyright);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("corporateServerMode"))))
    {
        bool refVal_setCorporateServerMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("corporateServerMode"))), refVal_setCorporateServerMode );
        setCorporateServerMode(refVal_setCorporateServerMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastSLAVersion"))))
    {
        utility::datetime refVal_setLastSLAVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastSLAVersion"))), refVal_setLastSLAVersion );
        setLastSLAVersion(refVal_setLastSLAVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isDisabled"))))
    {
        bool refVal_setIsDisabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isDisabled"))), refVal_setIsDisabled );
        setIsDisabled(refVal_setIsDisabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("frontend"))))
    {
        std::shared_ptr<FrontendApp> refVal_setFrontend;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("frontend"))), refVal_setFrontend );
        setFrontend(refVal_setFrontend);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invariantLocale"))))
    {
        utility::string_t refVal_setInvariantLocale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invariantLocale"))), refVal_setInvariantLocale );
        setInvariantLocale(refVal_setInvariantLocale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("auth"))))
    {
        std::shared_ptr<AuthConfigVM> refVal_setAuth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("auth"))), refVal_setAuth );
        setAuth(refVal_setAuth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("designerForAnons"))))
    {
        bool refVal_setDesignerForAnons;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("designerForAnons"))), refVal_setDesignerForAnons );
        setDesignerForAnons(refVal_setDesignerForAnons);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("slaLink"))))
    {
        utility::string_t refVal_setSlaLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slaLink"))), refVal_setSlaLink );
        setSlaLink(refVal_setSlaLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("firstStepsVideoLink"))))
    {
        utility::string_t refVal_setFirstStepsVideoLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("firstStepsVideoLink"))), refVal_setFirstStepsVideoLink );
        setFirstStepsVideoLink(refVal_setFirstStepsVideoLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aboutLink"))))
    {
        utility::string_t refVal_setAboutLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aboutLink"))), refVal_setAboutLink );
        setAboutLink(refVal_setAboutLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("homePageLink"))))
    {
        utility::string_t refVal_setHomePageLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("homePageLink"))), refVal_setHomePageLink );
        setHomePageLink(refVal_setHomePageLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("authServerName"))))
    {
        utility::string_t refVal_setAuthServerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("authServerName"))), refVal_setAuthServerName );
        setAuthServerName(refVal_setAuthServerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updateWorkspaceLink"))))
    {
        utility::string_t refVal_setUpdateWorkspaceLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updateWorkspaceLink"))), refVal_setUpdateWorkspaceLink );
        setUpdateWorkspaceLink(refVal_setUpdateWorkspaceLink);
    }
    return ok;
}

utility::string_t ServerConfigurationVM::getTitle() const
{
    return m_title;
}

void ServerConfigurationVM::setTitle(const utility::string_t& value)
{
    m_title = value;
    m_titleIsSet = true;
}

bool ServerConfigurationVM::titleIsSet() const
{
    return m_titleIsSet;
}

void ServerConfigurationVM::unsettitle()
{
    m_titleIsSet = false;
}
utility::string_t ServerConfigurationVM::getLogoLink() const
{
    return m_logoLink;
}

void ServerConfigurationVM::setLogoLink(const utility::string_t& value)
{
    m_logoLink = value;
    m_logoLinkIsSet = true;
}

bool ServerConfigurationVM::logoLinkIsSet() const
{
    return m_logoLinkIsSet;
}

void ServerConfigurationVM::unsetlogoLink()
{
    m_logoLinkIsSet = false;
}
utility::string_t ServerConfigurationVM::getCopyright() const
{
    return m_copyright;
}

void ServerConfigurationVM::setCopyright(const utility::string_t& value)
{
    m_copyright = value;
    m_copyrightIsSet = true;
}

bool ServerConfigurationVM::copyrightIsSet() const
{
    return m_copyrightIsSet;
}

void ServerConfigurationVM::unsetcopyright()
{
    m_copyrightIsSet = false;
}
bool ServerConfigurationVM::isCorporateServerMode() const
{
    return m_corporateServerMode;
}

void ServerConfigurationVM::setCorporateServerMode(bool value)
{
    m_corporateServerMode = value;
    m_corporateServerModeIsSet = true;
}

bool ServerConfigurationVM::corporateServerModeIsSet() const
{
    return m_corporateServerModeIsSet;
}

void ServerConfigurationVM::unsetcorporateServerMode()
{
    m_corporateServerModeIsSet = false;
}
utility::datetime ServerConfigurationVM::getLastSLAVersion() const
{
    return m_lastSLAVersion;
}

void ServerConfigurationVM::setLastSLAVersion(const utility::datetime& value)
{
    m_lastSLAVersion = value;
    m_lastSLAVersionIsSet = true;
}

bool ServerConfigurationVM::lastSLAVersionIsSet() const
{
    return m_lastSLAVersionIsSet;
}

void ServerConfigurationVM::unsetlastSLAVersion()
{
    m_lastSLAVersionIsSet = false;
}
bool ServerConfigurationVM::isIsDisabled() const
{
    return m_isDisabled;
}

void ServerConfigurationVM::setIsDisabled(bool value)
{
    m_isDisabled = value;
    m_isDisabledIsSet = true;
}

bool ServerConfigurationVM::isDisabledIsSet() const
{
    return m_isDisabledIsSet;
}

void ServerConfigurationVM::unsetisDisabled()
{
    m_isDisabledIsSet = false;
}
std::shared_ptr<FrontendApp> ServerConfigurationVM::getFrontend() const
{
    return m_frontend;
}

void ServerConfigurationVM::setFrontend(const std::shared_ptr<FrontendApp>& value)
{
    m_frontend = value;
    m_frontendIsSet = true;
}

bool ServerConfigurationVM::frontendIsSet() const
{
    return m_frontendIsSet;
}

void ServerConfigurationVM::unsetfrontend()
{
    m_frontendIsSet = false;
}
utility::string_t ServerConfigurationVM::getInvariantLocale() const
{
    return m_invariantLocale;
}

void ServerConfigurationVM::setInvariantLocale(const utility::string_t& value)
{
    m_invariantLocale = value;
    m_invariantLocaleIsSet = true;
}

bool ServerConfigurationVM::invariantLocaleIsSet() const
{
    return m_invariantLocaleIsSet;
}

void ServerConfigurationVM::unsetinvariantLocale()
{
    m_invariantLocaleIsSet = false;
}
std::shared_ptr<AuthConfigVM> ServerConfigurationVM::getAuth() const
{
    return m_auth;
}

void ServerConfigurationVM::setAuth(const std::shared_ptr<AuthConfigVM>& value)
{
    m_auth = value;
    m_authIsSet = true;
}

bool ServerConfigurationVM::authIsSet() const
{
    return m_authIsSet;
}

void ServerConfigurationVM::unsetauth()
{
    m_authIsSet = false;
}
bool ServerConfigurationVM::isDesignerForAnons() const
{
    return m_designerForAnons;
}

void ServerConfigurationVM::setDesignerForAnons(bool value)
{
    m_designerForAnons = value;
    m_designerForAnonsIsSet = true;
}

bool ServerConfigurationVM::designerForAnonsIsSet() const
{
    return m_designerForAnonsIsSet;
}

void ServerConfigurationVM::unsetdesignerForAnons()
{
    m_designerForAnonsIsSet = false;
}
utility::string_t ServerConfigurationVM::getSlaLink() const
{
    return m_slaLink;
}

void ServerConfigurationVM::setSlaLink(const utility::string_t& value)
{
    m_slaLink = value;
    m_slaLinkIsSet = true;
}

bool ServerConfigurationVM::slaLinkIsSet() const
{
    return m_slaLinkIsSet;
}

void ServerConfigurationVM::unsetslaLink()
{
    m_slaLinkIsSet = false;
}
utility::string_t ServerConfigurationVM::getFirstStepsVideoLink() const
{
    return m_firstStepsVideoLink;
}

void ServerConfigurationVM::setFirstStepsVideoLink(const utility::string_t& value)
{
    m_firstStepsVideoLink = value;
    m_firstStepsVideoLinkIsSet = true;
}

bool ServerConfigurationVM::firstStepsVideoLinkIsSet() const
{
    return m_firstStepsVideoLinkIsSet;
}

void ServerConfigurationVM::unsetfirstStepsVideoLink()
{
    m_firstStepsVideoLinkIsSet = false;
}
utility::string_t ServerConfigurationVM::getAboutLink() const
{
    return m_aboutLink;
}

void ServerConfigurationVM::setAboutLink(const utility::string_t& value)
{
    m_aboutLink = value;
    m_aboutLinkIsSet = true;
}

bool ServerConfigurationVM::aboutLinkIsSet() const
{
    return m_aboutLinkIsSet;
}

void ServerConfigurationVM::unsetaboutLink()
{
    m_aboutLinkIsSet = false;
}
utility::string_t ServerConfigurationVM::getHomePageLink() const
{
    return m_homePageLink;
}

void ServerConfigurationVM::setHomePageLink(const utility::string_t& value)
{
    m_homePageLink = value;
    m_homePageLinkIsSet = true;
}

bool ServerConfigurationVM::homePageLinkIsSet() const
{
    return m_homePageLinkIsSet;
}

void ServerConfigurationVM::unsethomePageLink()
{
    m_homePageLinkIsSet = false;
}
utility::string_t ServerConfigurationVM::getAuthServerName() const
{
    return m_authServerName;
}

void ServerConfigurationVM::setAuthServerName(const utility::string_t& value)
{
    m_authServerName = value;
    m_authServerNameIsSet = true;
}

bool ServerConfigurationVM::authServerNameIsSet() const
{
    return m_authServerNameIsSet;
}

void ServerConfigurationVM::unsetauthServerName()
{
    m_authServerNameIsSet = false;
}
utility::string_t ServerConfigurationVM::getUpdateWorkspaceLink() const
{
    return m_updateWorkspaceLink;
}

void ServerConfigurationVM::setUpdateWorkspaceLink(const utility::string_t& value)
{
    m_updateWorkspaceLink = value;
    m_updateWorkspaceLinkIsSet = true;
}

bool ServerConfigurationVM::updateWorkspaceLinkIsSet() const
{
    return m_updateWorkspaceLinkIsSet;
}

void ServerConfigurationVM::unsetupdateWorkspaceLink()
{
    m_updateWorkspaceLinkIsSet = false;
}
}
}
}


