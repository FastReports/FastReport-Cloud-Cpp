/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateContentInternalVM.h"

namespace fastreport {
namespace cloud {
namespace models {



UpdateContentInternalVM::UpdateContentInternalVM()
{
    m_editorId = utility::conversions::to_string_t("");
    m_editorIdIsSet = false;
    m_fileContentIsSet = false;
    m_thumbnailIsSet = false;
}

UpdateContentInternalVM::~UpdateContentInternalVM()
{
}

void UpdateContentInternalVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdateContentInternalVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_editorIdIsSet)
    {
        val[utility::conversions::to_string_t(U("editorId"))] = ModelBase::toJson(m_editorId);
    }
    if(m_fileContentIsSet)
    {
        val[utility::conversions::to_string_t(U("fileContent"))] = ModelBase::toJson(m_fileContent);
    }
    if(m_thumbnailIsSet)
    {
        val[utility::conversions::to_string_t(U("thumbnail"))] = ModelBase::toJson(m_thumbnail);
    }

    return val;
}

bool UpdateContentInternalVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("editorId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("editorId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEditorId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEditorId);
            setEditorId(refVal_setEditorId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fileContent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fileContent")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HttpContent> refVal_setFileContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileContent);
            setFileContent(refVal_setFileContent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thumbnail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thumbnail")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HttpContent> refVal_setThumbnail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThumbnail);
            setThumbnail(refVal_setThumbnail);
        }
    }
    return ok;
}

void UpdateContentInternalVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_editorIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("editorId")), m_editorId));
    }
    if(m_fileContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fileContent")), m_fileContent));
    }
    if(m_thumbnailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thumbnail")), m_thumbnail));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool UpdateContentInternalVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("editorId"))))
    {
        utility::string_t refVal_setEditorId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("editorId"))), refVal_setEditorId );
        setEditorId(refVal_setEditorId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fileContent"))))
    {
        std::shared_ptr<HttpContent> refVal_setFileContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fileContent"))), refVal_setFileContent );
        setFileContent(refVal_setFileContent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thumbnail"))))
    {
        std::shared_ptr<HttpContent> refVal_setThumbnail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thumbnail"))), refVal_setThumbnail );
        setThumbnail(refVal_setThumbnail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t UpdateContentInternalVM::getEditorId() const
{
    return m_editorId;
}

void UpdateContentInternalVM::setEditorId(const utility::string_t& value)
{
    m_editorId = value;
    m_editorIdIsSet = true;
}

bool UpdateContentInternalVM::editorIdIsSet() const
{
    return m_editorIdIsSet;
}

void UpdateContentInternalVM::unseteditorId()
{
    m_editorIdIsSet = false;
}
std::shared_ptr<HttpContent> UpdateContentInternalVM::getFileContent() const
{
    return m_fileContent;
}

void UpdateContentInternalVM::setFileContent(const std::shared_ptr<HttpContent>& value)
{
    m_fileContent = value;
    m_fileContentIsSet = true;
}

bool UpdateContentInternalVM::fileContentIsSet() const
{
    return m_fileContentIsSet;
}

void UpdateContentInternalVM::unsetfileContent()
{
    m_fileContentIsSet = false;
}
std::shared_ptr<HttpContent> UpdateContentInternalVM::getThumbnail() const
{
    return m_thumbnail;
}

void UpdateContentInternalVM::setThumbnail(const std::shared_ptr<HttpContent>& value)
{
    m_thumbnail = value;
    m_thumbnailIsSet = true;
}

bool UpdateContentInternalVM::thumbnailIsSet() const
{
    return m_thumbnailIsSet;
}

void UpdateContentInternalVM::unsetthumbnail()
{
    m_thumbnailIsSet = false;
}
}
}
}


