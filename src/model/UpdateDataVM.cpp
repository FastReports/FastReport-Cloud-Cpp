/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateDataVM.h"

namespace fastreport {
namespace cloud {
namespace models {



UpdateDataVM::UpdateDataVM()
{
    m_newData = utility::conversions::to_string_t("");
    m_newDataIsSet = false;
    m_editorId = utility::conversions::to_string_t("");
    m_editorIdIsSet = false;
    m_errorMessage = utility::conversions::to_string_t("");
    m_errorMessageIsSet = false;
}

UpdateDataVM::~UpdateDataVM()
{
}

void UpdateDataVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdateDataVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_newDataIsSet)
    {
        val[utility::conversions::to_string_t(U("newData"))] = ModelBase::toJson(m_newData);
    }
    if(m_editorIdIsSet)
    {
        val[utility::conversions::to_string_t(U("editorId"))] = ModelBase::toJson(m_editorId);
    }
    if(m_errorMessageIsSet)
    {
        val[utility::conversions::to_string_t(U("errorMessage"))] = ModelBase::toJson(m_errorMessage);
    }

    return val;
}

bool UpdateDataVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("newData"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("newData")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNewData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNewData);
            setNewData(refVal_setNewData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("editorId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("editorId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEditorId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEditorId);
            setEditorId(refVal_setEditorId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errorMessage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errorMessage")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorMessage);
            setErrorMessage(refVal_setErrorMessage);
        }
    }
    return ok;
}

void UpdateDataVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_newDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("newData")), m_newData));
    }
    if(m_editorIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("editorId")), m_editorId));
    }
    if(m_errorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errorMessage")), m_errorMessage));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool UpdateDataVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("newData"))))
    {
        utility::string_t refVal_setNewData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("newData"))), refVal_setNewData );
        setNewData(refVal_setNewData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("editorId"))))
    {
        utility::string_t refVal_setEditorId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("editorId"))), refVal_setEditorId );
        setEditorId(refVal_setEditorId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errorMessage"))))
    {
        utility::string_t refVal_setErrorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errorMessage"))), refVal_setErrorMessage );
        setErrorMessage(refVal_setErrorMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t UpdateDataVM::getNewData() const
{
    return m_newData;
}

void UpdateDataVM::setNewData(const utility::string_t& value)
{
    m_newData = value;
    m_newDataIsSet = true;
}

bool UpdateDataVM::newDataIsSet() const
{
    return m_newDataIsSet;
}

void UpdateDataVM::unsetnewData()
{
    m_newDataIsSet = false;
}
utility::string_t UpdateDataVM::getEditorId() const
{
    return m_editorId;
}

void UpdateDataVM::setEditorId(const utility::string_t& value)
{
    m_editorId = value;
    m_editorIdIsSet = true;
}

bool UpdateDataVM::editorIdIsSet() const
{
    return m_editorIdIsSet;
}

void UpdateDataVM::unseteditorId()
{
    m_editorIdIsSet = false;
}
utility::string_t UpdateDataVM::getErrorMessage() const
{
    return m_errorMessage;
}

void UpdateDataVM::setErrorMessage(const utility::string_t& value)
{
    m_errorMessage = value;
    m_errorMessageIsSet = true;
}

bool UpdateDataVM::errorMessageIsSet() const
{
    return m_errorMessageIsSet;
}

void UpdateDataVM::unseterrorMessage()
{
    m_errorMessageIsSet = false;
}
}
}
}


