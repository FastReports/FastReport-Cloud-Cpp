/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission.h"

namespace fastreport {
namespace cloud {
namespace models {



GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission()
{
    m_createIsSet = false;
    m_r_deleteIsSet = false;
    m_executeIsSet = false;
    m_getIsSet = false;
    m_updateIsSet = false;
    m_administrateIsSet = false;
}

GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::~GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission()
{
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::validate()
{
    // TODO: implement validation
}

web::json::value GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_createIsSet)
    {
        val[utility::conversions::to_string_t(U("create"))] = ModelBase::toJson(m_create);
    }
    if(m_r_deleteIsSet)
    {
        val[utility::conversions::to_string_t(U("delete"))] = ModelBase::toJson(m_r_delete);
    }
    if(m_executeIsSet)
    {
        val[utility::conversions::to_string_t(U("execute"))] = ModelBase::toJson(m_execute);
    }
    if(m_getIsSet)
    {
        val[utility::conversions::to_string_t(U("get"))] = ModelBase::toJson(m_get);
    }
    if(m_updateIsSet)
    {
        val[utility::conversions::to_string_t(U("update"))] = ModelBase::toJson(m_update);
    }
    if(m_administrateIsSet)
    {
        val[utility::conversions::to_string_t(U("administrate"))] = ModelBase::toJson(m_administrate);
    }

    return val;
}

bool GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("create"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("create")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GroupCreate> refVal_setCreate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreate);
            setCreate(refVal_setCreate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delete"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delete")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GroupDelete> refVal_setRDelete;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRDelete);
            setRDelete(refVal_setRDelete);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("execute"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("execute")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GroupExecute> refVal_setExecute;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExecute);
            setExecute(refVal_setExecute);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("get"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("get")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GroupGet> refVal_setGet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGet);
            setGet(refVal_setGet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("update"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("update")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GroupUpdate> refVal_setUpdate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdate);
            setUpdate(refVal_setUpdate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("administrate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("administrate")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GroupAdministrate> refVal_setAdministrate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdministrate);
            setAdministrate(refVal_setAdministrate);
        }
    }
    return ok;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_createIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("create")), m_create));
    }
    if(m_r_deleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delete")), m_r_delete));
    }
    if(m_executeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("execute")), m_execute));
    }
    if(m_getIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("get")), m_get));
    }
    if(m_updateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("update")), m_update));
    }
    if(m_administrateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("administrate")), m_administrate));
    }
}

bool GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("create"))))
    {
        std::shared_ptr<GroupCreate> refVal_setCreate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("create"))), refVal_setCreate );
        setCreate(refVal_setCreate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delete"))))
    {
        std::shared_ptr<GroupDelete> refVal_setRDelete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delete"))), refVal_setRDelete );
        setRDelete(refVal_setRDelete);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("execute"))))
    {
        std::shared_ptr<GroupExecute> refVal_setExecute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("execute"))), refVal_setExecute );
        setExecute(refVal_setExecute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("get"))))
    {
        std::shared_ptr<GroupGet> refVal_setGet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("get"))), refVal_setGet );
        setGet(refVal_setGet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("update"))))
    {
        std::shared_ptr<GroupUpdate> refVal_setUpdate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("update"))), refVal_setUpdate );
        setUpdate(refVal_setUpdate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("administrate"))))
    {
        std::shared_ptr<GroupAdministrate> refVal_setAdministrate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("administrate"))), refVal_setAdministrate );
        setAdministrate(refVal_setAdministrate);
    }
    return ok;
}

std::shared_ptr<GroupCreate> GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::getCreate() const
{
    return m_create;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::setCreate(const std::shared_ptr<GroupCreate>& value)
{
    m_create = value;
    m_createIsSet = true;
}

bool GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::createIsSet() const
{
    return m_createIsSet;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::unsetcreate()
{
    m_createIsSet = false;
}
std::shared_ptr<GroupDelete> GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::getRDelete() const
{
    return m_r_delete;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::setRDelete(const std::shared_ptr<GroupDelete>& value)
{
    m_r_delete = value;
    m_r_deleteIsSet = true;
}

bool GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::rDeleteIsSet() const
{
    return m_r_deleteIsSet;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::unsetr_delete()
{
    m_r_deleteIsSet = false;
}
std::shared_ptr<GroupExecute> GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::getExecute() const
{
    return m_execute;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::setExecute(const std::shared_ptr<GroupExecute>& value)
{
    m_execute = value;
    m_executeIsSet = true;
}

bool GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::executeIsSet() const
{
    return m_executeIsSet;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::unsetexecute()
{
    m_executeIsSet = false;
}
std::shared_ptr<GroupGet> GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::getGet() const
{
    return m_get;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::setGet(const std::shared_ptr<GroupGet>& value)
{
    m_get = value;
    m_getIsSet = true;
}

bool GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::getIsSet() const
{
    return m_getIsSet;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::unsetget()
{
    m_getIsSet = false;
}
std::shared_ptr<GroupUpdate> GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::getUpdate() const
{
    return m_update;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::setUpdate(const std::shared_ptr<GroupUpdate>& value)
{
    m_update = value;
    m_updateIsSet = true;
}

bool GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::updateIsSet() const
{
    return m_updateIsSet;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::unsetupdate()
{
    m_updateIsSet = false;
}
std::shared_ptr<GroupAdministrate> GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::getAdministrate() const
{
    return m_administrate;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::setAdministrate(const std::shared_ptr<GroupAdministrate>& value)
{
    m_administrate = value;
    m_administrateIsSet = true;
}

bool GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::administrateIsSet() const
{
    return m_administrateIsSet;
}

void GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission::unsetadministrate()
{
    m_administrateIsSet = false;
}
}
}
}


