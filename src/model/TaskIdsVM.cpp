/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TaskIdsVM.h"

namespace fastreport {
namespace cloud {
namespace models {



TaskIdsVM::TaskIdsVM()
{
    m_count = 0L;
    m_countIsSet = false;
    m_idsIsSet = false;
    m_skip = 0;
    m_skipIsSet = false;
    m_take = 0;
    m_takeIsSet = false;
}

TaskIdsVM::~TaskIdsVM()
{
}

void TaskIdsVM::validate()
{
    // TODO: implement validation
}

web::json::value TaskIdsVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_countIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_count);
    }
    if(m_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("ids"))] = ModelBase::toJson(m_ids);
    }
    if(m_skipIsSet)
    {
        val[utility::conversions::to_string_t(U("skip"))] = ModelBase::toJson(m_skip);
    }
    if(m_takeIsSet)
    {
        val[utility::conversions::to_string_t(U("take"))] = ModelBase::toJson(m_take);
    }

    return val;
}

bool TaskIdsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIds);
            setIds(refVal_setIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("skip"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("skip")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSkip;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSkip);
            setSkip(refVal_setSkip);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("take"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("take")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTake;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTake);
            setTake(refVal_setTake);
        }
    }
    return ok;
}

void TaskIdsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_count));
    }
    if(m_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ids")), m_ids));
    }
    if(m_skipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("skip")), m_skip));
    }
    if(m_takeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("take")), m_take));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool TaskIdsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        int64_t refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ids"))))
    {
        std::vector<utility::string_t> refVal_setIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ids"))), refVal_setIds );
        setIds(refVal_setIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("skip"))))
    {
        int32_t refVal_setSkip;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("skip"))), refVal_setSkip );
        setSkip(refVal_setSkip);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("take"))))
    {
        int32_t refVal_setTake;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("take"))), refVal_setTake );
        setTake(refVal_setTake);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

int64_t TaskIdsVM::getCount() const
{
    return m_count;
}

void TaskIdsVM::setCount(int64_t value)
{
    m_count = value;
    m_countIsSet = true;
}

bool TaskIdsVM::countIsSet() const
{
    return m_countIsSet;
}

void TaskIdsVM::unsetcount()
{
    m_countIsSet = false;
}
std::vector<utility::string_t>& TaskIdsVM::getIds()
{
    return m_ids;
}

void TaskIdsVM::setIds(const std::vector<utility::string_t>& value)
{
    m_ids = value;
    m_idsIsSet = true;
}

bool TaskIdsVM::idsIsSet() const
{
    return m_idsIsSet;
}

void TaskIdsVM::unsetids()
{
    m_idsIsSet = false;
}
int32_t TaskIdsVM::getSkip() const
{
    return m_skip;
}

void TaskIdsVM::setSkip(int32_t value)
{
    m_skip = value;
    m_skipIsSet = true;
}

bool TaskIdsVM::skipIsSet() const
{
    return m_skipIsSet;
}

void TaskIdsVM::unsetskip()
{
    m_skipIsSet = false;
}
int32_t TaskIdsVM::getTake() const
{
    return m_take;
}

void TaskIdsVM::setTake(int32_t value)
{
    m_take = value;
    m_takeIsSet = true;
}

bool TaskIdsVM::takeIsSet() const
{
    return m_takeIsSet;
}

void TaskIdsVM::unsettake()
{
    m_takeIsSet = false;
}
}
}
}


