/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ReportVMFilesVMBase.h"

namespace fastreport {
namespace cloud {
namespace models {



ReportVMFilesVMBase::ReportVMFilesVMBase()
{
    m_filesIsSet = false;
    m_count = 0L;
    m_countIsSet = false;
    m_skip = 0;
    m_skipIsSet = false;
    m_take = 0;
    m_takeIsSet = false;
}

ReportVMFilesVMBase::~ReportVMFilesVMBase()
{
}

void ReportVMFilesVMBase::validate()
{
    // TODO: implement validation
}

web::json::value ReportVMFilesVMBase::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_filesIsSet)
    {
        val[utility::conversions::to_string_t(U("files"))] = ModelBase::toJson(m_files);
    }
    if(m_countIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_count);
    }
    if(m_skipIsSet)
    {
        val[utility::conversions::to_string_t(U("skip"))] = ModelBase::toJson(m_skip);
    }
    if(m_takeIsSet)
    {
        val[utility::conversions::to_string_t(U("take"))] = ModelBase::toJson(m_take);
    }

    return val;
}

bool ReportVMFilesVMBase::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("files"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("files")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ReportVM>> refVal_setFiles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFiles);
            setFiles(refVal_setFiles);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("skip"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("skip")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSkip;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSkip);
            setSkip(refVal_setSkip);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("take"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("take")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTake;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTake);
            setTake(refVal_setTake);
        }
    }
    return ok;
}

void ReportVMFilesVMBase::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_filesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("files")), m_files));
    }
    if(m_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_count));
    }
    if(m_skipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("skip")), m_skip));
    }
    if(m_takeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("take")), m_take));
    }
}

bool ReportVMFilesVMBase::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("files"))))
    {
        std::vector<std::shared_ptr<ReportVM>> refVal_setFiles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("files"))), refVal_setFiles );
        setFiles(refVal_setFiles);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        int64_t refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("skip"))))
    {
        int32_t refVal_setSkip;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("skip"))), refVal_setSkip );
        setSkip(refVal_setSkip);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("take"))))
    {
        int32_t refVal_setTake;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("take"))), refVal_setTake );
        setTake(refVal_setTake);
    }
    return ok;
}

std::vector<std::shared_ptr<ReportVM>>& ReportVMFilesVMBase::getFiles()
{
    return m_files;
}

void ReportVMFilesVMBase::setFiles(const std::vector<std::shared_ptr<ReportVM>>& value)
{
    m_files = value;
    m_filesIsSet = true;
}

bool ReportVMFilesVMBase::filesIsSet() const
{
    return m_filesIsSet;
}

void ReportVMFilesVMBase::unsetfiles()
{
    m_filesIsSet = false;
}
int64_t ReportVMFilesVMBase::getCount() const
{
    return m_count;
}

void ReportVMFilesVMBase::setCount(int64_t value)
{
    m_count = value;
    m_countIsSet = true;
}

bool ReportVMFilesVMBase::countIsSet() const
{
    return m_countIsSet;
}

void ReportVMFilesVMBase::unsetcount()
{
    m_countIsSet = false;
}
int32_t ReportVMFilesVMBase::getSkip() const
{
    return m_skip;
}

void ReportVMFilesVMBase::setSkip(int32_t value)
{
    m_skip = value;
    m_skipIsSet = true;
}

bool ReportVMFilesVMBase::skipIsSet() const
{
    return m_skipIsSet;
}

void ReportVMFilesVMBase::unsetskip()
{
    m_skipIsSet = false;
}
int32_t ReportVMFilesVMBase::getTake() const
{
    return m_take;
}

void ReportVMFilesVMBase::setTake(int32_t value)
{
    m_take = value;
    m_takeIsSet = true;
}

bool ReportVMFilesVMBase::takeIsSet() const
{
    return m_takeIsSet;
}

void ReportVMFilesVMBase::unsettake()
{
    m_takeIsSet = false;
}
}
}
}


