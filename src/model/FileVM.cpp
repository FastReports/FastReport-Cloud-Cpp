/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FileVM.h"

namespace fastreport {
namespace cloud {
namespace models {



FileVM::FileVM()
{
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_parentId = utility::conversions::to_string_t("");
    m_parentIdIsSet = false;
    m_tagsIsSet = false;
    m_iconIsSet = false;
    m_typeIsSet = false;
    m_size = 0L;
    m_sizeIsSet = false;
    m_subscriptionId = utility::conversions::to_string_t("");
    m_subscriptionIdIsSet = false;
    m_statusIsSet = false;
    m_statusReasonIsSet = false;
    m_errorMessage = utility::conversions::to_string_t("");
    m_errorMessageIsSet = false;
    m_isDeleted = false;
    m_isDeletedIsSet = false;
}

FileVM::~FileVM()
{
}

void FileVM::validate()
{
    // TODO: implement validation
}

web::json::value FileVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_name);
    }
    if(m_parentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("parentId"))] = ModelBase::toJson(m_parentId);
    }
    if(m_tagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_tags);
    }
    if(m_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("icon"))] = ModelBase::toJson(m_icon);
    }
    if(m_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_type);
    }
    if(m_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("size"))] = ModelBase::toJson(m_size);
    }
    if(m_subscriptionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("subscriptionId"))] = ModelBase::toJson(m_subscriptionId);
    }
    if(m_statusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_status);
    }
    if(m_statusReasonIsSet)
    {
        val[utility::conversions::to_string_t(U("statusReason"))] = ModelBase::toJson(m_statusReason);
    }
    if(m_errorMessageIsSet)
    {
        val[utility::conversions::to_string_t(U("errorMessage"))] = ModelBase::toJson(m_errorMessage);
    }
    if(m_isDeletedIsSet)
    {
        val[utility::conversions::to_string_t(U("isDeleted"))] = ModelBase::toJson(m_isDeleted);
    }

    return val;
}

bool FileVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parentId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setParentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentId);
            setParentId(refVal_setParentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIcon);
            setIcon(refVal_setIcon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FileType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subscriptionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subscriptionId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubscriptionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubscriptionId);
            setSubscriptionId(refVal_setSubscriptionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FileStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statusReason"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statusReason")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FileStatusReason> refVal_setStatusReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatusReason);
            setStatusReason(refVal_setStatusReason);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errorMessage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errorMessage")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorMessage);
            setErrorMessage(refVal_setErrorMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isDeleted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isDeleted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsDeleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsDeleted);
            setIsDeleted(refVal_setIsDeleted);
        }
    }
    return ok;
}

void FileVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_parentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parentId")), m_parentId));
    }
    if(m_tagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_tags));
    }
    if(m_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("icon")), m_icon));
    }
    if(m_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_type));
    }
    if(m_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size")), m_size));
    }
    if(m_subscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscriptionId")), m_subscriptionId));
    }
    if(m_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_status));
    }
    if(m_statusReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statusReason")), m_statusReason));
    }
    if(m_errorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errorMessage")), m_errorMessage));
    }
    if(m_isDeletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isDeleted")), m_isDeleted));
    }
    if(m_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_id));
    }
    if(m_createdTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdTime")), m_createdTime));
    }
    if(m_creatorUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creatorUserId")), m_creatorUserId));
    }
    if(m_editedTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("editedTime")), m_editedTime));
    }
    if(m_editorUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("editorUserId")), m_editorUserId));
    }
}

bool FileVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parentId"))))
    {
        utility::string_t refVal_setParentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parentId"))), refVal_setParentId );
        setParentId(refVal_setParentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<utility::string_t> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("icon"))))
    {
        utility::string_t refVal_setIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("icon"))), refVal_setIcon );
        setIcon(refVal_setIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<FileType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size"))))
    {
        int64_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subscriptionId"))))
    {
        utility::string_t refVal_setSubscriptionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscriptionId"))), refVal_setSubscriptionId );
        setSubscriptionId(refVal_setSubscriptionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<FileStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statusReason"))))
    {
        std::shared_ptr<FileStatusReason> refVal_setStatusReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statusReason"))), refVal_setStatusReason );
        setStatusReason(refVal_setStatusReason);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errorMessage"))))
    {
        utility::string_t refVal_setErrorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errorMessage"))), refVal_setErrorMessage );
        setErrorMessage(refVal_setErrorMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isDeleted"))))
    {
        bool refVal_setIsDeleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isDeleted"))), refVal_setIsDeleted );
        setIsDeleted(refVal_setIsDeleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdTime"))))
    {
        utility::datetime refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdTime"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creatorUserId"))))
    {
        utility::string_t refVal_setCreatorUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creatorUserId"))), refVal_setCreatorUserId );
        setCreatorUserId(refVal_setCreatorUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("editedTime"))))
    {
        utility::datetime refVal_setEditedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("editedTime"))), refVal_setEditedTime );
        setEditedTime(refVal_setEditedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("editorUserId"))))
    {
        utility::string_t refVal_setEditorUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("editorUserId"))), refVal_setEditorUserId );
        setEditorUserId(refVal_setEditorUserId);
    }
    return ok;
}

utility::string_t FileVM::getName() const
{
    return m_name;
}

void FileVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool FileVM::nameIsSet() const
{
    return m_nameIsSet;
}

void FileVM::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t FileVM::getParentId() const
{
    return m_parentId;
}

void FileVM::setParentId(const utility::string_t& value)
{
    m_parentId = value;
    m_parentIdIsSet = true;
}

bool FileVM::parentIdIsSet() const
{
    return m_parentIdIsSet;
}

void FileVM::unsetparentId()
{
    m_parentIdIsSet = false;
}
std::vector<utility::string_t>& FileVM::getTags()
{
    return m_tags;
}

void FileVM::setTags(const std::vector<utility::string_t>& value)
{
    m_tags = value;
    m_tagsIsSet = true;
}

bool FileVM::tagsIsSet() const
{
    return m_tagsIsSet;
}

void FileVM::unsettags()
{
    m_tagsIsSet = false;
}
utility::string_t FileVM::getIcon() const
{
    return m_icon;
}

void FileVM::setIcon(const utility::string_t& value)
{
    m_icon = value;
    m_iconIsSet = true;
}

bool FileVM::iconIsSet() const
{
    return m_iconIsSet;
}

void FileVM::unseticon()
{
    m_iconIsSet = false;
}
std::shared_ptr<FileType> FileVM::getType() const
{
    return m_type;
}

void FileVM::setType(const std::shared_ptr<FileType>& value)
{
    m_type = value;
    m_typeIsSet = true;
}

bool FileVM::typeIsSet() const
{
    return m_typeIsSet;
}

void FileVM::unsettype()
{
    m_typeIsSet = false;
}
int64_t FileVM::getSize() const
{
    return m_size;
}

void FileVM::setSize(int64_t value)
{
    m_size = value;
    m_sizeIsSet = true;
}

bool FileVM::sizeIsSet() const
{
    return m_sizeIsSet;
}

void FileVM::unsetsize()
{
    m_sizeIsSet = false;
}
utility::string_t FileVM::getSubscriptionId() const
{
    return m_subscriptionId;
}

void FileVM::setSubscriptionId(const utility::string_t& value)
{
    m_subscriptionId = value;
    m_subscriptionIdIsSet = true;
}

bool FileVM::subscriptionIdIsSet() const
{
    return m_subscriptionIdIsSet;
}

void FileVM::unsetsubscriptionId()
{
    m_subscriptionIdIsSet = false;
}
std::shared_ptr<FileStatus> FileVM::getStatus() const
{
    return m_status;
}

void FileVM::setStatus(const std::shared_ptr<FileStatus>& value)
{
    m_status = value;
    m_statusIsSet = true;
}

bool FileVM::statusIsSet() const
{
    return m_statusIsSet;
}

void FileVM::unsetstatus()
{
    m_statusIsSet = false;
}
std::shared_ptr<FileStatusReason> FileVM::getStatusReason() const
{
    return m_statusReason;
}

void FileVM::setStatusReason(const std::shared_ptr<FileStatusReason>& value)
{
    m_statusReason = value;
    m_statusReasonIsSet = true;
}

bool FileVM::statusReasonIsSet() const
{
    return m_statusReasonIsSet;
}

void FileVM::unsetstatusReason()
{
    m_statusReasonIsSet = false;
}
utility::string_t FileVM::getErrorMessage() const
{
    return m_errorMessage;
}

void FileVM::setErrorMessage(const utility::string_t& value)
{
    m_errorMessage = value;
    m_errorMessageIsSet = true;
}

bool FileVM::errorMessageIsSet() const
{
    return m_errorMessageIsSet;
}

void FileVM::unseterrorMessage()
{
    m_errorMessageIsSet = false;
}
bool FileVM::isIsDeleted() const
{
    return m_isDeleted;
}

void FileVM::setIsDeleted(bool value)
{
    m_isDeleted = value;
    m_isDeletedIsSet = true;
}

bool FileVM::isDeletedIsSet() const
{
    return m_isDeletedIsSet;
}

void FileVM::unsetisDeleted()
{
    m_isDeletedIsSet = false;
}
}
}
}


