/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OutputFileVM.h"

namespace fastreport {
namespace cloud {
namespace models {



OutputFileVM::OutputFileVM()
{
    m_fileName = utility::conversions::to_string_t("");
    m_fileNameIsSet = false;
    m_folderId = utility::conversions::to_string_t("");
    m_folderIdIsSet = false;
    m_typeIsSet = false;
    m_isTemporary = false;
    m_isTemporaryIsSet = false;
}

OutputFileVM::~OutputFileVM()
{
}

void OutputFileVM::validate()
{
    // TODO: implement validation
}

web::json::value OutputFileVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_fileNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fileName"))] = ModelBase::toJson(m_fileName);
    }
    if(m_folderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("folderId"))] = ModelBase::toJson(m_folderId);
    }
    if(m_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_type);
    }
    if(m_isTemporaryIsSet)
    {
        val[utility::conversions::to_string_t(U("isTemporary"))] = ModelBase::toJson(m_isTemporary);
    }

    return val;
}

bool OutputFileVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("fileName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fileName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFileName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileName);
            setFileName(refVal_setFileName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("folderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("folderId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFolderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFolderId);
            setFolderId(refVal_setFolderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FileKind> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isTemporary"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isTemporary")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsTemporary;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsTemporary);
            setIsTemporary(refVal_setIsTemporary);
        }
    }
    return ok;
}

void OutputFileVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_fileNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fileName")), m_fileName));
    }
    if(m_folderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("folderId")), m_folderId));
    }
    if(m_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_type));
    }
    if(m_isTemporaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isTemporary")), m_isTemporary));
    }
}

bool OutputFileVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("fileName"))))
    {
        utility::string_t refVal_setFileName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fileName"))), refVal_setFileName );
        setFileName(refVal_setFileName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("folderId"))))
    {
        utility::string_t refVal_setFolderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("folderId"))), refVal_setFolderId );
        setFolderId(refVal_setFolderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<FileKind> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isTemporary"))))
    {
        bool refVal_setIsTemporary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isTemporary"))), refVal_setIsTemporary );
        setIsTemporary(refVal_setIsTemporary);
    }
    return ok;
}

utility::string_t OutputFileVM::getFileName() const
{
    return m_fileName;
}

void OutputFileVM::setFileName(const utility::string_t& value)
{
    m_fileName = value;
    m_fileNameIsSet = true;
}

bool OutputFileVM::fileNameIsSet() const
{
    return m_fileNameIsSet;
}

void OutputFileVM::unsetfileName()
{
    m_fileNameIsSet = false;
}
utility::string_t OutputFileVM::getFolderId() const
{
    return m_folderId;
}

void OutputFileVM::setFolderId(const utility::string_t& value)
{
    m_folderId = value;
    m_folderIdIsSet = true;
}

bool OutputFileVM::folderIdIsSet() const
{
    return m_folderIdIsSet;
}

void OutputFileVM::unsetfolderId()
{
    m_folderIdIsSet = false;
}
std::shared_ptr<FileKind> OutputFileVM::getType() const
{
    return m_type;
}

void OutputFileVM::setType(const std::shared_ptr<FileKind>& value)
{
    m_type = value;
    m_typeIsSet = true;
}

bool OutputFileVM::typeIsSet() const
{
    return m_typeIsSet;
}

void OutputFileVM::unsettype()
{
    m_typeIsSet = false;
}
bool OutputFileVM::isIsTemporary() const
{
    return m_isTemporary;
}

void OutputFileVM::setIsTemporary(bool value)
{
    m_isTemporary = value;
    m_isTemporaryIsSet = true;
}

bool OutputFileVM::isTemporaryIsSet() const
{
    return m_isTemporaryIsSet;
}

void OutputFileVM::unsetisTemporary()
{
    m_isTemporaryIsSet = false;
}
}
}
}


