/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateApiKeyVM.h"

namespace fastreport {
namespace cloud {
namespace models {



CreateApiKeyVM::CreateApiKeyVM()
{
    m_description = utility::conversions::to_string_t("");
    m_descriptionIsSet = false;
    m_expired = utility::datetime();
    m_expiredIsSet = false;
}

CreateApiKeyVM::~CreateApiKeyVM()
{
}

void CreateApiKeyVM::validate()
{
    // TODO: implement validation
}

web::json::value CreateApiKeyVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_description);
    }
    if(m_expiredIsSet)
    {
        val[utility::conversions::to_string_t(U("expired"))] = ModelBase::toJson(m_expired);
    }

    return val;
}

bool CreateApiKeyVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expired"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expired")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpired;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpired);
            setExpired(refVal_setExpired);
        }
    }
    return ok;
}

void CreateApiKeyVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_description));
    }
    if(m_expiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expired")), m_expired));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool CreateApiKeyVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expired"))))
    {
        utility::datetime refVal_setExpired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expired"))), refVal_setExpired );
        setExpired(refVal_setExpired);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t CreateApiKeyVM::getDescription() const
{
    return m_description;
}

void CreateApiKeyVM::setDescription(const utility::string_t& value)
{
    m_description = value;
    m_descriptionIsSet = true;
}

bool CreateApiKeyVM::descriptionIsSet() const
{
    return m_descriptionIsSet;
}

void CreateApiKeyVM::unsetdescription()
{
    m_descriptionIsSet = false;
}
utility::datetime CreateApiKeyVM::getExpired() const
{
    return m_expired;
}

void CreateApiKeyVM::setExpired(const utility::datetime& value)
{
    m_expired = value;
    m_expiredIsSet = true;
}

bool CreateApiKeyVM::expiredIsSet() const
{
    return m_expiredIsSet;
}

void CreateApiKeyVM::unsetexpired()
{
    m_expiredIsSet = false;
}
}
}
}


