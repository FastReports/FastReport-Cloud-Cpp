/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DataSourcePermission.h"

namespace fastreport {
namespace cloud {
namespace models {



DataSourcePermission::DataSourcePermission()
{
}

DataSourcePermission::~DataSourcePermission()
{
}

void DataSourcePermission::validate()
{
    // TODO: implement validation
}

web::json::value DataSourcePermission::toJson() const
{

    web::json::value val = web::json::value::object();
    

    return val;
}

bool DataSourcePermission::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    return ok;
}

void DataSourcePermission::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_createIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("create")), m_create));
    }
    if(m_r_deleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delete")), m_r_delete));
    }
    if(m_executeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("execute")), m_execute));
    }
    if(m_getIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("get")), m_get));
    }
    if(m_updateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("update")), m_update));
    }
    if(m_administrateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("administrate")), m_administrate));
    }
}

bool DataSourcePermission::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("create"))))
    {
        std::shared_ptr<DataSourceCreate> refVal_setCreate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("create"))), refVal_setCreate );
        setCreate(refVal_setCreate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delete"))))
    {
        std::shared_ptr<DataSourceDelete> refVal_setRDelete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delete"))), refVal_setRDelete );
        setRDelete(refVal_setRDelete);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("execute"))))
    {
        std::shared_ptr<DataSourceExecute> refVal_setExecute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("execute"))), refVal_setExecute );
        setExecute(refVal_setExecute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("get"))))
    {
        std::shared_ptr<DataSourceGet> refVal_setGet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("get"))), refVal_setGet );
        setGet(refVal_setGet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("update"))))
    {
        std::shared_ptr<DataSourceUpdate> refVal_setUpdate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("update"))), refVal_setUpdate );
        setUpdate(refVal_setUpdate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("administrate"))))
    {
        std::shared_ptr<DataSourceAdministrate> refVal_setAdministrate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("administrate"))), refVal_setAdministrate );
        setAdministrate(refVal_setAdministrate);
    }
    return ok;
}

}
}
}


