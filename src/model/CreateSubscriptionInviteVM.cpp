/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateSubscriptionInviteVM.h"

namespace fastreport {
namespace cloud {
namespace models {



CreateSubscriptionInviteVM::CreateSubscriptionInviteVM()
{
    m_usages = 0L;
    m_usagesIsSet = false;
    m_durable = false;
    m_durableIsSet = false;
    m_expiredDate = utility::datetime();
    m_expiredDateIsSet = false;
}

CreateSubscriptionInviteVM::~CreateSubscriptionInviteVM()
{
}

void CreateSubscriptionInviteVM::validate()
{
    // TODO: implement validation
}

web::json::value CreateSubscriptionInviteVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_usagesIsSet)
    {
        val[utility::conversions::to_string_t(U("usages"))] = ModelBase::toJson(m_usages);
    }
    if(m_durableIsSet)
    {
        val[utility::conversions::to_string_t(U("durable"))] = ModelBase::toJson(m_durable);
    }
    if(m_expiredDateIsSet)
    {
        val[utility::conversions::to_string_t(U("expiredDate"))] = ModelBase::toJson(m_expiredDate);
    }

    return val;
}

bool CreateSubscriptionInviteVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("usages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("usages")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setUsages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsages);
            setUsages(refVal_setUsages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("durable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("durable")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDurable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDurable);
            setDurable(refVal_setDurable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiredDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiredDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiredDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiredDate);
            setExpiredDate(refVal_setExpiredDate);
        }
    }
    return ok;
}

void CreateSubscriptionInviteVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_usagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("usages")), m_usages));
    }
    if(m_durableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("durable")), m_durable));
    }
    if(m_expiredDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiredDate")), m_expiredDate));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool CreateSubscriptionInviteVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("usages"))))
    {
        int64_t refVal_setUsages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("usages"))), refVal_setUsages );
        setUsages(refVal_setUsages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("durable"))))
    {
        bool refVal_setDurable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("durable"))), refVal_setDurable );
        setDurable(refVal_setDurable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiredDate"))))
    {
        utility::datetime refVal_setExpiredDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiredDate"))), refVal_setExpiredDate );
        setExpiredDate(refVal_setExpiredDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

int64_t CreateSubscriptionInviteVM::getUsages() const
{
    return m_usages;
}

void CreateSubscriptionInviteVM::setUsages(int64_t value)
{
    m_usages = value;
    m_usagesIsSet = true;
}

bool CreateSubscriptionInviteVM::usagesIsSet() const
{
    return m_usagesIsSet;
}

void CreateSubscriptionInviteVM::unsetusages()
{
    m_usagesIsSet = false;
}
bool CreateSubscriptionInviteVM::isDurable() const
{
    return m_durable;
}

void CreateSubscriptionInviteVM::setDurable(bool value)
{
    m_durable = value;
    m_durableIsSet = true;
}

bool CreateSubscriptionInviteVM::durableIsSet() const
{
    return m_durableIsSet;
}

void CreateSubscriptionInviteVM::unsetdurable()
{
    m_durableIsSet = false;
}
utility::datetime CreateSubscriptionInviteVM::getExpiredDate() const
{
    return m_expiredDate;
}

void CreateSubscriptionInviteVM::setExpiredDate(const utility::datetime& value)
{
    m_expiredDate = value;
    m_expiredDateIsSet = true;
}

bool CreateSubscriptionInviteVM::expiredDateIsSet() const
{
    return m_expiredDateIsSet;
}

void CreateSubscriptionInviteVM::unsetexpiredDate()
{
    m_expiredDateIsSet = false;
}
}
}
}


