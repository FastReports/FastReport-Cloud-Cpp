/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SubscriptionPeriodVM.h"

namespace fastreport {
namespace cloud {
namespace models {



SubscriptionPeriodVM::SubscriptionPeriodVM()
{
    m_startTime = utility::datetime();
    m_startTimeIsSet = false;
    m_endTime = utility::datetime();
    m_endTimeIsSet = false;
    m_planIsSet = false;
}

SubscriptionPeriodVM::~SubscriptionPeriodVM()
{
}

void SubscriptionPeriodVM::validate()
{
    // TODO: implement validation
}

web::json::value SubscriptionPeriodVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_startTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("startTime"))] = ModelBase::toJson(m_startTime);
    }
    if(m_endTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("endTime"))] = ModelBase::toJson(m_endTime);
    }
    if(m_planIsSet)
    {
        val[utility::conversions::to_string_t(U("plan"))] = ModelBase::toJson(m_plan);
    }

    return val;
}

bool SubscriptionPeriodVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("startTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setStartTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartTime);
            setStartTime(refVal_setStartTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("endTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("endTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEndTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndTime);
            setEndTime(refVal_setEndTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("plan"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("plan")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscriptionPlanVM> refVal_setPlan;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlan);
            setPlan(refVal_setPlan);
        }
    }
    return ok;
}

void SubscriptionPeriodVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_startTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startTime")), m_startTime));
    }
    if(m_endTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("endTime")), m_endTime));
    }
    if(m_planIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("plan")), m_plan));
    }
}

bool SubscriptionPeriodVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("startTime"))))
    {
        utility::datetime refVal_setStartTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startTime"))), refVal_setStartTime );
        setStartTime(refVal_setStartTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("endTime"))))
    {
        utility::datetime refVal_setEndTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("endTime"))), refVal_setEndTime );
        setEndTime(refVal_setEndTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("plan"))))
    {
        std::shared_ptr<SubscriptionPlanVM> refVal_setPlan;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("plan"))), refVal_setPlan );
        setPlan(refVal_setPlan);
    }
    return ok;
}

utility::datetime SubscriptionPeriodVM::getStartTime() const
{
    return m_startTime;
}

void SubscriptionPeriodVM::setStartTime(const utility::datetime& value)
{
    m_startTime = value;
    m_startTimeIsSet = true;
}

bool SubscriptionPeriodVM::startTimeIsSet() const
{
    return m_startTimeIsSet;
}

void SubscriptionPeriodVM::unsetstartTime()
{
    m_startTimeIsSet = false;
}
utility::datetime SubscriptionPeriodVM::getEndTime() const
{
    return m_endTime;
}

void SubscriptionPeriodVM::setEndTime(const utility::datetime& value)
{
    m_endTime = value;
    m_endTimeIsSet = true;
}

bool SubscriptionPeriodVM::endTimeIsSet() const
{
    return m_endTimeIsSet;
}

void SubscriptionPeriodVM::unsetendTime()
{
    m_endTimeIsSet = false;
}
std::shared_ptr<SubscriptionPlanVM> SubscriptionPeriodVM::getPlan() const
{
    return m_plan;
}

void SubscriptionPeriodVM::setPlan(const std::shared_ptr<SubscriptionPlanVM>& value)
{
    m_plan = value;
    m_planIsSet = true;
}

bool SubscriptionPeriodVM::planIsSet() const
{
    return m_planIsSet;
}

void SubscriptionPeriodVM::unsetplan()
{
    m_planIsSet = false;
}
}
}
}


