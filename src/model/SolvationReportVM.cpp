/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SolvationReportVM.h"

namespace fastreport {
namespace cloud {
namespace models {



SolvationReportVM::SolvationReportVM()
{
    m_solvedProblemsIsSet = false;
}

SolvationReportVM::~SolvationReportVM()
{
}

void SolvationReportVM::validate()
{
    // TODO: implement validation
}

web::json::value SolvationReportVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_solvedProblemsIsSet)
    {
        val[utility::conversions::to_string_t(U("solvedProblems"))] = ModelBase::toJson(m_solvedProblems);
    }

    return val;
}

bool SolvationReportVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("solvedProblems"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("solvedProblems")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, int32_t> refVal_setSolvedProblems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSolvedProblems);
            setSolvedProblems(refVal_setSolvedProblems);
        }
    }
    return ok;
}

void SolvationReportVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_solvedProblemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("solvedProblems")), m_solvedProblems));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool SolvationReportVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("solvedProblems"))))
    {
        std::map<utility::string_t, int32_t> refVal_setSolvedProblems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("solvedProblems"))), refVal_setSolvedProblems );
        setSolvedProblems(refVal_setSolvedProblems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

std::map<utility::string_t, int32_t>& SolvationReportVM::getSolvedProblems()
{
    return m_solvedProblems;
}

void SolvationReportVM::setSolvedProblems(std::map<utility::string_t, int32_t> value)
{
    m_solvedProblems = value;
    m_solvedProblemsIsSet = true;
}

bool SolvationReportVM::solvedProblemsIsSet() const
{
    return m_solvedProblemsIsSet;
}

void SolvationReportVM::unsetsolvedProblems()
{
    m_solvedProblemsIsSet = false;
}
}
}
}


