/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FolderSizeVM.h"

namespace fastreport {
namespace cloud {
namespace models {



FolderSizeVM::FolderSizeVM()
{
    m_size = 0L;
    m_sizeIsSet = false;
    m_realSize = 0L;
    m_realSizeIsSet = false;
    m_documentsCount = 0L;
    m_documentsCountIsSet = false;
}

FolderSizeVM::~FolderSizeVM()
{
}

void FolderSizeVM::validate()
{
    // TODO: implement validation
}

web::json::value FolderSizeVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("size"))] = ModelBase::toJson(m_size);
    }
    if(m_realSizeIsSet)
    {
        val[utility::conversions::to_string_t(U("realSize"))] = ModelBase::toJson(m_realSize);
    }
    if(m_documentsCountIsSet)
    {
        val[utility::conversions::to_string_t(U("documentsCount"))] = ModelBase::toJson(m_documentsCount);
    }

    return val;
}

bool FolderSizeVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("realSize"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("realSize")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRealSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRealSize);
            setRealSize(refVal_setRealSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documentsCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentsCount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setDocumentsCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDocumentsCount);
            setDocumentsCount(refVal_setDocumentsCount);
        }
    }
    return ok;
}

void FolderSizeVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size")), m_size));
    }
    if(m_realSizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("realSize")), m_realSize));
    }
    if(m_documentsCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentsCount")), m_documentsCount));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool FolderSizeVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("size"))))
    {
        int64_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("realSize"))))
    {
        int64_t refVal_setRealSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("realSize"))), refVal_setRealSize );
        setRealSize(refVal_setRealSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documentsCount"))))
    {
        int64_t refVal_setDocumentsCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentsCount"))), refVal_setDocumentsCount );
        setDocumentsCount(refVal_setDocumentsCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

int64_t FolderSizeVM::getSize() const
{
    return m_size;
}

void FolderSizeVM::setSize(int64_t value)
{
    m_size = value;
    m_sizeIsSet = true;
}

bool FolderSizeVM::sizeIsSet() const
{
    return m_sizeIsSet;
}

void FolderSizeVM::unsetsize()
{
    m_sizeIsSet = false;
}
int64_t FolderSizeVM::getRealSize() const
{
    return m_realSize;
}

void FolderSizeVM::setRealSize(int64_t value)
{
    m_realSize = value;
    m_realSizeIsSet = true;
}

bool FolderSizeVM::realSizeIsSet() const
{
    return m_realSizeIsSet;
}

void FolderSizeVM::unsetrealSize()
{
    m_realSizeIsSet = false;
}
int64_t FolderSizeVM::getDocumentsCount() const
{
    return m_documentsCount;
}

void FolderSizeVM::setDocumentsCount(int64_t value)
{
    m_documentsCount = value;
    m_documentsCountIsSet = true;
}

bool FolderSizeVM::documentsCountIsSet() const
{
    return m_documentsCountIsSet;
}

void FolderSizeVM::unsetdocumentsCount()
{
    m_documentsCountIsSet = false;
}
}
}
}


