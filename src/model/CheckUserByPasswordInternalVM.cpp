/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CheckUserByPasswordInternalVM.h"

namespace fastreport {
namespace cloud {
namespace models {



CheckUserByPasswordInternalVM::CheckUserByPasswordInternalVM()
{
    m_email = utility::conversions::to_string_t("");
    m_emailIsSet = false;
    m_password = utility::conversions::to_string_t("");
    m_passwordIsSet = false;
}

CheckUserByPasswordInternalVM::~CheckUserByPasswordInternalVM()
{
}

void CheckUserByPasswordInternalVM::validate()
{
    // TODO: implement validation
}

web::json::value CheckUserByPasswordInternalVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_emailIsSet)
    {
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_email);
    }
    if(m_passwordIsSet)
    {
        val[utility::conversions::to_string_t(U("password"))] = ModelBase::toJson(m_password);
    }

    return val;
}

bool CheckUserByPasswordInternalVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmail);
            setEmail(refVal_setEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("password"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("password")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPassword);
            setPassword(refVal_setPassword);
        }
    }
    return ok;
}

void CheckUserByPasswordInternalVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_email));
    }
    if(m_passwordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("password")), m_password));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool CheckUserByPasswordInternalVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_setEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_setEmail );
        setEmail(refVal_setEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("password"))))
    {
        utility::string_t refVal_setPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("password"))), refVal_setPassword );
        setPassword(refVal_setPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t CheckUserByPasswordInternalVM::getEmail() const
{
    return m_email;
}

void CheckUserByPasswordInternalVM::setEmail(const utility::string_t& value)
{
    m_email = value;
    m_emailIsSet = true;
}

bool CheckUserByPasswordInternalVM::emailIsSet() const
{
    return m_emailIsSet;
}

void CheckUserByPasswordInternalVM::unsetemail()
{
    m_emailIsSet = false;
}
utility::string_t CheckUserByPasswordInternalVM::getPassword() const
{
    return m_password;
}

void CheckUserByPasswordInternalVM::setPassword(const utility::string_t& value)
{
    m_password = value;
    m_passwordIsSet = true;
}

bool CheckUserByPasswordInternalVM::passwordIsSet() const
{
    return m_passwordIsSet;
}

void CheckUserByPasswordInternalVM::unsetpassword()
{
    m_passwordIsSet = false;
}
}
}
}


