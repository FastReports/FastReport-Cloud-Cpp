/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AuthConfigVM.h"

namespace fastreport {
namespace cloud {
namespace models {



AuthConfigVM::AuthConfigVM()
{
    m_useLocal = false;
    m_useLocalIsSet = false;
    m_useOpenId = false;
    m_useOpenIdIsSet = false;
    m_authority = utility::conversions::to_string_t("");
    m_authorityIsSet = false;
}

AuthConfigVM::~AuthConfigVM()
{
}

void AuthConfigVM::validate()
{
    // TODO: implement validation
}

web::json::value AuthConfigVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_useLocalIsSet)
    {
        val[utility::conversions::to_string_t(U("useLocal"))] = ModelBase::toJson(m_useLocal);
    }
    if(m_useOpenIdIsSet)
    {
        val[utility::conversions::to_string_t(U("useOpenId"))] = ModelBase::toJson(m_useOpenId);
    }
    if(m_authorityIsSet)
    {
        val[utility::conversions::to_string_t(U("authority"))] = ModelBase::toJson(m_authority);
    }

    return val;
}

bool AuthConfigVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("useLocal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("useLocal")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUseLocal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUseLocal);
            setUseLocal(refVal_setUseLocal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("useOpenId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("useOpenId")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUseOpenId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUseOpenId);
            setUseOpenId(refVal_setUseOpenId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("authority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("authority")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAuthority;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuthority);
            setAuthority(refVal_setAuthority);
        }
    }
    return ok;
}

void AuthConfigVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_useLocalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("useLocal")), m_useLocal));
    }
    if(m_useOpenIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("useOpenId")), m_useOpenId));
    }
    if(m_authorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("authority")), m_authority));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool AuthConfigVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("useLocal"))))
    {
        bool refVal_setUseLocal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("useLocal"))), refVal_setUseLocal );
        setUseLocal(refVal_setUseLocal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("useOpenId"))))
    {
        bool refVal_setUseOpenId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("useOpenId"))), refVal_setUseOpenId );
        setUseOpenId(refVal_setUseOpenId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("authority"))))
    {
        utility::string_t refVal_setAuthority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("authority"))), refVal_setAuthority );
        setAuthority(refVal_setAuthority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

bool AuthConfigVM::isUseLocal() const
{
    return m_useLocal;
}

void AuthConfigVM::setUseLocal(bool value)
{
    m_useLocal = value;
    m_useLocalIsSet = true;
}

bool AuthConfigVM::useLocalIsSet() const
{
    return m_useLocalIsSet;
}

void AuthConfigVM::unsetuseLocal()
{
    m_useLocalIsSet = false;
}
bool AuthConfigVM::isUseOpenId() const
{
    return m_useOpenId;
}

void AuthConfigVM::setUseOpenId(bool value)
{
    m_useOpenId = value;
    m_useOpenIdIsSet = true;
}

bool AuthConfigVM::useOpenIdIsSet() const
{
    return m_useOpenIdIsSet;
}

void AuthConfigVM::unsetuseOpenId()
{
    m_useOpenIdIsSet = false;
}
utility::string_t AuthConfigVM::getAuthority() const
{
    return m_authority;
}

void AuthConfigVM::setAuthority(const utility::string_t& value)
{
    m_authority = value;
    m_authorityIsSet = true;
}

bool AuthConfigVM::authorityIsSet() const
{
    return m_authorityIsSet;
}

void AuthConfigVM::unsetauthority()
{
    m_authorityIsSet = false;
}
}
}
}


