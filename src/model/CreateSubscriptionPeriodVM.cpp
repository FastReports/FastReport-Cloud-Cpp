/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateSubscriptionPeriodVM.h"

namespace fastreport {
namespace cloud {
namespace models {



CreateSubscriptionPeriodVM::CreateSubscriptionPeriodVM()
{
    m_planId = utility::conversions::to_string_t("");
    m_planIdIsSet = false;
    m_start = utility::datetime();
    m_startIsSet = false;
    m_end = utility::datetime();
    m_endIsSet = false;
}

CreateSubscriptionPeriodVM::~CreateSubscriptionPeriodVM()
{
}

void CreateSubscriptionPeriodVM::validate()
{
    // TODO: implement validation
}

web::json::value CreateSubscriptionPeriodVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_planIdIsSet)
    {
        val[utility::conversions::to_string_t(U("planId"))] = ModelBase::toJson(m_planId);
    }
    if(m_startIsSet)
    {
        val[utility::conversions::to_string_t(U("start"))] = ModelBase::toJson(m_start);
    }
    if(m_endIsSet)
    {
        val[utility::conversions::to_string_t(U("end"))] = ModelBase::toJson(m_end);
    }

    return val;
}

bool CreateSubscriptionPeriodVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("planId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("planId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlanId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlanId);
            setPlanId(refVal_setPlanId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStart);
            setStart(refVal_setStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnd);
            setEnd(refVal_setEnd);
        }
    }
    return ok;
}

void CreateSubscriptionPeriodVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_planIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("planId")), m_planId));
    }
    if(m_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start")), m_start));
    }
    if(m_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end")), m_end));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool CreateSubscriptionPeriodVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("planId"))))
    {
        utility::string_t refVal_setPlanId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("planId"))), refVal_setPlanId );
        setPlanId(refVal_setPlanId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start"))))
    {
        utility::datetime refVal_setStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start"))), refVal_setStart );
        setStart(refVal_setStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end"))))
    {
        utility::datetime refVal_setEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end"))), refVal_setEnd );
        setEnd(refVal_setEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t CreateSubscriptionPeriodVM::getPlanId() const
{
    return m_planId;
}

void CreateSubscriptionPeriodVM::setPlanId(const utility::string_t& value)
{
    m_planId = value;
    m_planIdIsSet = true;
}

bool CreateSubscriptionPeriodVM::planIdIsSet() const
{
    return m_planIdIsSet;
}

void CreateSubscriptionPeriodVM::unsetplanId()
{
    m_planIdIsSet = false;
}
utility::datetime CreateSubscriptionPeriodVM::getStart() const
{
    return m_start;
}

void CreateSubscriptionPeriodVM::setStart(const utility::datetime& value)
{
    m_start = value;
    m_startIsSet = true;
}

bool CreateSubscriptionPeriodVM::startIsSet() const
{
    return m_startIsSet;
}

void CreateSubscriptionPeriodVM::unsetstart()
{
    m_startIsSet = false;
}
utility::datetime CreateSubscriptionPeriodVM::getEnd() const
{
    return m_end;
}

void CreateSubscriptionPeriodVM::setEnd(const utility::datetime& value)
{
    m_end = value;
    m_endIsSet = true;
}

bool CreateSubscriptionPeriodVM::endIsSet() const
{
    return m_endIsSet;
}

void CreateSubscriptionPeriodVM::unsetend()
{
    m_endIsSet = false;
}
}
}
}


