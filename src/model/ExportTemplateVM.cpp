/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportTemplateVM.h"

namespace fastreport {
namespace cloud {
namespace models {



ExportTemplateVM::ExportTemplateVM()
{
    m_fileName = utility::conversions::to_string_t("");
    m_fileNameIsSet = false;
    m_folderId = utility::conversions::to_string_t("");
    m_folderIdIsSet = false;
    m_locale = utility::conversions::to_string_t("");
    m_localeIsSet = false;
    m_pagesCount = 0;
    m_pagesCountIsSet = false;
    m_formatIsSet = false;
    m_exportParametersIsSet = false;
    m_reportParametersIsSet = false;
}

ExportTemplateVM::~ExportTemplateVM()
{
}

void ExportTemplateVM::validate()
{
    // TODO: implement validation
}

web::json::value ExportTemplateVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_fileNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fileName"))] = ModelBase::toJson(m_fileName);
    }
    if(m_folderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("folderId"))] = ModelBase::toJson(m_folderId);
    }
    if(m_localeIsSet)
    {
        val[utility::conversions::to_string_t(U("locale"))] = ModelBase::toJson(m_locale);
    }
    if(m_pagesCountIsSet)
    {
        val[utility::conversions::to_string_t(U("pagesCount"))] = ModelBase::toJson(m_pagesCount);
    }
    if(m_formatIsSet)
    {
        val[utility::conversions::to_string_t(U("format"))] = ModelBase::toJson(m_format);
    }
    if(m_exportParametersIsSet)
    {
        val[utility::conversions::to_string_t(U("exportParameters"))] = ModelBase::toJson(m_exportParameters);
    }
    if(m_reportParametersIsSet)
    {
        val[utility::conversions::to_string_t(U("reportParameters"))] = ModelBase::toJson(m_reportParameters);
    }

    return val;
}

bool ExportTemplateVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("fileName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fileName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFileName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileName);
            setFileName(refVal_setFileName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("folderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("folderId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFolderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFolderId);
            setFolderId(refVal_setFolderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("locale"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("locale")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLocale;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocale);
            setLocale(refVal_setLocale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pagesCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pagesCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPagesCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPagesCount);
            setPagesCount(refVal_setPagesCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("format"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("format")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ExportFormat> refVal_setFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormat);
            setFormat(refVal_setFormat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exportParameters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exportParameters")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setExportParameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExportParameters);
            setExportParameters(refVal_setExportParameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reportParameters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reportParameters")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setReportParameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportParameters);
            setReportParameters(refVal_setReportParameters);
        }
    }
    return ok;
}

void ExportTemplateVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_fileNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fileName")), m_fileName));
    }
    if(m_folderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("folderId")), m_folderId));
    }
    if(m_localeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("locale")), m_locale));
    }
    if(m_pagesCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pagesCount")), m_pagesCount));
    }
    if(m_formatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("format")), m_format));
    }
    if(m_exportParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exportParameters")), m_exportParameters));
    }
    if(m_reportParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reportParameters")), m_reportParameters));
    }
}

bool ExportTemplateVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("fileName"))))
    {
        utility::string_t refVal_setFileName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fileName"))), refVal_setFileName );
        setFileName(refVal_setFileName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("folderId"))))
    {
        utility::string_t refVal_setFolderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("folderId"))), refVal_setFolderId );
        setFolderId(refVal_setFolderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("locale"))))
    {
        utility::string_t refVal_setLocale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("locale"))), refVal_setLocale );
        setLocale(refVal_setLocale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pagesCount"))))
    {
        int32_t refVal_setPagesCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pagesCount"))), refVal_setPagesCount );
        setPagesCount(refVal_setPagesCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("format"))))
    {
        std::shared_ptr<ExportFormat> refVal_setFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("format"))), refVal_setFormat );
        setFormat(refVal_setFormat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exportParameters"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setExportParameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exportParameters"))), refVal_setExportParameters );
        setExportParameters(refVal_setExportParameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reportParameters"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setReportParameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reportParameters"))), refVal_setReportParameters );
        setReportParameters(refVal_setReportParameters);
    }
    return ok;
}

utility::string_t ExportTemplateVM::getFileName() const
{
    return m_fileName;
}

void ExportTemplateVM::setFileName(const utility::string_t& value)
{
    m_fileName = value;
    m_fileNameIsSet = true;
}

bool ExportTemplateVM::fileNameIsSet() const
{
    return m_fileNameIsSet;
}

void ExportTemplateVM::unsetfileName()
{
    m_fileNameIsSet = false;
}
utility::string_t ExportTemplateVM::getFolderId() const
{
    return m_folderId;
}

void ExportTemplateVM::setFolderId(const utility::string_t& value)
{
    m_folderId = value;
    m_folderIdIsSet = true;
}

bool ExportTemplateVM::folderIdIsSet() const
{
    return m_folderIdIsSet;
}

void ExportTemplateVM::unsetfolderId()
{
    m_folderIdIsSet = false;
}
utility::string_t ExportTemplateVM::getLocale() const
{
    return m_locale;
}

void ExportTemplateVM::setLocale(const utility::string_t& value)
{
    m_locale = value;
    m_localeIsSet = true;
}

bool ExportTemplateVM::localeIsSet() const
{
    return m_localeIsSet;
}

void ExportTemplateVM::unsetlocale()
{
    m_localeIsSet = false;
}
int32_t ExportTemplateVM::getPagesCount() const
{
    return m_pagesCount;
}

void ExportTemplateVM::setPagesCount(int32_t value)
{
    m_pagesCount = value;
    m_pagesCountIsSet = true;
}

bool ExportTemplateVM::pagesCountIsSet() const
{
    return m_pagesCountIsSet;
}

void ExportTemplateVM::unsetpagesCount()
{
    m_pagesCountIsSet = false;
}
std::shared_ptr<ExportFormat> ExportTemplateVM::getFormat() const
{
    return m_format;
}

void ExportTemplateVM::setFormat(const std::shared_ptr<ExportFormat>& value)
{
    m_format = value;
    m_formatIsSet = true;
}

bool ExportTemplateVM::formatIsSet() const
{
    return m_formatIsSet;
}

void ExportTemplateVM::unsetformat()
{
    m_formatIsSet = false;
}
std::map<utility::string_t, utility::string_t>& ExportTemplateVM::getExportParameters()
{
    return m_exportParameters;
}

void ExportTemplateVM::setExportParameters(const std::map<utility::string_t, utility::string_t>& value)
{
    m_exportParameters = value;
    m_exportParametersIsSet = true;
}

bool ExportTemplateVM::exportParametersIsSet() const
{
    return m_exportParametersIsSet;
}

void ExportTemplateVM::unsetexportParameters()
{
    m_exportParametersIsSet = false;
}
std::map<utility::string_t, utility::string_t>& ExportTemplateVM::getReportParameters()
{
    return m_reportParameters;
}

void ExportTemplateVM::setReportParameters(const std::map<utility::string_t, utility::string_t>& value)
{
    m_reportParameters = value;
    m_reportParametersIsSet = true;
}

bool ExportTemplateVM::reportParametersIsSet() const
{
    return m_reportParametersIsSet;
}

void ExportTemplateVM::unsetreportParameters()
{
    m_reportParametersIsSet = false;
}
}
}
}


