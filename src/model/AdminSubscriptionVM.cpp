/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdminSubscriptionVM.h"

namespace fastreport {
namespace cloud {
namespace models {



AdminSubscriptionVM::AdminSubscriptionVM()
{
    m_defaultPermissionsIsSet = false;
    m_ownerId = utility::conversions::to_string_t("");
    m_ownerIdIsSet = false;
}

AdminSubscriptionVM::~AdminSubscriptionVM()
{
}

void AdminSubscriptionVM::validate()
{
    // TODO: implement validation
}

web::json::value AdminSubscriptionVM::toJson() const
{
    web::json::value val = this->SubscriptionVM::toJson();
    
    if(m_defaultPermissionsIsSet)
    {
        val[utility::conversions::to_string_t(U("defaultPermissions"))] = ModelBase::toJson(m_defaultPermissions);
    }
    if(m_ownerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("ownerId"))] = ModelBase::toJson(m_ownerId);
    }

    return val;
}

bool AdminSubscriptionVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->SubscriptionVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("defaultPermissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("defaultPermissions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DefaultPermissionsVM> refVal_setDefaultPermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefaultPermissions);
            setDefaultPermissions(refVal_setDefaultPermissions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ownerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ownerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOwnerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOwnerId);
            setOwnerId(refVal_setOwnerId);
        }
    }
    return ok;
}

void AdminSubscriptionVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_defaultPermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("defaultPermissions")), m_defaultPermissions));
    }
    if(m_ownerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ownerId")), m_ownerId));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
    if(m_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_id));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_localeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("locale")), m_locale));
    }
    if(m_currentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current")), m_current));
    }
    if(m_oldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("old")), m_old));
    }
    if(m_templatesFolderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templatesFolder")), m_templatesFolder));
    }
    if(m_reportsFolderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reportsFolder")), m_reportsFolder));
    }
    if(m_exportsFolderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exportsFolder")), m_exportsFolder));
    }
    if(m_tagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_tags));
    }
}

bool AdminSubscriptionVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("defaultPermissions"))))
    {
        std::shared_ptr<DefaultPermissionsVM> refVal_setDefaultPermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("defaultPermissions"))), refVal_setDefaultPermissions );
        setDefaultPermissions(refVal_setDefaultPermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ownerId"))))
    {
        utility::string_t refVal_setOwnerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ownerId"))), refVal_setOwnerId );
        setOwnerId(refVal_setOwnerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("locale"))))
    {
        utility::string_t refVal_setLocale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("locale"))), refVal_setLocale );
        setLocale(refVal_setLocale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("current"))))
    {
        std::shared_ptr<SubscriptionPeriodVM> refVal_setCurrent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current"))), refVal_setCurrent );
        setCurrent(refVal_setCurrent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("old"))))
    {
        std::vector<std::shared_ptr<SubscriptionPeriodVM>> refVal_setOld;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("old"))), refVal_setOld );
        setOld(refVal_setOld);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templatesFolder"))))
    {
        std::shared_ptr<SubscriptionFolder> refVal_setTemplatesFolder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templatesFolder"))), refVal_setTemplatesFolder );
        setTemplatesFolder(refVal_setTemplatesFolder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reportsFolder"))))
    {
        std::shared_ptr<SubscriptionFolder> refVal_setReportsFolder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reportsFolder"))), refVal_setReportsFolder );
        setReportsFolder(refVal_setReportsFolder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exportsFolder"))))
    {
        std::shared_ptr<SubscriptionFolder> refVal_setExportsFolder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exportsFolder"))), refVal_setExportsFolder );
        setExportsFolder(refVal_setExportsFolder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<utility::string_t> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    return ok;
}

std::shared_ptr<DefaultPermissionsVM> AdminSubscriptionVM::getDefaultPermissions() const
{
    return m_defaultPermissions;
}

void AdminSubscriptionVM::setDefaultPermissions(const std::shared_ptr<DefaultPermissionsVM>& value)
{
    m_defaultPermissions = value;
    m_defaultPermissionsIsSet = true;
}

bool AdminSubscriptionVM::defaultPermissionsIsSet() const
{
    return m_defaultPermissionsIsSet;
}

void AdminSubscriptionVM::unsetdefaultPermissions()
{
    m_defaultPermissionsIsSet = false;
}
utility::string_t AdminSubscriptionVM::getOwnerId() const
{
    return m_ownerId;
}

void AdminSubscriptionVM::setOwnerId(const utility::string_t& value)
{
    m_ownerId = value;
    m_ownerIdIsSet = true;
}

bool AdminSubscriptionVM::ownerIdIsSet() const
{
    return m_ownerIdIsSet;
}

void AdminSubscriptionVM::unsetownerId()
{
    m_ownerIdIsSet = false;
}
}
}
}


