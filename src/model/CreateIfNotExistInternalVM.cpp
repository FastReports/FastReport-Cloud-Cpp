/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateIfNotExistInternalVM.h"

namespace fastreport {
namespace cloud {
namespace models {



CreateIfNotExistInternalVM::CreateIfNotExistInternalVM()
{
    m_id = utility::conversions::to_string_t("");
    m_idIsSet = false;
    m_isAdmin = false;
    m_isAdminIsSet = false;
    m_provider = utility::conversions::to_string_t("");
    m_providerIsSet = false;
    m_refereshToken = utility::conversions::to_string_t("");
    m_refereshTokenIsSet = false;
    m_accessToken = utility::conversions::to_string_t("");
    m_accessTokenIsSet = false;
}

CreateIfNotExistInternalVM::~CreateIfNotExistInternalVM()
{
}

void CreateIfNotExistInternalVM::validate()
{
    // TODO: implement validation
}

web::json::value CreateIfNotExistInternalVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_idIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_id);
    }
    if(m_isAdminIsSet)
    {
        val[utility::conversions::to_string_t(U("isAdmin"))] = ModelBase::toJson(m_isAdmin);
    }
    if(m_providerIsSet)
    {
        val[utility::conversions::to_string_t(U("provider"))] = ModelBase::toJson(m_provider);
    }
    if(m_refereshTokenIsSet)
    {
        val[utility::conversions::to_string_t(U("refereshToken"))] = ModelBase::toJson(m_refereshToken);
    }
    if(m_accessTokenIsSet)
    {
        val[utility::conversions::to_string_t(U("accessToken"))] = ModelBase::toJson(m_accessToken);
    }

    return val;
}

bool CreateIfNotExistInternalVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isAdmin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isAdmin")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAdmin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAdmin);
            setIsAdmin(refVal_setIsAdmin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("provider"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("provider")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProvider;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProvider);
            setProvider(refVal_setProvider);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("refereshToken"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("refereshToken")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRefereshToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRefereshToken);
            setRefereshToken(refVal_setRefereshToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accessToken"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accessToken")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccessToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccessToken);
            setAccessToken(refVal_setAccessToken);
        }
    }
    return ok;
}

void CreateIfNotExistInternalVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_id));
    }
    if(m_isAdminIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isAdmin")), m_isAdmin));
    }
    if(m_providerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("provider")), m_provider));
    }
    if(m_refereshTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("refereshToken")), m_refereshToken));
    }
    if(m_accessTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accessToken")), m_accessToken));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool CreateIfNotExistInternalVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isAdmin"))))
    {
        bool refVal_setIsAdmin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isAdmin"))), refVal_setIsAdmin );
        setIsAdmin(refVal_setIsAdmin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("provider"))))
    {
        utility::string_t refVal_setProvider;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("provider"))), refVal_setProvider );
        setProvider(refVal_setProvider);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("refereshToken"))))
    {
        utility::string_t refVal_setRefereshToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("refereshToken"))), refVal_setRefereshToken );
        setRefereshToken(refVal_setRefereshToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accessToken"))))
    {
        utility::string_t refVal_setAccessToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accessToken"))), refVal_setAccessToken );
        setAccessToken(refVal_setAccessToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t CreateIfNotExistInternalVM::getId() const
{
    return m_id;
}

void CreateIfNotExistInternalVM::setId(const utility::string_t& value)
{
    m_id = value;
    m_idIsSet = true;
}

bool CreateIfNotExistInternalVM::idIsSet() const
{
    return m_idIsSet;
}

void CreateIfNotExistInternalVM::unsetid()
{
    m_idIsSet = false;
}
bool CreateIfNotExistInternalVM::isIsAdmin() const
{
    return m_isAdmin;
}

void CreateIfNotExistInternalVM::setIsAdmin(bool value)
{
    m_isAdmin = value;
    m_isAdminIsSet = true;
}

bool CreateIfNotExistInternalVM::isAdminIsSet() const
{
    return m_isAdminIsSet;
}

void CreateIfNotExistInternalVM::unsetisAdmin()
{
    m_isAdminIsSet = false;
}
utility::string_t CreateIfNotExistInternalVM::getProvider() const
{
    return m_provider;
}

void CreateIfNotExistInternalVM::setProvider(const utility::string_t& value)
{
    m_provider = value;
    m_providerIsSet = true;
}

bool CreateIfNotExistInternalVM::providerIsSet() const
{
    return m_providerIsSet;
}

void CreateIfNotExistInternalVM::unsetprovider()
{
    m_providerIsSet = false;
}
utility::string_t CreateIfNotExistInternalVM::getRefereshToken() const
{
    return m_refereshToken;
}

void CreateIfNotExistInternalVM::setRefereshToken(const utility::string_t& value)
{
    m_refereshToken = value;
    m_refereshTokenIsSet = true;
}

bool CreateIfNotExistInternalVM::refereshTokenIsSet() const
{
    return m_refereshTokenIsSet;
}

void CreateIfNotExistInternalVM::unsetrefereshToken()
{
    m_refereshTokenIsSet = false;
}
utility::string_t CreateIfNotExistInternalVM::getAccessToken() const
{
    return m_accessToken;
}

void CreateIfNotExistInternalVM::setAccessToken(const utility::string_t& value)
{
    m_accessToken = value;
    m_accessTokenIsSet = true;
}

bool CreateIfNotExistInternalVM::accessTokenIsSet() const
{
    return m_accessTokenIsSet;
}

void CreateIfNotExistInternalVM::unsetaccessToken()
{
    m_accessTokenIsSet = false;
}
}
}
}


