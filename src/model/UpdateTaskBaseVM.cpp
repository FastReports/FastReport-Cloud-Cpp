/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateTaskBaseVM.h"

namespace fastreport {
namespace cloud {
namespace models {



UpdateTaskBaseVM::UpdateTaskBaseVM()
{
    m_cronExpression = utility::conversions::to_string_t("");
    m_cronExpressionIsSet = false;
    m_startsOn = utility::datetime();
    m_startsOnIsSet = false;
    m_endsIsSet = false;
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
}

UpdateTaskBaseVM::~UpdateTaskBaseVM()
{
}

void UpdateTaskBaseVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdateTaskBaseVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_cronExpressionIsSet)
    {
        val[utility::conversions::to_string_t(U("cronExpression"))] = ModelBase::toJson(m_cronExpression);
    }
    if(m_startsOnIsSet)
    {
        val[utility::conversions::to_string_t(U("startsOn"))] = ModelBase::toJson(m_startsOn);
    }
    if(m_endsIsSet)
    {
        val[utility::conversions::to_string_t(U("ends"))] = ModelBase::toJson(m_ends);
    }
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_name);
    }

    return val;
}

bool UpdateTaskBaseVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("cronExpression"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cronExpression")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCronExpression;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCronExpression);
            setCronExpression(refVal_setCronExpression);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("startsOn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startsOn")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setStartsOn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartsOn);
            setStartsOn(refVal_setStartsOn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ends"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ends")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateTaskEndVM> refVal_setEnds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnds);
            setEnds(refVal_setEnds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    return ok;
}

void UpdateTaskBaseVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_cronExpressionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cronExpression")), m_cronExpression));
    }
    if(m_startsOnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startsOn")), m_startsOn));
    }
    if(m_endsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ends")), m_ends));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool UpdateTaskBaseVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("cronExpression"))))
    {
        utility::string_t refVal_setCronExpression;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cronExpression"))), refVal_setCronExpression );
        setCronExpression(refVal_setCronExpression);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("startsOn"))))
    {
        utility::datetime refVal_setStartsOn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startsOn"))), refVal_setStartsOn );
        setStartsOn(refVal_setStartsOn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ends"))))
    {
        std::shared_ptr<CreateTaskEndVM> refVal_setEnds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ends"))), refVal_setEnds );
        setEnds(refVal_setEnds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t UpdateTaskBaseVM::getCronExpression() const
{
    return m_cronExpression;
}

void UpdateTaskBaseVM::setCronExpression(const utility::string_t& value)
{
    m_cronExpression = value;
    m_cronExpressionIsSet = true;
}

bool UpdateTaskBaseVM::cronExpressionIsSet() const
{
    return m_cronExpressionIsSet;
}

void UpdateTaskBaseVM::unsetcronExpression()
{
    m_cronExpressionIsSet = false;
}
utility::datetime UpdateTaskBaseVM::getStartsOn() const
{
    return m_startsOn;
}

void UpdateTaskBaseVM::setStartsOn(const utility::datetime& value)
{
    m_startsOn = value;
    m_startsOnIsSet = true;
}

bool UpdateTaskBaseVM::startsOnIsSet() const
{
    return m_startsOnIsSet;
}

void UpdateTaskBaseVM::unsetstartsOn()
{
    m_startsOnIsSet = false;
}
std::shared_ptr<CreateTaskEndVM> UpdateTaskBaseVM::getEnds() const
{
    return m_ends;
}

void UpdateTaskBaseVM::setEnds(const std::shared_ptr<CreateTaskEndVM>& value)
{
    m_ends = value;
    m_endsIsSet = true;
}

bool UpdateTaskBaseVM::endsIsSet() const
{
    return m_endsIsSet;
}

void UpdateTaskBaseVM::unsetends()
{
    m_endsIsSet = false;
}
utility::string_t UpdateTaskBaseVM::getName() const
{
    return m_name;
}

void UpdateTaskBaseVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool UpdateTaskBaseVM::nameIsSet() const
{
    return m_nameIsSet;
}

void UpdateTaskBaseVM::unsetname()
{
    m_nameIsSet = false;
}
}
}
}


