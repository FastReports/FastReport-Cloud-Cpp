/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ProblemDetails.h"

namespace fastreport {
namespace cloud {
namespace models {



ProblemDetails::ProblemDetails()
{
    m_type = utility::conversions::to_string_t("");
    m_typeIsSet = false;
    m_title = utility::conversions::to_string_t("");
    m_titleIsSet = false;
    m_status = 0;
    m_statusIsSet = false;
    m_detail = utility::conversions::to_string_t("");
    m_detailIsSet = false;
    m_instance = utility::conversions::to_string_t("");
    m_instanceIsSet = false;
}

ProblemDetails::~ProblemDetails()
{
}

void ProblemDetails::validate()
{
    // TODO: implement validation
}

web::json::value ProblemDetails::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_type);
    }
    if(m_titleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_title);
    }
    if(m_statusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_status);
    }
    if(m_detailIsSet)
    {
        val[utility::conversions::to_string_t(U("detail"))] = ModelBase::toJson(m_detail);
    }
    if(m_instanceIsSet)
    {
        val[utility::conversions::to_string_t(U("instance"))] = ModelBase::toJson(m_instance);
    }

    return val;
}

bool ProblemDetails::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("detail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("detail")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDetail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetail);
            setDetail(refVal_setDetail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instance"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instance")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInstance;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstance);
            setInstance(refVal_setInstance);
        }
    }
    return ok;
}

void ProblemDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_type));
    }
    if(m_titleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_title));
    }
    if(m_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_status));
    }
    if(m_detailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("detail")), m_detail));
    }
    if(m_instanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instance")), m_instance));
    }
}

bool ProblemDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        int32_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("detail"))))
    {
        utility::string_t refVal_setDetail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("detail"))), refVal_setDetail );
        setDetail(refVal_setDetail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instance"))))
    {
        utility::string_t refVal_setInstance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instance"))), refVal_setInstance );
        setInstance(refVal_setInstance);
    }
    return ok;
}

utility::string_t ProblemDetails::getType() const
{
    return m_type;
}

void ProblemDetails::setType(const utility::string_t& value)
{
    m_type = value;
    m_typeIsSet = true;
}

bool ProblemDetails::typeIsSet() const
{
    return m_typeIsSet;
}

void ProblemDetails::unsettype()
{
    m_typeIsSet = false;
}
utility::string_t ProblemDetails::getTitle() const
{
    return m_title;
}

void ProblemDetails::setTitle(const utility::string_t& value)
{
    m_title = value;
    m_titleIsSet = true;
}

bool ProblemDetails::titleIsSet() const
{
    return m_titleIsSet;
}

void ProblemDetails::unsettitle()
{
    m_titleIsSet = false;
}
int32_t ProblemDetails::getStatus() const
{
    return m_status;
}

void ProblemDetails::setStatus(int32_t value)
{
    m_status = value;
    m_statusIsSet = true;
}

bool ProblemDetails::statusIsSet() const
{
    return m_statusIsSet;
}

void ProblemDetails::unsetstatus()
{
    m_statusIsSet = false;
}
utility::string_t ProblemDetails::getDetail() const
{
    return m_detail;
}

void ProblemDetails::setDetail(const utility::string_t& value)
{
    m_detail = value;
    m_detailIsSet = true;
}

bool ProblemDetails::detailIsSet() const
{
    return m_detailIsSet;
}

void ProblemDetails::unsetdetail()
{
    m_detailIsSet = false;
}
utility::string_t ProblemDetails::getInstance() const
{
    return m_instance;
}

void ProblemDetails::setInstance(const utility::string_t& value)
{
    m_instance = value;
    m_instanceIsSet = true;
}

bool ProblemDetails::instanceIsSet() const
{
    return m_instanceIsSet;
}

void ProblemDetails::unsetinstance()
{
    m_instanceIsSet = false;
}
}
}
}


