/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AuditActionsVM.h"

namespace fastreport {
namespace cloud {
namespace models {



AuditActionsVM::AuditActionsVM()
{
    m_itemsIsSet = false;
    m_hasMore = false;
    m_hasMoreIsSet = false;
    m_skip = 0;
    m_skipIsSet = false;
    m_take = 0;
    m_takeIsSet = false;
}

AuditActionsVM::~AuditActionsVM()
{
}

void AuditActionsVM::validate()
{
    // TODO: implement validation
}

web::json::value AuditActionsVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_itemsIsSet)
    {
        val[utility::conversions::to_string_t(U("items"))] = ModelBase::toJson(m_items);
    }
    if(m_hasMoreIsSet)
    {
        val[utility::conversions::to_string_t(U("hasMore"))] = ModelBase::toJson(m_hasMore);
    }
    if(m_skipIsSet)
    {
        val[utility::conversions::to_string_t(U("skip"))] = ModelBase::toJson(m_skip);
    }
    if(m_takeIsSet)
    {
        val[utility::conversions::to_string_t(U("take"))] = ModelBase::toJson(m_take);
    }

    return val;
}

bool AuditActionsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("items")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AuditActionVM>> refVal_setItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItems);
            setItems(refVal_setItems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hasMore"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hasMore")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasMore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasMore);
            setHasMore(refVal_setHasMore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("skip"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("skip")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSkip;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSkip);
            setSkip(refVal_setSkip);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("take"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("take")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTake;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTake);
            setTake(refVal_setTake);
        }
    }
    return ok;
}

void AuditActionsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_itemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("items")), m_items));
    }
    if(m_hasMoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hasMore")), m_hasMore));
    }
    if(m_skipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("skip")), m_skip));
    }
    if(m_takeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("take")), m_take));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool AuditActionsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("items"))))
    {
        std::vector<std::shared_ptr<AuditActionVM>> refVal_setItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("items"))), refVal_setItems );
        setItems(refVal_setItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hasMore"))))
    {
        bool refVal_setHasMore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hasMore"))), refVal_setHasMore );
        setHasMore(refVal_setHasMore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("skip"))))
    {
        int32_t refVal_setSkip;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("skip"))), refVal_setSkip );
        setSkip(refVal_setSkip);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("take"))))
    {
        int32_t refVal_setTake;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("take"))), refVal_setTake );
        setTake(refVal_setTake);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

std::vector<std::shared_ptr<AuditActionVM>>& AuditActionsVM::getItems()
{
    return m_items;
}

void AuditActionsVM::setItems(const std::vector<std::shared_ptr<AuditActionVM>>& value)
{
    m_items = value;
    m_itemsIsSet = true;
}

bool AuditActionsVM::itemsIsSet() const
{
    return m_itemsIsSet;
}

void AuditActionsVM::unsetitems()
{
    m_itemsIsSet = false;
}
bool AuditActionsVM::isHasMore() const
{
    return m_hasMore;
}

void AuditActionsVM::setHasMore(bool value)
{
    m_hasMore = value;
    m_hasMoreIsSet = true;
}

bool AuditActionsVM::hasMoreIsSet() const
{
    return m_hasMoreIsSet;
}

void AuditActionsVM::unsethasMore()
{
    m_hasMoreIsSet = false;
}
int32_t AuditActionsVM::getSkip() const
{
    return m_skip;
}

void AuditActionsVM::setSkip(int32_t value)
{
    m_skip = value;
    m_skipIsSet = true;
}

bool AuditActionsVM::skipIsSet() const
{
    return m_skipIsSet;
}

void AuditActionsVM::unsetskip()
{
    m_skipIsSet = false;
}
int32_t AuditActionsVM::getTake() const
{
    return m_take;
}

void AuditActionsVM::setTake(int32_t value)
{
    m_take = value;
    m_takeIsSet = true;
}

bool AuditActionsVM::takeIsSet() const
{
    return m_takeIsSet;
}

void AuditActionsVM::unsettake()
{
    m_takeIsSet = false;
}
}
}
}


