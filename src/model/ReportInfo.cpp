/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ReportInfo.h"

namespace fastreport {
namespace cloud {
namespace models {



ReportInfo::ReportInfo()
{
    m_author = utility::conversions::to_string_t("");
    m_authorIsSet = false;
    m_created = utility::datetime();
    m_createdIsSet = false;
    m_creatorVersion = utility::conversions::to_string_t("");
    m_creatorVersionIsSet = false;
    m_description = utility::conversions::to_string_t("");
    m_descriptionIsSet = false;
    m_modified = utility::datetime();
    m_modifiedIsSet = false;
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_pictureIsSet = false;
    m_previewPictureRatio = 0.0f;
    m_previewPictureRatioIsSet = false;
    m_saveModeIsSet = false;
    m_savePreviewPicture = false;
    m_savePreviewPictureIsSet = false;
    m_tag = utility::conversions::to_string_t("");
    m_tagIsSet = false;
    m_version = utility::conversions::to_string_t("");
    m_versionIsSet = false;
}

ReportInfo::~ReportInfo()
{
}

void ReportInfo::validate()
{
    // TODO: implement validation
}

web::json::value ReportInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_authorIsSet)
    {
        val[utility::conversions::to_string_t(U("author"))] = ModelBase::toJson(m_author);
    }
    if(m_createdIsSet)
    {
        val[utility::conversions::to_string_t(U("created"))] = ModelBase::toJson(m_created);
    }
    if(m_creatorVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("creatorVersion"))] = ModelBase::toJson(m_creatorVersion);
    }
    if(m_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_description);
    }
    if(m_modifiedIsSet)
    {
        val[utility::conversions::to_string_t(U("modified"))] = ModelBase::toJson(m_modified);
    }
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_name);
    }
    if(m_pictureIsSet)
    {
        val[utility::conversions::to_string_t(U("picture"))] = ModelBase::toJson(m_picture);
    }
    if(m_previewPictureRatioIsSet)
    {
        val[utility::conversions::to_string_t(U("previewPictureRatio"))] = ModelBase::toJson(m_previewPictureRatio);
    }
    if(m_saveModeIsSet)
    {
        val[utility::conversions::to_string_t(U("saveMode"))] = ModelBase::toJson(m_saveMode);
    }
    if(m_savePreviewPictureIsSet)
    {
        val[utility::conversions::to_string_t(U("savePreviewPicture"))] = ModelBase::toJson(m_savePreviewPicture);
    }
    if(m_tagIsSet)
    {
        val[utility::conversions::to_string_t(U("tag"))] = ModelBase::toJson(m_tag);
    }
    if(m_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_version);
    }

    return val;
}

bool ReportInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("author"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("author")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAuthor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuthor);
            setAuthor(refVal_setAuthor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreated);
            setCreated(refVal_setCreated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creatorVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creatorVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatorVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatorVersion);
            setCreatorVersion(refVal_setCreatorVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModified);
            setModified(refVal_setModified);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("picture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("picture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPicture;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPicture);
            setPicture(refVal_setPicture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("previewPictureRatio"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("previewPictureRatio")));
        if(!fieldValue.is_null())
        {
            float refVal_setPreviewPictureRatio;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreviewPictureRatio);
            setPreviewPictureRatio(refVal_setPreviewPictureRatio);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("saveMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("saveMode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SaveMode> refVal_setSaveMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSaveMode);
            setSaveMode(refVal_setSaveMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("savePreviewPicture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("savePreviewPicture")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSavePreviewPicture;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSavePreviewPicture);
            setSavePreviewPicture(refVal_setSavePreviewPicture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tag"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tag")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTag;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTag);
            setTag(refVal_setTag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    return ok;
}

void ReportInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_authorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("author")), m_author));
    }
    if(m_createdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created")), m_created));
    }
    if(m_creatorVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creatorVersion")), m_creatorVersion));
    }
    if(m_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_description));
    }
    if(m_modifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified")), m_modified));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_pictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("picture")), m_picture));
    }
    if(m_previewPictureRatioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("previewPictureRatio")), m_previewPictureRatio));
    }
    if(m_saveModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("saveMode")), m_saveMode));
    }
    if(m_savePreviewPictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("savePreviewPicture")), m_savePreviewPicture));
    }
    if(m_tagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tag")), m_tag));
    }
    if(m_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_version));
    }
}

bool ReportInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("author"))))
    {
        utility::string_t refVal_setAuthor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("author"))), refVal_setAuthor );
        setAuthor(refVal_setAuthor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created"))))
    {
        utility::datetime refVal_setCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created"))), refVal_setCreated );
        setCreated(refVal_setCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creatorVersion"))))
    {
        utility::string_t refVal_setCreatorVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creatorVersion"))), refVal_setCreatorVersion );
        setCreatorVersion(refVal_setCreatorVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified"))))
    {
        utility::datetime refVal_setModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified"))), refVal_setModified );
        setModified(refVal_setModified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("picture"))))
    {
        utility::string_t refVal_setPicture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("picture"))), refVal_setPicture );
        setPicture(refVal_setPicture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("previewPictureRatio"))))
    {
        float refVal_setPreviewPictureRatio;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("previewPictureRatio"))), refVal_setPreviewPictureRatio );
        setPreviewPictureRatio(refVal_setPreviewPictureRatio);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("saveMode"))))
    {
        std::shared_ptr<SaveMode> refVal_setSaveMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("saveMode"))), refVal_setSaveMode );
        setSaveMode(refVal_setSaveMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("savePreviewPicture"))))
    {
        bool refVal_setSavePreviewPicture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("savePreviewPicture"))), refVal_setSavePreviewPicture );
        setSavePreviewPicture(refVal_setSavePreviewPicture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tag"))))
    {
        utility::string_t refVal_setTag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tag"))), refVal_setTag );
        setTag(refVal_setTag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    return ok;
}

utility::string_t ReportInfo::getAuthor() const
{
    return m_author;
}

void ReportInfo::setAuthor(const utility::string_t& value)
{
    m_author = value;
    m_authorIsSet = true;
}

bool ReportInfo::authorIsSet() const
{
    return m_authorIsSet;
}

void ReportInfo::unsetauthor()
{
    m_authorIsSet = false;
}
utility::datetime ReportInfo::getCreated() const
{
    return m_created;
}

void ReportInfo::setCreated(const utility::datetime& value)
{
    m_created = value;
    m_createdIsSet = true;
}

bool ReportInfo::createdIsSet() const
{
    return m_createdIsSet;
}

void ReportInfo::unsetcreated()
{
    m_createdIsSet = false;
}
utility::string_t ReportInfo::getCreatorVersion() const
{
    return m_creatorVersion;
}

void ReportInfo::setCreatorVersion(const utility::string_t& value)
{
    m_creatorVersion = value;
    m_creatorVersionIsSet = true;
}

bool ReportInfo::creatorVersionIsSet() const
{
    return m_creatorVersionIsSet;
}

void ReportInfo::unsetcreatorVersion()
{
    m_creatorVersionIsSet = false;
}
utility::string_t ReportInfo::getDescription() const
{
    return m_description;
}

void ReportInfo::setDescription(const utility::string_t& value)
{
    m_description = value;
    m_descriptionIsSet = true;
}

bool ReportInfo::descriptionIsSet() const
{
    return m_descriptionIsSet;
}

void ReportInfo::unsetdescription()
{
    m_descriptionIsSet = false;
}
utility::datetime ReportInfo::getModified() const
{
    return m_modified;
}

void ReportInfo::setModified(const utility::datetime& value)
{
    m_modified = value;
    m_modifiedIsSet = true;
}

bool ReportInfo::modifiedIsSet() const
{
    return m_modifiedIsSet;
}

void ReportInfo::unsetmodified()
{
    m_modifiedIsSet = false;
}
utility::string_t ReportInfo::getName() const
{
    return m_name;
}

void ReportInfo::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool ReportInfo::nameIsSet() const
{
    return m_nameIsSet;
}

void ReportInfo::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t ReportInfo::getPicture() const
{
    return m_picture;
}

void ReportInfo::setPicture(const utility::string_t& value)
{
    m_picture = value;
    m_pictureIsSet = true;
}

bool ReportInfo::pictureIsSet() const
{
    return m_pictureIsSet;
}

void ReportInfo::unsetpicture()
{
    m_pictureIsSet = false;
}
float ReportInfo::getPreviewPictureRatio() const
{
    return m_previewPictureRatio;
}

void ReportInfo::setPreviewPictureRatio(float value)
{
    m_previewPictureRatio = value;
    m_previewPictureRatioIsSet = true;
}

bool ReportInfo::previewPictureRatioIsSet() const
{
    return m_previewPictureRatioIsSet;
}

void ReportInfo::unsetpreviewPictureRatio()
{
    m_previewPictureRatioIsSet = false;
}
std::shared_ptr<SaveMode> ReportInfo::getSaveMode() const
{
    return m_saveMode;
}

void ReportInfo::setSaveMode(const std::shared_ptr<SaveMode>& value)
{
    m_saveMode = value;
    m_saveModeIsSet = true;
}

bool ReportInfo::saveModeIsSet() const
{
    return m_saveModeIsSet;
}

void ReportInfo::unsetsaveMode()
{
    m_saveModeIsSet = false;
}
bool ReportInfo::isSavePreviewPicture() const
{
    return m_savePreviewPicture;
}

void ReportInfo::setSavePreviewPicture(bool value)
{
    m_savePreviewPicture = value;
    m_savePreviewPictureIsSet = true;
}

bool ReportInfo::savePreviewPictureIsSet() const
{
    return m_savePreviewPictureIsSet;
}

void ReportInfo::unsetsavePreviewPicture()
{
    m_savePreviewPictureIsSet = false;
}
utility::string_t ReportInfo::getTag() const
{
    return m_tag;
}

void ReportInfo::setTag(const utility::string_t& value)
{
    m_tag = value;
    m_tagIsSet = true;
}

bool ReportInfo::tagIsSet() const
{
    return m_tagIsSet;
}

void ReportInfo::unsettag()
{
    m_tagIsSet = false;
}
utility::string_t ReportInfo::getVersion() const
{
    return m_version;
}

void ReportInfo::setVersion(const utility::string_t& value)
{
    m_version = value;
    m_versionIsSet = true;
}

bool ReportInfo::versionIsSet() const
{
    return m_versionIsSet;
}

void ReportInfo::unsetversion()
{
    m_versionIsSet = false;
}
}
}
}


