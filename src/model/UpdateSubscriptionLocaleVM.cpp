/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateSubscriptionLocaleVM.h"

namespace fastreport {
namespace cloud {
namespace models {



UpdateSubscriptionLocaleVM::UpdateSubscriptionLocaleVM()
{
    m_locale = utility::conversions::to_string_t("");
    m_localeIsSet = false;
}

UpdateSubscriptionLocaleVM::~UpdateSubscriptionLocaleVM()
{
}

void UpdateSubscriptionLocaleVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdateSubscriptionLocaleVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_localeIsSet)
    {
        val[utility::conversions::to_string_t(U("locale"))] = ModelBase::toJson(m_locale);
    }

    return val;
}

bool UpdateSubscriptionLocaleVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("locale"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("locale")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLocale;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocale);
            setLocale(refVal_setLocale);
        }
    }
    return ok;
}

void UpdateSubscriptionLocaleVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_localeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("locale")), m_locale));
    }
}

bool UpdateSubscriptionLocaleVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("locale"))))
    {
        utility::string_t refVal_setLocale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("locale"))), refVal_setLocale );
        setLocale(refVal_setLocale);
    }
    return ok;
}

utility::string_t UpdateSubscriptionLocaleVM::getLocale() const
{
    return m_locale;
}

void UpdateSubscriptionLocaleVM::setLocale(const utility::string_t& value)
{
    m_locale = value;
    m_localeIsSet = true;
}

bool UpdateSubscriptionLocaleVM::localeIsSet() const
{
    return m_localeIsSet;
}

void UpdateSubscriptionLocaleVM::unsetlocale()
{
    m_localeIsSet = false;
}
}
}
}


