/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateAuditActionVM.h"

namespace fastreport {
namespace cloud {
namespace models {



CreateAuditActionVM::CreateAuditActionVM()
{
    m_userId = utility::conversions::to_string_t("");
    m_userIdIsSet = false;
    m_entityId = utility::conversions::to_string_t("");
    m_entityIdIsSet = false;
    m_subscriptionId = utility::conversions::to_string_t("");
    m_subscriptionIdIsSet = false;
    m_typeIsSet = false;
    m_messageId = utility::conversions::to_string_t("");
    m_messageIdIsSet = false;
    m_fileName = utility::conversions::to_string_t("");
    m_fileNameIsSet = false;
}

CreateAuditActionVM::~CreateAuditActionVM()
{
}

void CreateAuditActionVM::validate()
{
    // TODO: implement validation
}

web::json::value CreateAuditActionVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_userIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_userId);
    }
    if(m_entityIdIsSet)
    {
        val[utility::conversions::to_string_t(U("entityId"))] = ModelBase::toJson(m_entityId);
    }
    if(m_subscriptionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("subscriptionId"))] = ModelBase::toJson(m_subscriptionId);
    }
    if(m_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_type);
    }
    if(m_messageIdIsSet)
    {
        val[utility::conversions::to_string_t(U("messageId"))] = ModelBase::toJson(m_messageId);
    }
    if(m_fileNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fileName"))] = ModelBase::toJson(m_fileName);
    }

    return val;
}

bool CreateAuditActionVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entityId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entityId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEntityId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntityId);
            setEntityId(refVal_setEntityId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subscriptionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subscriptionId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubscriptionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubscriptionId);
            setSubscriptionId(refVal_setSubscriptionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AuditType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("messageId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messageId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageId);
            setMessageId(refVal_setMessageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fileName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fileName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFileName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileName);
            setFileName(refVal_setFileName);
        }
    }
    return ok;
}

void CreateAuditActionVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_userIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_userId));
    }
    if(m_entityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entityId")), m_entityId));
    }
    if(m_subscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscriptionId")), m_subscriptionId));
    }
    if(m_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_type));
    }
    if(m_messageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messageId")), m_messageId));
    }
    if(m_fileNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fileName")), m_fileName));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool CreateAuditActionVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entityId"))))
    {
        utility::string_t refVal_setEntityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entityId"))), refVal_setEntityId );
        setEntityId(refVal_setEntityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subscriptionId"))))
    {
        utility::string_t refVal_setSubscriptionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscriptionId"))), refVal_setSubscriptionId );
        setSubscriptionId(refVal_setSubscriptionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<AuditType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("messageId"))))
    {
        utility::string_t refVal_setMessageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messageId"))), refVal_setMessageId );
        setMessageId(refVal_setMessageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fileName"))))
    {
        utility::string_t refVal_setFileName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fileName"))), refVal_setFileName );
        setFileName(refVal_setFileName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t CreateAuditActionVM::getUserId() const
{
    return m_userId;
}

void CreateAuditActionVM::setUserId(const utility::string_t& value)
{
    m_userId = value;
    m_userIdIsSet = true;
}

bool CreateAuditActionVM::userIdIsSet() const
{
    return m_userIdIsSet;
}

void CreateAuditActionVM::unsetuserId()
{
    m_userIdIsSet = false;
}
utility::string_t CreateAuditActionVM::getEntityId() const
{
    return m_entityId;
}

void CreateAuditActionVM::setEntityId(const utility::string_t& value)
{
    m_entityId = value;
    m_entityIdIsSet = true;
}

bool CreateAuditActionVM::entityIdIsSet() const
{
    return m_entityIdIsSet;
}

void CreateAuditActionVM::unsetentityId()
{
    m_entityIdIsSet = false;
}
utility::string_t CreateAuditActionVM::getSubscriptionId() const
{
    return m_subscriptionId;
}

void CreateAuditActionVM::setSubscriptionId(const utility::string_t& value)
{
    m_subscriptionId = value;
    m_subscriptionIdIsSet = true;
}

bool CreateAuditActionVM::subscriptionIdIsSet() const
{
    return m_subscriptionIdIsSet;
}

void CreateAuditActionVM::unsetsubscriptionId()
{
    m_subscriptionIdIsSet = false;
}
std::shared_ptr<AuditType> CreateAuditActionVM::getType() const
{
    return m_type;
}

void CreateAuditActionVM::setType(const std::shared_ptr<AuditType>& value)
{
    m_type = value;
    m_typeIsSet = true;
}

bool CreateAuditActionVM::typeIsSet() const
{
    return m_typeIsSet;
}

void CreateAuditActionVM::unsettype()
{
    m_typeIsSet = false;
}
utility::string_t CreateAuditActionVM::getMessageId() const
{
    return m_messageId;
}

void CreateAuditActionVM::setMessageId(const utility::string_t& value)
{
    m_messageId = value;
    m_messageIdIsSet = true;
}

bool CreateAuditActionVM::messageIdIsSet() const
{
    return m_messageIdIsSet;
}

void CreateAuditActionVM::unsetmessageId()
{
    m_messageIdIsSet = false;
}
utility::string_t CreateAuditActionVM::getFileName() const
{
    return m_fileName;
}

void CreateAuditActionVM::setFileName(const utility::string_t& value)
{
    m_fileName = value;
    m_fileNameIsSet = true;
}

bool CreateAuditActionVM::fileNameIsSet() const
{
    return m_fileNameIsSet;
}

void CreateAuditActionVM::unsetfileName()
{
    m_fileNameIsSet = false;
}
}
}
}


