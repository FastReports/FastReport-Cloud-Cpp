/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateDefaultPermissionsVM.h"

namespace fastreport {
namespace cloud {
namespace models {



UpdateDefaultPermissionsVM::UpdateDefaultPermissionsVM()
{
    m_filePermissionsIsSet = false;
    m_groupPermissionsIsSet = false;
    m_dataSourcePermissionsIsSet = false;
    m_taskPermissionsIsSet = false;
}

UpdateDefaultPermissionsVM::~UpdateDefaultPermissionsVM()
{
}

void UpdateDefaultPermissionsVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdateDefaultPermissionsVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_filePermissionsIsSet)
    {
        val[utility::conversions::to_string_t(U("filePermissions"))] = ModelBase::toJson(m_filePermissions);
    }
    if(m_groupPermissionsIsSet)
    {
        val[utility::conversions::to_string_t(U("groupPermissions"))] = ModelBase::toJson(m_groupPermissions);
    }
    if(m_dataSourcePermissionsIsSet)
    {
        val[utility::conversions::to_string_t(U("dataSourcePermissions"))] = ModelBase::toJson(m_dataSourcePermissions);
    }
    if(m_taskPermissionsIsSet)
    {
        val[utility::conversions::to_string_t(U("taskPermissions"))] = ModelBase::toJson(m_taskPermissions);
    }

    return val;
}

bool UpdateDefaultPermissionsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("filePermissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filePermissions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpdateFilePermissionsVM> refVal_setFilePermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilePermissions);
            setFilePermissions(refVal_setFilePermissions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("groupPermissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("groupPermissions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpdateGroupPermissionsVM> refVal_setGroupPermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroupPermissions);
            setGroupPermissions(refVal_setGroupPermissions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dataSourcePermissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataSourcePermissions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpdateDataSourcePermissionsVM> refVal_setDataSourcePermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataSourcePermissions);
            setDataSourcePermissions(refVal_setDataSourcePermissions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("taskPermissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("taskPermissions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpdateTaskPermissionsVM> refVal_setTaskPermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTaskPermissions);
            setTaskPermissions(refVal_setTaskPermissions);
        }
    }
    return ok;
}

void UpdateDefaultPermissionsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_filePermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filePermissions")), m_filePermissions));
    }
    if(m_groupPermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("groupPermissions")), m_groupPermissions));
    }
    if(m_dataSourcePermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataSourcePermissions")), m_dataSourcePermissions));
    }
    if(m_taskPermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("taskPermissions")), m_taskPermissions));
    }
}

bool UpdateDefaultPermissionsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("filePermissions"))))
    {
        std::shared_ptr<UpdateFilePermissionsVM> refVal_setFilePermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filePermissions"))), refVal_setFilePermissions );
        setFilePermissions(refVal_setFilePermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("groupPermissions"))))
    {
        std::shared_ptr<UpdateGroupPermissionsVM> refVal_setGroupPermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("groupPermissions"))), refVal_setGroupPermissions );
        setGroupPermissions(refVal_setGroupPermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dataSourcePermissions"))))
    {
        std::shared_ptr<UpdateDataSourcePermissionsVM> refVal_setDataSourcePermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataSourcePermissions"))), refVal_setDataSourcePermissions );
        setDataSourcePermissions(refVal_setDataSourcePermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("taskPermissions"))))
    {
        std::shared_ptr<UpdateTaskPermissionsVM> refVal_setTaskPermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("taskPermissions"))), refVal_setTaskPermissions );
        setTaskPermissions(refVal_setTaskPermissions);
    }
    return ok;
}

std::shared_ptr<UpdateFilePermissionsVM> UpdateDefaultPermissionsVM::getFilePermissions() const
{
    return m_filePermissions;
}

void UpdateDefaultPermissionsVM::setFilePermissions(const std::shared_ptr<UpdateFilePermissionsVM>& value)
{
    m_filePermissions = value;
    m_filePermissionsIsSet = true;
}

bool UpdateDefaultPermissionsVM::filePermissionsIsSet() const
{
    return m_filePermissionsIsSet;
}

void UpdateDefaultPermissionsVM::unsetfilePermissions()
{
    m_filePermissionsIsSet = false;
}
std::shared_ptr<UpdateGroupPermissionsVM> UpdateDefaultPermissionsVM::getGroupPermissions() const
{
    return m_groupPermissions;
}

void UpdateDefaultPermissionsVM::setGroupPermissions(const std::shared_ptr<UpdateGroupPermissionsVM>& value)
{
    m_groupPermissions = value;
    m_groupPermissionsIsSet = true;
}

bool UpdateDefaultPermissionsVM::groupPermissionsIsSet() const
{
    return m_groupPermissionsIsSet;
}

void UpdateDefaultPermissionsVM::unsetgroupPermissions()
{
    m_groupPermissionsIsSet = false;
}
std::shared_ptr<UpdateDataSourcePermissionsVM> UpdateDefaultPermissionsVM::getDataSourcePermissions() const
{
    return m_dataSourcePermissions;
}

void UpdateDefaultPermissionsVM::setDataSourcePermissions(const std::shared_ptr<UpdateDataSourcePermissionsVM>& value)
{
    m_dataSourcePermissions = value;
    m_dataSourcePermissionsIsSet = true;
}

bool UpdateDefaultPermissionsVM::dataSourcePermissionsIsSet() const
{
    return m_dataSourcePermissionsIsSet;
}

void UpdateDefaultPermissionsVM::unsetdataSourcePermissions()
{
    m_dataSourcePermissionsIsSet = false;
}
std::shared_ptr<UpdateTaskPermissionsVM> UpdateDefaultPermissionsVM::getTaskPermissions() const
{
    return m_taskPermissions;
}

void UpdateDefaultPermissionsVM::setTaskPermissions(const std::shared_ptr<UpdateTaskPermissionsVM>& value)
{
    m_taskPermissions = value;
    m_taskPermissionsIsSet = true;
}

bool UpdateDefaultPermissionsVM::taskPermissionsIsSet() const
{
    return m_taskPermissionsIsSet;
}

void UpdateDefaultPermissionsVM::unsettaskPermissions()
{
    m_taskPermissionsIsSet = false;
}
}
}
}


