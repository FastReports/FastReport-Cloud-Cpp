/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateUserProfileVM.h"

namespace fastreport {
namespace cloud {
namespace models {



UpdateUserProfileVM::UpdateUserProfileVM()
{
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_username = utility::conversions::to_string_t("");
    m_usernameIsSet = false;
    m_email = utility::conversions::to_string_t("");
    m_emailIsSet = false;
    m_passwordNew = utility::conversions::to_string_t("");
    m_passwordNewIsSet = false;
    m_passwordNew2 = utility::conversions::to_string_t("");
    m_passwordNew2IsSet = false;
}

UpdateUserProfileVM::~UpdateUserProfileVM()
{
}

void UpdateUserProfileVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdateUserProfileVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_name);
    }
    if(m_usernameIsSet)
    {
        val[utility::conversions::to_string_t(U("username"))] = ModelBase::toJson(m_username);
    }
    if(m_emailIsSet)
    {
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_email);
    }
    if(m_passwordNewIsSet)
    {
        val[utility::conversions::to_string_t(U("passwordNew"))] = ModelBase::toJson(m_passwordNew);
    }
    if(m_passwordNew2IsSet)
    {
        val[utility::conversions::to_string_t(U("passwordNew2"))] = ModelBase::toJson(m_passwordNew2);
    }

    return val;
}

bool UpdateUserProfileVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("username"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("username")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsername);
            setUsername(refVal_setUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmail);
            setEmail(refVal_setEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("passwordNew"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("passwordNew")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPasswordNew;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPasswordNew);
            setPasswordNew(refVal_setPasswordNew);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("passwordNew2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("passwordNew2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPasswordNew2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPasswordNew2);
            setPasswordNew2(refVal_setPasswordNew2);
        }
    }
    return ok;
}

void UpdateUserProfileVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_usernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("username")), m_username));
    }
    if(m_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_email));
    }
    if(m_passwordNewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("passwordNew")), m_passwordNew));
    }
    if(m_passwordNew2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("passwordNew2")), m_passwordNew2));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool UpdateUserProfileVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("username"))))
    {
        utility::string_t refVal_setUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("username"))), refVal_setUsername );
        setUsername(refVal_setUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_setEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_setEmail );
        setEmail(refVal_setEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("passwordNew"))))
    {
        utility::string_t refVal_setPasswordNew;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("passwordNew"))), refVal_setPasswordNew );
        setPasswordNew(refVal_setPasswordNew);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("passwordNew2"))))
    {
        utility::string_t refVal_setPasswordNew2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("passwordNew2"))), refVal_setPasswordNew2 );
        setPasswordNew2(refVal_setPasswordNew2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t UpdateUserProfileVM::getName() const
{
    return m_name;
}

void UpdateUserProfileVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool UpdateUserProfileVM::nameIsSet() const
{
    return m_nameIsSet;
}

void UpdateUserProfileVM::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t UpdateUserProfileVM::getUsername() const
{
    return m_username;
}

void UpdateUserProfileVM::setUsername(const utility::string_t& value)
{
    m_username = value;
    m_usernameIsSet = true;
}

bool UpdateUserProfileVM::usernameIsSet() const
{
    return m_usernameIsSet;
}

void UpdateUserProfileVM::unsetusername()
{
    m_usernameIsSet = false;
}
utility::string_t UpdateUserProfileVM::getEmail() const
{
    return m_email;
}

void UpdateUserProfileVM::setEmail(const utility::string_t& value)
{
    m_email = value;
    m_emailIsSet = true;
}

bool UpdateUserProfileVM::emailIsSet() const
{
    return m_emailIsSet;
}

void UpdateUserProfileVM::unsetemail()
{
    m_emailIsSet = false;
}
utility::string_t UpdateUserProfileVM::getPasswordNew() const
{
    return m_passwordNew;
}

void UpdateUserProfileVM::setPasswordNew(const utility::string_t& value)
{
    m_passwordNew = value;
    m_passwordNewIsSet = true;
}

bool UpdateUserProfileVM::passwordNewIsSet() const
{
    return m_passwordNewIsSet;
}

void UpdateUserProfileVM::unsetpasswordNew()
{
    m_passwordNewIsSet = false;
}
utility::string_t UpdateUserProfileVM::getPasswordNew2() const
{
    return m_passwordNew2;
}

void UpdateUserProfileVM::setPasswordNew2(const utility::string_t& value)
{
    m_passwordNew2 = value;
    m_passwordNew2IsSet = true;
}

bool UpdateUserProfileVM::passwordNew2IsSet() const
{
    return m_passwordNew2IsSet;
}

void UpdateUserProfileVM::unsetpasswordNew2()
{
    m_passwordNew2IsSet = false;
}
}
}
}


