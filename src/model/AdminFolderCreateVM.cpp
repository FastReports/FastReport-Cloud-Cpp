/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdminFolderCreateVM.h"

namespace fastreport {
namespace cloud {
namespace models {



AdminFolderCreateVM::AdminFolderCreateVM()
{
    m_parentId = utility::conversions::to_string_t("");
    m_parentIdIsSet = false;
    m_ownerId = utility::conversions::to_string_t("");
    m_ownerIdIsSet = false;
    m_force = false;
    m_forceIsSet = false;
}

AdminFolderCreateVM::~AdminFolderCreateVM()
{
}

void AdminFolderCreateVM::validate()
{
    // TODO: implement validation
}

web::json::value AdminFolderCreateVM::toJson() const
{
    web::json::value val = this->FolderCreateVM::toJson();
    
    if(m_parentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("parentId"))] = ModelBase::toJson(m_parentId);
    }
    if(m_ownerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("ownerId"))] = ModelBase::toJson(m_ownerId);
    }
    if(m_forceIsSet)
    {
        val[utility::conversions::to_string_t(U("force"))] = ModelBase::toJson(m_force);
    }

    return val;
}

bool AdminFolderCreateVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->FolderCreateVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("parentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parentId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setParentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentId);
            setParentId(refVal_setParentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ownerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ownerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOwnerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOwnerId);
            setOwnerId(refVal_setOwnerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("force"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("force")));
        if(!fieldValue.is_null())
        {
            bool refVal_setForce;
            ok &= ModelBase::fromJson(fieldValue, refVal_setForce);
            setForce(refVal_setForce);
        }
    }
    return ok;
}

void AdminFolderCreateVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_parentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parentId")), m_parentId));
    }
    if(m_ownerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ownerId")), m_ownerId));
    }
    if(m_forceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("force")), m_force));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_tagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_tags));
    }
    if(m_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("icon")), m_icon));
    }
}

bool AdminFolderCreateVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("parentId"))))
    {
        utility::string_t refVal_setParentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parentId"))), refVal_setParentId );
        setParentId(refVal_setParentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ownerId"))))
    {
        utility::string_t refVal_setOwnerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ownerId"))), refVal_setOwnerId );
        setOwnerId(refVal_setOwnerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("force"))))
    {
        bool refVal_setForce;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("force"))), refVal_setForce );
        setForce(refVal_setForce);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<utility::string_t> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("icon"))))
    {
        utility::string_t refVal_setIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("icon"))), refVal_setIcon );
        setIcon(refVal_setIcon);
    }
    return ok;
}

utility::string_t AdminFolderCreateVM::getParentId() const
{
    return m_parentId;
}

void AdminFolderCreateVM::setParentId(const utility::string_t& value)
{
    m_parentId = value;
    m_parentIdIsSet = true;
}

bool AdminFolderCreateVM::parentIdIsSet() const
{
    return m_parentIdIsSet;
}

void AdminFolderCreateVM::unsetparentId()
{
    m_parentIdIsSet = false;
}
utility::string_t AdminFolderCreateVM::getOwnerId() const
{
    return m_ownerId;
}

void AdminFolderCreateVM::setOwnerId(const utility::string_t& value)
{
    m_ownerId = value;
    m_ownerIdIsSet = true;
}

bool AdminFolderCreateVM::ownerIdIsSet() const
{
    return m_ownerIdIsSet;
}

void AdminFolderCreateVM::unsetownerId()
{
    m_ownerIdIsSet = false;
}
bool AdminFolderCreateVM::isForce() const
{
    return m_force;
}

void AdminFolderCreateVM::setForce(bool value)
{
    m_force = value;
    m_forceIsSet = true;
}

bool AdminFolderCreateVM::forceIsSet() const
{
    return m_forceIsSet;
}

void AdminFolderCreateVM::unsetforce()
{
    m_forceIsSet = false;
}
}
}
}


