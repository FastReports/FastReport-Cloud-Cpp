/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EntityType.h"

namespace fastreport {
namespace cloud {
namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

EntityType::eEntityType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("None")))
        return EntityType::eEntityType::EntityType_NONE;
    if (val == utility::conversions::to_string_t(U("Template")))
        return EntityType::eEntityType::EntityType_TEMPLATE;
    if (val == utility::conversions::to_string_t(U("TemplateFolder")))
        return EntityType::eEntityType::EntityType_TEMPLATEFOLDER;
    if (val == utility::conversions::to_string_t(U("Report")))
        return EntityType::eEntityType::EntityType_REPORT;
    if (val == utility::conversions::to_string_t(U("ReportFolder")))
        return EntityType::eEntityType::EntityType_REPORTFOLDER;
    if (val == utility::conversions::to_string_t(U("Export")))
        return EntityType::eEntityType::EntityType_EXPORT;
    if (val == utility::conversions::to_string_t(U("ExportFolder")))
        return EntityType::eEntityType::EntityType_EXPORTFOLDER;
    return {};
}

EnumUnderlyingType fromEnum(EntityType::eEntityType e)
{
    switch (e)
    {
    case EntityType::eEntityType::EntityType_NONE:
        return U("None");
    case EntityType::eEntityType::EntityType_TEMPLATE:
        return U("Template");
    case EntityType::eEntityType::EntityType_TEMPLATEFOLDER:
        return U("TemplateFolder");
    case EntityType::eEntityType::EntityType_REPORT:
        return U("Report");
    case EntityType::eEntityType::EntityType_REPORTFOLDER:
        return U("ReportFolder");
    case EntityType::eEntityType::EntityType_EXPORT:
        return U("Export");
    case EntityType::eEntityType::EntityType_EXPORTFOLDER:
        return U("ExportFolder");
    default:
        break;
    }
    return {};
}
}

EntityType::EntityType()
{
}

EntityType::~EntityType()
{
}

void EntityType::validate()
{
    // TODO: implement validation
}

web::json::value EntityType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool EntityType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void EntityType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool EntityType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

EntityType::eEntityType EntityType::getValue() const
{
   return m_value;
}

void EntityType::setValue(EntityType::eEntityType const value)
{
   m_value = value;
}


}
}
}


