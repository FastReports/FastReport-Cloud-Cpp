/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FileStatusUpdateInternalVM.h"

namespace fastreport {
namespace cloud {
namespace models {



FileStatusUpdateInternalVM::FileStatusUpdateInternalVM()
{
    m_statusIsSet = false;
    m_reasonIsSet = false;
    m_editorId = utility::conversions::to_string_t("");
    m_editorIdIsSet = false;
    m_errorMessage = utility::conversions::to_string_t("");
    m_errorMessageIsSet = false;
}

FileStatusUpdateInternalVM::~FileStatusUpdateInternalVM()
{
}

void FileStatusUpdateInternalVM::validate()
{
    // TODO: implement validation
}

web::json::value FileStatusUpdateInternalVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_statusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_status);
    }
    if(m_reasonIsSet)
    {
        val[utility::conversions::to_string_t(U("reason"))] = ModelBase::toJson(m_reason);
    }
    if(m_editorIdIsSet)
    {
        val[utility::conversions::to_string_t(U("editorId"))] = ModelBase::toJson(m_editorId);
    }
    if(m_errorMessageIsSet)
    {
        val[utility::conversions::to_string_t(U("errorMessage"))] = ModelBase::toJson(m_errorMessage);
    }

    return val;
}

bool FileStatusUpdateInternalVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FileStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reason"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reason")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FileStatusReason> refVal_setReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReason);
            setReason(refVal_setReason);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("editorId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("editorId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEditorId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEditorId);
            setEditorId(refVal_setEditorId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errorMessage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errorMessage")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorMessage);
            setErrorMessage(refVal_setErrorMessage);
        }
    }
    return ok;
}

void FileStatusUpdateInternalVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_status));
    }
    if(m_reasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reason")), m_reason));
    }
    if(m_editorIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("editorId")), m_editorId));
    }
    if(m_errorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errorMessage")), m_errorMessage));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool FileStatusUpdateInternalVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<FileStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reason"))))
    {
        std::shared_ptr<FileStatusReason> refVal_setReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reason"))), refVal_setReason );
        setReason(refVal_setReason);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("editorId"))))
    {
        utility::string_t refVal_setEditorId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("editorId"))), refVal_setEditorId );
        setEditorId(refVal_setEditorId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errorMessage"))))
    {
        utility::string_t refVal_setErrorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errorMessage"))), refVal_setErrorMessage );
        setErrorMessage(refVal_setErrorMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

std::shared_ptr<FileStatus> FileStatusUpdateInternalVM::getStatus() const
{
    return m_status;
}

void FileStatusUpdateInternalVM::setStatus(const std::shared_ptr<FileStatus>& value)
{
    m_status = value;
    m_statusIsSet = true;
}

bool FileStatusUpdateInternalVM::statusIsSet() const
{
    return m_statusIsSet;
}

void FileStatusUpdateInternalVM::unsetstatus()
{
    m_statusIsSet = false;
}
std::shared_ptr<FileStatusReason> FileStatusUpdateInternalVM::getReason() const
{
    return m_reason;
}

void FileStatusUpdateInternalVM::setReason(const std::shared_ptr<FileStatusReason>& value)
{
    m_reason = value;
    m_reasonIsSet = true;
}

bool FileStatusUpdateInternalVM::reasonIsSet() const
{
    return m_reasonIsSet;
}

void FileStatusUpdateInternalVM::unsetreason()
{
    m_reasonIsSet = false;
}
utility::string_t FileStatusUpdateInternalVM::getEditorId() const
{
    return m_editorId;
}

void FileStatusUpdateInternalVM::setEditorId(const utility::string_t& value)
{
    m_editorId = value;
    m_editorIdIsSet = true;
}

bool FileStatusUpdateInternalVM::editorIdIsSet() const
{
    return m_editorIdIsSet;
}

void FileStatusUpdateInternalVM::unseteditorId()
{
    m_editorIdIsSet = false;
}
utility::string_t FileStatusUpdateInternalVM::getErrorMessage() const
{
    return m_errorMessage;
}

void FileStatusUpdateInternalVM::setErrorMessage(const utility::string_t& value)
{
    m_errorMessage = value;
    m_errorMessageIsSet = true;
}

bool FileStatusUpdateInternalVM::errorMessageIsSet() const
{
    return m_errorMessageIsSet;
}

void FileStatusUpdateInternalVM::unseterrorMessage()
{
    m_errorMessageIsSet = false;
}
}
}
}


