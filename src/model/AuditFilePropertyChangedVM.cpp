/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AuditFilePropertyChangedVM.h"

namespace fastreport {
namespace cloud {
namespace models {



AuditFilePropertyChangedVM::AuditFilePropertyChangedVM()
{
    m_propertyName = utility::conversions::to_string_t("");
    m_propertyNameIsSet = false;
    m_oldValueIsSet = false;
    m_newValueIsSet = false;
    m_entityTypeIsSet = false;
}

AuditFilePropertyChangedVM::~AuditFilePropertyChangedVM()
{
}

void AuditFilePropertyChangedVM::validate()
{
    // TODO: implement validation
}

web::json::value AuditFilePropertyChangedVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_propertyNameIsSet)
    {
        val[utility::conversions::to_string_t(U("propertyName"))] = ModelBase::toJson(m_propertyName);
    }
    if(m_oldValueIsSet)
    {
        val[utility::conversions::to_string_t(U("oldValue"))] = ModelBase::toJson(m_oldValue);
    }
    if(m_newValueIsSet)
    {
        val[utility::conversions::to_string_t(U("newValue"))] = ModelBase::toJson(m_newValue);
    }
    if(m_entityTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("entityType"))] = ModelBase::toJson(m_entityType);
    }

    return val;
}

bool AuditFilePropertyChangedVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("propertyName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("propertyName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPropertyName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPropertyName);
            setPropertyName(refVal_setPropertyName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("oldValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("oldValue")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setOldValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOldValue);
            setOldValue(refVal_setOldValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("newValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("newValue")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setNewValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNewValue);
            setNewValue(refVal_setNewValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entityType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entityType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EntityType> refVal_setEntityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntityType);
            setEntityType(refVal_setEntityType);
        }
    }
    return ok;
}

void AuditFilePropertyChangedVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_propertyNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("propertyName")), m_propertyName));
    }
    if(m_oldValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("oldValue")), m_oldValue));
    }
    if(m_newValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("newValue")), m_newValue));
    }
    if(m_entityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entityType")), m_entityType));
    }
    if(m_userIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_userId));
    }
    if(m_entityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entityId")), m_entityId));
    }
    if(m_subscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscriptionId")), m_subscriptionId));
    }
    if(m_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_type));
    }
    if(m_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_id));
    }
    if(m_createdTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdTime")), m_createdTime));
    }
    if(m_creatorUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creatorUserId")), m_creatorUserId));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_adminActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adminAction")), m_adminAction));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool AuditFilePropertyChangedVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("propertyName"))))
    {
        utility::string_t refVal_setPropertyName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("propertyName"))), refVal_setPropertyName );
        setPropertyName(refVal_setPropertyName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("oldValue"))))
    {
        std::shared_ptr<AnyType> refVal_setOldValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("oldValue"))), refVal_setOldValue );
        setOldValue(refVal_setOldValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("newValue"))))
    {
        std::shared_ptr<AnyType> refVal_setNewValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("newValue"))), refVal_setNewValue );
        setNewValue(refVal_setNewValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entityType"))))
    {
        std::shared_ptr<EntityType> refVal_setEntityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entityType"))), refVal_setEntityType );
        setEntityType(refVal_setEntityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entityId"))))
    {
        utility::string_t refVal_setEntityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entityId"))), refVal_setEntityId );
        setEntityId(refVal_setEntityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subscriptionId"))))
    {
        utility::string_t refVal_setSubscriptionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscriptionId"))), refVal_setSubscriptionId );
        setSubscriptionId(refVal_setSubscriptionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<AuditType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdTime"))))
    {
        utility::datetime refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdTime"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creatorUserId"))))
    {
        utility::string_t refVal_setCreatorUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creatorUserId"))), refVal_setCreatorUserId );
        setCreatorUserId(refVal_setCreatorUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adminAction"))))
    {
        bool refVal_setAdminAction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adminAction"))), refVal_setAdminAction );
        setAdminAction(refVal_setAdminAction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t AuditFilePropertyChangedVM::getPropertyName() const
{
    return m_propertyName;
}

void AuditFilePropertyChangedVM::setPropertyName(const utility::string_t& value)
{
    m_propertyName = value;
    m_propertyNameIsSet = true;
}

bool AuditFilePropertyChangedVM::propertyNameIsSet() const
{
    return m_propertyNameIsSet;
}

void AuditFilePropertyChangedVM::unsetpropertyName()
{
    m_propertyNameIsSet = false;
}
std::shared_ptr<AnyType> AuditFilePropertyChangedVM::getOldValue() const
{
    return m_oldValue;
}

void AuditFilePropertyChangedVM::setOldValue(const std::shared_ptr<AnyType>& value)
{
    m_oldValue = value;
    m_oldValueIsSet = true;
}

bool AuditFilePropertyChangedVM::oldValueIsSet() const
{
    return m_oldValueIsSet;
}

void AuditFilePropertyChangedVM::unsetoldValue()
{
    m_oldValueIsSet = false;
}
std::shared_ptr<AnyType> AuditFilePropertyChangedVM::getNewValue() const
{
    return m_newValue;
}

void AuditFilePropertyChangedVM::setNewValue(const std::shared_ptr<AnyType>& value)
{
    m_newValue = value;
    m_newValueIsSet = true;
}

bool AuditFilePropertyChangedVM::newValueIsSet() const
{
    return m_newValueIsSet;
}

void AuditFilePropertyChangedVM::unsetnewValue()
{
    m_newValueIsSet = false;
}
std::shared_ptr<EntityType> AuditFilePropertyChangedVM::getEntityType() const
{
    return m_entityType;
}

void AuditFilePropertyChangedVM::setEntityType(const std::shared_ptr<EntityType>& value)
{
    m_entityType = value;
    m_entityTypeIsSet = true;
}

bool AuditFilePropertyChangedVM::entityTypeIsSet() const
{
    return m_entityTypeIsSet;
}

void AuditFilePropertyChangedVM::unsetentityType()
{
    m_entityTypeIsSet = false;
}
}
}
}


