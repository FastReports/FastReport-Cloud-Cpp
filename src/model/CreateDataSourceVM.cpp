/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateDataSourceVM.h"

namespace fastreport {
namespace cloud {
namespace models {



CreateDataSourceVM::CreateDataSourceVM()
{
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_connectionString = utility::conversions::to_string_t("");
    m_connectionStringIsSet = false;
    m_subscriptionId = utility::conversions::to_string_t("");
    m_subscriptionIdIsSet = false;
    m_connectionTypeIsSet = false;
    m_selectCommandsIsSet = false;
}

CreateDataSourceVM::~CreateDataSourceVM()
{
}

void CreateDataSourceVM::validate()
{
    // TODO: implement validation
}

web::json::value CreateDataSourceVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_name);
    }
    if(m_connectionStringIsSet)
    {
        val[utility::conversions::to_string_t(U("connectionString"))] = ModelBase::toJson(m_connectionString);
    }
    if(m_subscriptionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("subscriptionId"))] = ModelBase::toJson(m_subscriptionId);
    }
    if(m_connectionTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("connectionType"))] = ModelBase::toJson(m_connectionType);
    }
    if(m_selectCommandsIsSet)
    {
        val[utility::conversions::to_string_t(U("selectCommands"))] = ModelBase::toJson(m_selectCommands);
    }

    return val;
}

bool CreateDataSourceVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("connectionString"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("connectionString")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConnectionString;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConnectionString);
            setConnectionString(refVal_setConnectionString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subscriptionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subscriptionId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubscriptionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubscriptionId);
            setSubscriptionId(refVal_setSubscriptionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("connectionType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("connectionType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataSourceConnectionType> refVal_setConnectionType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConnectionType);
            setConnectionType(refVal_setConnectionType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("selectCommands"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("selectCommands")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DataSourceSelectCommandVM>> refVal_setSelectCommands;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelectCommands);
            setSelectCommands(refVal_setSelectCommands);
        }
    }
    return ok;
}

void CreateDataSourceVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_connectionStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("connectionString")), m_connectionString));
    }
    if(m_subscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscriptionId")), m_subscriptionId));
    }
    if(m_connectionTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("connectionType")), m_connectionType));
    }
    if(m_selectCommandsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("selectCommands")), m_selectCommands));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool CreateDataSourceVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("connectionString"))))
    {
        utility::string_t refVal_setConnectionString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("connectionString"))), refVal_setConnectionString );
        setConnectionString(refVal_setConnectionString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subscriptionId"))))
    {
        utility::string_t refVal_setSubscriptionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscriptionId"))), refVal_setSubscriptionId );
        setSubscriptionId(refVal_setSubscriptionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("connectionType"))))
    {
        std::shared_ptr<DataSourceConnectionType> refVal_setConnectionType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("connectionType"))), refVal_setConnectionType );
        setConnectionType(refVal_setConnectionType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("selectCommands"))))
    {
        std::vector<std::shared_ptr<DataSourceSelectCommandVM>> refVal_setSelectCommands;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("selectCommands"))), refVal_setSelectCommands );
        setSelectCommands(refVal_setSelectCommands);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t CreateDataSourceVM::getName() const
{
    return m_name;
}

void CreateDataSourceVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool CreateDataSourceVM::nameIsSet() const
{
    return m_nameIsSet;
}

void CreateDataSourceVM::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t CreateDataSourceVM::getConnectionString() const
{
    return m_connectionString;
}

void CreateDataSourceVM::setConnectionString(const utility::string_t& value)
{
    m_connectionString = value;
    m_connectionStringIsSet = true;
}

bool CreateDataSourceVM::connectionStringIsSet() const
{
    return m_connectionStringIsSet;
}

void CreateDataSourceVM::unsetconnectionString()
{
    m_connectionStringIsSet = false;
}
utility::string_t CreateDataSourceVM::getSubscriptionId() const
{
    return m_subscriptionId;
}

void CreateDataSourceVM::setSubscriptionId(const utility::string_t& value)
{
    m_subscriptionId = value;
    m_subscriptionIdIsSet = true;
}

bool CreateDataSourceVM::subscriptionIdIsSet() const
{
    return m_subscriptionIdIsSet;
}

void CreateDataSourceVM::unsetsubscriptionId()
{
    m_subscriptionIdIsSet = false;
}
std::shared_ptr<DataSourceConnectionType> CreateDataSourceVM::getConnectionType() const
{
    return m_connectionType;
}

void CreateDataSourceVM::setConnectionType(const std::shared_ptr<DataSourceConnectionType>& value)
{
    m_connectionType = value;
    m_connectionTypeIsSet = true;
}

bool CreateDataSourceVM::connectionTypeIsSet() const
{
    return m_connectionTypeIsSet;
}

void CreateDataSourceVM::unsetconnectionType()
{
    m_connectionTypeIsSet = false;
}
std::vector<std::shared_ptr<DataSourceSelectCommandVM>>& CreateDataSourceVM::getSelectCommands()
{
    return m_selectCommands;
}

void CreateDataSourceVM::setSelectCommands(const std::vector<std::shared_ptr<DataSourceSelectCommandVM>>& value)
{
    m_selectCommands = value;
    m_selectCommandsIsSet = true;
}

bool CreateDataSourceVM::selectCommandsIsSet() const
{
    return m_selectCommandsIsSet;
}

void CreateDataSourceVM::unsetselectCommands()
{
    m_selectCommandsIsSet = false;
}
}
}
}


