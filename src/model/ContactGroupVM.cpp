/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ContactGroupVM.h"

namespace fastreport {
namespace cloud {
namespace models {



ContactGroupVM::ContactGroupVM()
{
    m_id = utility::conversions::to_string_t("");
    m_idIsSet = false;
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_subscriptionId = utility::conversions::to_string_t("");
    m_subscriptionIdIsSet = false;
    m_createdTime = utility::datetime();
    m_createdTimeIsSet = false;
    m_creatorUserId = utility::conversions::to_string_t("");
    m_creatorUserIdIsSet = false;
    m_editedTime = utility::datetime();
    m_editedTimeIsSet = false;
    m_editorUserId = utility::conversions::to_string_t("");
    m_editorUserIdIsSet = false;
}

ContactGroupVM::~ContactGroupVM()
{
}

void ContactGroupVM::validate()
{
    // TODO: implement validation
}

web::json::value ContactGroupVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_idIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_id);
    }
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_name);
    }
    if(m_subscriptionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("subscriptionId"))] = ModelBase::toJson(m_subscriptionId);
    }
    if(m_createdTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("createdTime"))] = ModelBase::toJson(m_createdTime);
    }
    if(m_creatorUserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("creatorUserId"))] = ModelBase::toJson(m_creatorUserId);
    }
    if(m_editedTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("editedTime"))] = ModelBase::toJson(m_editedTime);
    }
    if(m_editorUserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("editorUserId"))] = ModelBase::toJson(m_editorUserId);
    }

    return val;
}

bool ContactGroupVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subscriptionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subscriptionId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubscriptionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubscriptionId);
            setSubscriptionId(refVal_setSubscriptionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTime);
            setCreatedTime(refVal_setCreatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creatorUserId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creatorUserId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatorUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatorUserId);
            setCreatorUserId(refVal_setCreatorUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("editedTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("editedTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEditedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEditedTime);
            setEditedTime(refVal_setEditedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("editorUserId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("editorUserId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEditorUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEditorUserId);
            setEditorUserId(refVal_setEditorUserId);
        }
    }
    return ok;
}

void ContactGroupVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_id));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_subscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscriptionId")), m_subscriptionId));
    }
    if(m_createdTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdTime")), m_createdTime));
    }
    if(m_creatorUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creatorUserId")), m_creatorUserId));
    }
    if(m_editedTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("editedTime")), m_editedTime));
    }
    if(m_editorUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("editorUserId")), m_editorUserId));
    }
}

bool ContactGroupVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subscriptionId"))))
    {
        utility::string_t refVal_setSubscriptionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscriptionId"))), refVal_setSubscriptionId );
        setSubscriptionId(refVal_setSubscriptionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdTime"))))
    {
        utility::datetime refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdTime"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creatorUserId"))))
    {
        utility::string_t refVal_setCreatorUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creatorUserId"))), refVal_setCreatorUserId );
        setCreatorUserId(refVal_setCreatorUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("editedTime"))))
    {
        utility::datetime refVal_setEditedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("editedTime"))), refVal_setEditedTime );
        setEditedTime(refVal_setEditedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("editorUserId"))))
    {
        utility::string_t refVal_setEditorUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("editorUserId"))), refVal_setEditorUserId );
        setEditorUserId(refVal_setEditorUserId);
    }
    return ok;
}

utility::string_t ContactGroupVM::getId() const
{
    return m_id;
}

void ContactGroupVM::setId(const utility::string_t& value)
{
    m_id = value;
    m_idIsSet = true;
}

bool ContactGroupVM::idIsSet() const
{
    return m_idIsSet;
}

void ContactGroupVM::unsetid()
{
    m_idIsSet = false;
}
utility::string_t ContactGroupVM::getName() const
{
    return m_name;
}

void ContactGroupVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool ContactGroupVM::nameIsSet() const
{
    return m_nameIsSet;
}

void ContactGroupVM::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t ContactGroupVM::getSubscriptionId() const
{
    return m_subscriptionId;
}

void ContactGroupVM::setSubscriptionId(const utility::string_t& value)
{
    m_subscriptionId = value;
    m_subscriptionIdIsSet = true;
}

bool ContactGroupVM::subscriptionIdIsSet() const
{
    return m_subscriptionIdIsSet;
}

void ContactGroupVM::unsetsubscriptionId()
{
    m_subscriptionIdIsSet = false;
}
utility::datetime ContactGroupVM::getCreatedTime() const
{
    return m_createdTime;
}

void ContactGroupVM::setCreatedTime(const utility::datetime& value)
{
    m_createdTime = value;
    m_createdTimeIsSet = true;
}

bool ContactGroupVM::createdTimeIsSet() const
{
    return m_createdTimeIsSet;
}

void ContactGroupVM::unsetcreatedTime()
{
    m_createdTimeIsSet = false;
}
utility::string_t ContactGroupVM::getCreatorUserId() const
{
    return m_creatorUserId;
}

void ContactGroupVM::setCreatorUserId(const utility::string_t& value)
{
    m_creatorUserId = value;
    m_creatorUserIdIsSet = true;
}

bool ContactGroupVM::creatorUserIdIsSet() const
{
    return m_creatorUserIdIsSet;
}

void ContactGroupVM::unsetcreatorUserId()
{
    m_creatorUserIdIsSet = false;
}
utility::datetime ContactGroupVM::getEditedTime() const
{
    return m_editedTime;
}

void ContactGroupVM::setEditedTime(const utility::datetime& value)
{
    m_editedTime = value;
    m_editedTimeIsSet = true;
}

bool ContactGroupVM::editedTimeIsSet() const
{
    return m_editedTimeIsSet;
}

void ContactGroupVM::unseteditedTime()
{
    m_editedTimeIsSet = false;
}
utility::string_t ContactGroupVM::getEditorUserId() const
{
    return m_editorUserId;
}

void ContactGroupVM::setEditorUserId(const utility::string_t& value)
{
    m_editorUserId = value;
    m_editorUserIdIsSet = true;
}

bool ContactGroupVM::editorUserIdIsSet() const
{
    return m_editorUserIdIsSet;
}

void ContactGroupVM::unseteditorUserId()
{
    m_editorUserIdIsSet = false;
}
}
}
}


