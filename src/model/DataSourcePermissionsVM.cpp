/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DataSourcePermissionsVM.h"

namespace fastreport {
namespace cloud {
namespace models {



DataSourcePermissionsVM::DataSourcePermissionsVM()
{
    m_permissionsIsSet = false;
}

DataSourcePermissionsVM::~DataSourcePermissionsVM()
{
}

void DataSourcePermissionsVM::validate()
{
    // TODO: implement validation
}

web::json::value DataSourcePermissionsVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_permissionsIsSet)
    {
        val[utility::conversions::to_string_t(U("permissions"))] = ModelBase::toJson(m_permissions);
    }

    return val;
}

bool DataSourcePermissionsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("permissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("permissions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataSourcePermissionsCRUDVM> refVal_setPermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPermissions);
            setPermissions(refVal_setPermissions);
        }
    }
    return ok;
}

void DataSourcePermissionsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_permissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("permissions")), m_permissions));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool DataSourcePermissionsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("permissions"))))
    {
        std::shared_ptr<DataSourcePermissionsCRUDVM> refVal_setPermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("permissions"))), refVal_setPermissions );
        setPermissions(refVal_setPermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

std::shared_ptr<DataSourcePermissionsCRUDVM> DataSourcePermissionsVM::getPermissions() const
{
    return m_permissions;
}

void DataSourcePermissionsVM::setPermissions(const std::shared_ptr<DataSourcePermissionsCRUDVM>& value)
{
    m_permissions = value;
    m_permissionsIsSet = true;
}

bool DataSourcePermissionsVM::permissionsIsSet() const
{
    return m_permissionsIsSet;
}

void DataSourcePermissionsVM::unsetpermissions()
{
    m_permissionsIsSet = false;
}
}
}
}


