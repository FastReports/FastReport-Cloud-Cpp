/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MyPermissionsVM.h"

namespace fastreport {
namespace cloud {
namespace models {



MyPermissionsVM::MyPermissionsVM()
{
    m_subscriptionIsSet = false;
    m_filesIsSet = false;
    m_datasourcesIsSet = false;
    m_groupsIsSet = false;
    m_tasksIsSet = false;
}

MyPermissionsVM::~MyPermissionsVM()
{
}

void MyPermissionsVM::validate()
{
    // TODO: implement validation
}

web::json::value MyPermissionsVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_subscriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("subscription"))] = ModelBase::toJson(m_subscription);
    }
    if(m_filesIsSet)
    {
        val[utility::conversions::to_string_t(U("files"))] = ModelBase::toJson(m_files);
    }
    if(m_datasourcesIsSet)
    {
        val[utility::conversions::to_string_t(U("datasources"))] = ModelBase::toJson(m_datasources);
    }
    if(m_groupsIsSet)
    {
        val[utility::conversions::to_string_t(U("groups"))] = ModelBase::toJson(m_groups);
    }
    if(m_tasksIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks"))] = ModelBase::toJson(m_tasks);
    }

    return val;
}

bool MyPermissionsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("subscription"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subscription")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscriptionPermission> refVal_setSubscription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubscription);
            setSubscription(refVal_setSubscription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("files"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("files")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FilePermission> refVal_setFiles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFiles);
            setFiles(refVal_setFiles);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("datasources"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("datasources")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataSourcePermission> refVal_setDatasources;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDatasources);
            setDatasources(refVal_setDatasources);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("groups"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("groups")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GroupPermission> refVal_setGroups;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroups);
            setGroups(refVal_setGroups);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TaskPermission> refVal_setTasks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasks);
            setTasks(refVal_setTasks);
        }
    }
    return ok;
}

void MyPermissionsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_subscriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscription")), m_subscription));
    }
    if(m_filesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("files")), m_files));
    }
    if(m_datasourcesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("datasources")), m_datasources));
    }
    if(m_groupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("groups")), m_groups));
    }
    if(m_tasksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks")), m_tasks));
    }
}

bool MyPermissionsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("subscription"))))
    {
        std::shared_ptr<SubscriptionPermission> refVal_setSubscription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscription"))), refVal_setSubscription );
        setSubscription(refVal_setSubscription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("files"))))
    {
        std::shared_ptr<FilePermission> refVal_setFiles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("files"))), refVal_setFiles );
        setFiles(refVal_setFiles);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("datasources"))))
    {
        std::shared_ptr<DataSourcePermission> refVal_setDatasources;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("datasources"))), refVal_setDatasources );
        setDatasources(refVal_setDatasources);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("groups"))))
    {
        std::shared_ptr<GroupPermission> refVal_setGroups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("groups"))), refVal_setGroups );
        setGroups(refVal_setGroups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks"))))
    {
        std::shared_ptr<TaskPermission> refVal_setTasks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks"))), refVal_setTasks );
        setTasks(refVal_setTasks);
    }
    return ok;
}

std::shared_ptr<SubscriptionPermission> MyPermissionsVM::getSubscription() const
{
    return m_subscription;
}

void MyPermissionsVM::setSubscription(const std::shared_ptr<SubscriptionPermission>& value)
{
    m_subscription = value;
    m_subscriptionIsSet = true;
}

bool MyPermissionsVM::subscriptionIsSet() const
{
    return m_subscriptionIsSet;
}

void MyPermissionsVM::unsetsubscription()
{
    m_subscriptionIsSet = false;
}
std::shared_ptr<FilePermission> MyPermissionsVM::getFiles() const
{
    return m_files;
}

void MyPermissionsVM::setFiles(const std::shared_ptr<FilePermission>& value)
{
    m_files = value;
    m_filesIsSet = true;
}

bool MyPermissionsVM::filesIsSet() const
{
    return m_filesIsSet;
}

void MyPermissionsVM::unsetfiles()
{
    m_filesIsSet = false;
}
std::shared_ptr<DataSourcePermission> MyPermissionsVM::getDatasources() const
{
    return m_datasources;
}

void MyPermissionsVM::setDatasources(const std::shared_ptr<DataSourcePermission>& value)
{
    m_datasources = value;
    m_datasourcesIsSet = true;
}

bool MyPermissionsVM::datasourcesIsSet() const
{
    return m_datasourcesIsSet;
}

void MyPermissionsVM::unsetdatasources()
{
    m_datasourcesIsSet = false;
}
std::shared_ptr<GroupPermission> MyPermissionsVM::getGroups() const
{
    return m_groups;
}

void MyPermissionsVM::setGroups(const std::shared_ptr<GroupPermission>& value)
{
    m_groups = value;
    m_groupsIsSet = true;
}

bool MyPermissionsVM::groupsIsSet() const
{
    return m_groupsIsSet;
}

void MyPermissionsVM::unsetgroups()
{
    m_groupsIsSet = false;
}
std::shared_ptr<TaskPermission> MyPermissionsVM::getTasks() const
{
    return m_tasks;
}

void MyPermissionsVM::setTasks(const std::shared_ptr<TaskPermission>& value)
{
    m_tasks = value;
    m_tasksIsSet = true;
}

bool MyPermissionsVM::tasksIsSet() const
{
    return m_tasksIsSet;
}

void MyPermissionsVM::unsettasks()
{
    m_tasksIsSet = false;
}
}
}
}


