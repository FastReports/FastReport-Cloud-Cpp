/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UserSettingsVM.h"

namespace fastreport {
namespace cloud {
namespace models {



UserSettingsVM::UserSettingsVM()
{
    m_profileVisibilityIsSet = false;
    m_defaultSubscription = utility::conversions::to_string_t("");
    m_defaultSubscriptionIsSet = false;
    m_showHiddenFilesAndFolders = false;
    m_showHiddenFilesAndFoldersIsSet = false;
    m_slaAcceptedDateTime = utility::datetime();
    m_slaAcceptedDateTimeIsSet = false;
    m_subscribedNotificationsIsSet = false;
}

UserSettingsVM::~UserSettingsVM()
{
}

void UserSettingsVM::validate()
{
    // TODO: implement validation
}

web::json::value UserSettingsVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_profileVisibilityIsSet)
    {
        val[utility::conversions::to_string_t(U("profileVisibility"))] = ModelBase::toJson(m_profileVisibility);
    }
    if(m_defaultSubscriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("defaultSubscription"))] = ModelBase::toJson(m_defaultSubscription);
    }
    if(m_showHiddenFilesAndFoldersIsSet)
    {
        val[utility::conversions::to_string_t(U("showHiddenFilesAndFolders"))] = ModelBase::toJson(m_showHiddenFilesAndFolders);
    }
    if(m_slaAcceptedDateTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("slaAcceptedDateTime"))] = ModelBase::toJson(m_slaAcceptedDateTime);
    }
    if(m_subscribedNotificationsIsSet)
    {
        val[utility::conversions::to_string_t(U("subscribedNotifications"))] = ModelBase::toJson(m_subscribedNotifications);
    }

    return val;
}

bool UserSettingsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("profileVisibility"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("profileVisibility")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProfileVisibility> refVal_setProfileVisibility;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProfileVisibility);
            setProfileVisibility(refVal_setProfileVisibility);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("defaultSubscription"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("defaultSubscription")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDefaultSubscription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefaultSubscription);
            setDefaultSubscription(refVal_setDefaultSubscription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("showHiddenFilesAndFolders"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("showHiddenFilesAndFolders")));
        if(!fieldValue.is_null())
        {
            bool refVal_setShowHiddenFilesAndFolders;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShowHiddenFilesAndFolders);
            setShowHiddenFilesAndFolders(refVal_setShowHiddenFilesAndFolders);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("slaAcceptedDateTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slaAcceptedDateTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setSlaAcceptedDateTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSlaAcceptedDateTime);
            setSlaAcceptedDateTime(refVal_setSlaAcceptedDateTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subscribedNotifications"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subscribedNotifications")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AuditType>> refVal_setSubscribedNotifications;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubscribedNotifications);
            setSubscribedNotifications(refVal_setSubscribedNotifications);
        }
    }
    return ok;
}

void UserSettingsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_profileVisibilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("profileVisibility")), m_profileVisibility));
    }
    if(m_defaultSubscriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("defaultSubscription")), m_defaultSubscription));
    }
    if(m_showHiddenFilesAndFoldersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("showHiddenFilesAndFolders")), m_showHiddenFilesAndFolders));
    }
    if(m_slaAcceptedDateTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slaAcceptedDateTime")), m_slaAcceptedDateTime));
    }
    if(m_subscribedNotificationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscribedNotifications")), m_subscribedNotifications));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool UserSettingsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("profileVisibility"))))
    {
        std::shared_ptr<ProfileVisibility> refVal_setProfileVisibility;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("profileVisibility"))), refVal_setProfileVisibility );
        setProfileVisibility(refVal_setProfileVisibility);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("defaultSubscription"))))
    {
        utility::string_t refVal_setDefaultSubscription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("defaultSubscription"))), refVal_setDefaultSubscription );
        setDefaultSubscription(refVal_setDefaultSubscription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("showHiddenFilesAndFolders"))))
    {
        bool refVal_setShowHiddenFilesAndFolders;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("showHiddenFilesAndFolders"))), refVal_setShowHiddenFilesAndFolders );
        setShowHiddenFilesAndFolders(refVal_setShowHiddenFilesAndFolders);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("slaAcceptedDateTime"))))
    {
        utility::datetime refVal_setSlaAcceptedDateTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slaAcceptedDateTime"))), refVal_setSlaAcceptedDateTime );
        setSlaAcceptedDateTime(refVal_setSlaAcceptedDateTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subscribedNotifications"))))
    {
        std::vector<std::shared_ptr<AuditType>> refVal_setSubscribedNotifications;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscribedNotifications"))), refVal_setSubscribedNotifications );
        setSubscribedNotifications(refVal_setSubscribedNotifications);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

std::shared_ptr<ProfileVisibility> UserSettingsVM::getProfileVisibility() const
{
    return m_profileVisibility;
}

void UserSettingsVM::setProfileVisibility(const std::shared_ptr<ProfileVisibility>& value)
{
    m_profileVisibility = value;
    m_profileVisibilityIsSet = true;
}

bool UserSettingsVM::profileVisibilityIsSet() const
{
    return m_profileVisibilityIsSet;
}

void UserSettingsVM::unsetprofileVisibility()
{
    m_profileVisibilityIsSet = false;
}
utility::string_t UserSettingsVM::getDefaultSubscription() const
{
    return m_defaultSubscription;
}

void UserSettingsVM::setDefaultSubscription(const utility::string_t& value)
{
    m_defaultSubscription = value;
    m_defaultSubscriptionIsSet = true;
}

bool UserSettingsVM::defaultSubscriptionIsSet() const
{
    return m_defaultSubscriptionIsSet;
}

void UserSettingsVM::unsetdefaultSubscription()
{
    m_defaultSubscriptionIsSet = false;
}
bool UserSettingsVM::isShowHiddenFilesAndFolders() const
{
    return m_showHiddenFilesAndFolders;
}

void UserSettingsVM::setShowHiddenFilesAndFolders(bool value)
{
    m_showHiddenFilesAndFolders = value;
    m_showHiddenFilesAndFoldersIsSet = true;
}

bool UserSettingsVM::showHiddenFilesAndFoldersIsSet() const
{
    return m_showHiddenFilesAndFoldersIsSet;
}

void UserSettingsVM::unsetshowHiddenFilesAndFolders()
{
    m_showHiddenFilesAndFoldersIsSet = false;
}
utility::datetime UserSettingsVM::getSlaAcceptedDateTime() const
{
    return m_slaAcceptedDateTime;
}

void UserSettingsVM::setSlaAcceptedDateTime(const utility::datetime& value)
{
    m_slaAcceptedDateTime = value;
    m_slaAcceptedDateTimeIsSet = true;
}

bool UserSettingsVM::slaAcceptedDateTimeIsSet() const
{
    return m_slaAcceptedDateTimeIsSet;
}

void UserSettingsVM::unsetslaAcceptedDateTime()
{
    m_slaAcceptedDateTimeIsSet = false;
}
std::vector<std::shared_ptr<AuditType>>& UserSettingsVM::getSubscribedNotifications()
{
    return m_subscribedNotifications;
}

void UserSettingsVM::setSubscribedNotifications(const std::vector<std::shared_ptr<AuditType>>& value)
{
    m_subscribedNotifications = value;
    m_subscribedNotificationsIsSet = true;
}

bool UserSettingsVM::subscribedNotificationsIsSet() const
{
    return m_subscribedNotificationsIsSet;
}

void UserSettingsVM::unsetsubscribedNotifications()
{
    m_subscribedNotificationsIsSet = false;
}
}
}
}


