/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SubscriptionInviteVM.h"

namespace fastreport {
namespace cloud {
namespace models {



SubscriptionInviteVM::SubscriptionInviteVM()
{
    m_usages = 0L;
    m_usagesIsSet = false;
    m_durable = false;
    m_durableIsSet = false;
    m_accessToken = utility::conversions::to_string_t("");
    m_accessTokenIsSet = false;
    m_expiredDate = utility::datetime();
    m_expiredDateIsSet = false;
    m_addedUsersIsSet = false;
    m_creatorUserId = utility::conversions::to_string_t("");
    m_creatorUserIdIsSet = false;
}

SubscriptionInviteVM::~SubscriptionInviteVM()
{
}

void SubscriptionInviteVM::validate()
{
    // TODO: implement validation
}

web::json::value SubscriptionInviteVM::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_usagesIsSet)
    {
        val[utility::conversions::to_string_t(U("usages"))] = ModelBase::toJson(m_usages);
    }
    if(m_durableIsSet)
    {
        val[utility::conversions::to_string_t(U("durable"))] = ModelBase::toJson(m_durable);
    }
    if(m_accessTokenIsSet)
    {
        val[utility::conversions::to_string_t(U("accessToken"))] = ModelBase::toJson(m_accessToken);
    }
    if(m_expiredDateIsSet)
    {
        val[utility::conversions::to_string_t(U("expiredDate"))] = ModelBase::toJson(m_expiredDate);
    }
    if(m_addedUsersIsSet)
    {
        val[utility::conversions::to_string_t(U("addedUsers"))] = ModelBase::toJson(m_addedUsers);
    }
    if(m_creatorUserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("creatorUserId"))] = ModelBase::toJson(m_creatorUserId);
    }

    return val;
}

bool SubscriptionInviteVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("usages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("usages")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setUsages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsages);
            setUsages(refVal_setUsages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("durable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("durable")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDurable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDurable);
            setDurable(refVal_setDurable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accessToken"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accessToken")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccessToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccessToken);
            setAccessToken(refVal_setAccessToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiredDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiredDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiredDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiredDate);
            setExpiredDate(refVal_setExpiredDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("addedUsers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addedUsers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<InvitedUser>> refVal_setAddedUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddedUsers);
            setAddedUsers(refVal_setAddedUsers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creatorUserId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creatorUserId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatorUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatorUserId);
            setCreatorUserId(refVal_setCreatorUserId);
        }
    }
    return ok;
}

void SubscriptionInviteVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_usagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("usages")), m_usages));
    }
    if(m_durableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("durable")), m_durable));
    }
    if(m_accessTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accessToken")), m_accessToken));
    }
    if(m_expiredDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiredDate")), m_expiredDate));
    }
    if(m_addedUsersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addedUsers")), m_addedUsers));
    }
    if(m_creatorUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creatorUserId")), m_creatorUserId));
    }
}

bool SubscriptionInviteVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("usages"))))
    {
        int64_t refVal_setUsages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("usages"))), refVal_setUsages );
        setUsages(refVal_setUsages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("durable"))))
    {
        bool refVal_setDurable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("durable"))), refVal_setDurable );
        setDurable(refVal_setDurable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accessToken"))))
    {
        utility::string_t refVal_setAccessToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accessToken"))), refVal_setAccessToken );
        setAccessToken(refVal_setAccessToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiredDate"))))
    {
        utility::datetime refVal_setExpiredDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiredDate"))), refVal_setExpiredDate );
        setExpiredDate(refVal_setExpiredDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("addedUsers"))))
    {
        std::vector<std::shared_ptr<InvitedUser>> refVal_setAddedUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addedUsers"))), refVal_setAddedUsers );
        setAddedUsers(refVal_setAddedUsers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creatorUserId"))))
    {
        utility::string_t refVal_setCreatorUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creatorUserId"))), refVal_setCreatorUserId );
        setCreatorUserId(refVal_setCreatorUserId);
    }
    return ok;
}

int64_t SubscriptionInviteVM::getUsages() const
{
    return m_usages;
}

void SubscriptionInviteVM::setUsages(int64_t value)
{
    m_usages = value;
    m_usagesIsSet = true;
}

bool SubscriptionInviteVM::usagesIsSet() const
{
    return m_usagesIsSet;
}

void SubscriptionInviteVM::unsetusages()
{
    m_usagesIsSet = false;
}
bool SubscriptionInviteVM::isDurable() const
{
    return m_durable;
}

void SubscriptionInviteVM::setDurable(bool value)
{
    m_durable = value;
    m_durableIsSet = true;
}

bool SubscriptionInviteVM::durableIsSet() const
{
    return m_durableIsSet;
}

void SubscriptionInviteVM::unsetdurable()
{
    m_durableIsSet = false;
}
utility::string_t SubscriptionInviteVM::getAccessToken() const
{
    return m_accessToken;
}

void SubscriptionInviteVM::setAccessToken(const utility::string_t& value)
{
    m_accessToken = value;
    m_accessTokenIsSet = true;
}

bool SubscriptionInviteVM::accessTokenIsSet() const
{
    return m_accessTokenIsSet;
}

void SubscriptionInviteVM::unsetaccessToken()
{
    m_accessTokenIsSet = false;
}
utility::datetime SubscriptionInviteVM::getExpiredDate() const
{
    return m_expiredDate;
}

void SubscriptionInviteVM::setExpiredDate(const utility::datetime& value)
{
    m_expiredDate = value;
    m_expiredDateIsSet = true;
}

bool SubscriptionInviteVM::expiredDateIsSet() const
{
    return m_expiredDateIsSet;
}

void SubscriptionInviteVM::unsetexpiredDate()
{
    m_expiredDateIsSet = false;
}
std::vector<std::shared_ptr<InvitedUser>>& SubscriptionInviteVM::getAddedUsers()
{
    return m_addedUsers;
}

void SubscriptionInviteVM::setAddedUsers(const std::vector<std::shared_ptr<InvitedUser>>& value)
{
    m_addedUsers = value;
    m_addedUsersIsSet = true;
}

bool SubscriptionInviteVM::addedUsersIsSet() const
{
    return m_addedUsersIsSet;
}

void SubscriptionInviteVM::unsetaddedUsers()
{
    m_addedUsersIsSet = false;
}
utility::string_t SubscriptionInviteVM::getCreatorUserId() const
{
    return m_creatorUserId;
}

void SubscriptionInviteVM::setCreatorUserId(const utility::string_t& value)
{
    m_creatorUserId = value;
    m_creatorUserIdIsSet = true;
}

bool SubscriptionInviteVM::creatorUserIdIsSet() const
{
    return m_creatorUserIdIsSet;
}

void SubscriptionInviteVM::unsetcreatorUserId()
{
    m_creatorUserIdIsSet = false;
}
}
}
}


