/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TaskSettingsVM.h"

namespace fastreport {
namespace cloud {
namespace models {



TaskSettingsVM::TaskSettingsVM()
{
    m_prepare = false;
    m_prepareIsSet = false;
    m_exportTemplate = false;
    m_exportTemplateIsSet = false;
    m_exportReport = false;
    m_exportReportIsSet = false;
    m_sendViaEmail = false;
    m_sendViaEmailIsSet = false;
    m_uploadToFTP = false;
    m_uploadToFTPIsSet = false;
    m_sendViaWebhook = false;
    m_sendViaWebhookIsSet = false;
    m_fetchData = false;
    m_fetchDataIsSet = false;
    m_thumbnailReport = false;
    m_thumbnailReportIsSet = false;
    m_thumbnailTemplate = false;
    m_thumbnailTemplateIsSet = false;
}

TaskSettingsVM::~TaskSettingsVM()
{
}

void TaskSettingsVM::validate()
{
    // TODO: implement validation
}

web::json::value TaskSettingsVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_prepareIsSet)
    {
        val[utility::conversions::to_string_t(U("prepare"))] = ModelBase::toJson(m_prepare);
    }
    if(m_exportTemplateIsSet)
    {
        val[utility::conversions::to_string_t(U("exportTemplate"))] = ModelBase::toJson(m_exportTemplate);
    }
    if(m_exportReportIsSet)
    {
        val[utility::conversions::to_string_t(U("exportReport"))] = ModelBase::toJson(m_exportReport);
    }
    if(m_sendViaEmailIsSet)
    {
        val[utility::conversions::to_string_t(U("sendViaEmail"))] = ModelBase::toJson(m_sendViaEmail);
    }
    if(m_uploadToFTPIsSet)
    {
        val[utility::conversions::to_string_t(U("uploadToFTP"))] = ModelBase::toJson(m_uploadToFTP);
    }
    if(m_sendViaWebhookIsSet)
    {
        val[utility::conversions::to_string_t(U("sendViaWebhook"))] = ModelBase::toJson(m_sendViaWebhook);
    }
    if(m_fetchDataIsSet)
    {
        val[utility::conversions::to_string_t(U("fetchData"))] = ModelBase::toJson(m_fetchData);
    }
    if(m_thumbnailReportIsSet)
    {
        val[utility::conversions::to_string_t(U("thumbnailReport"))] = ModelBase::toJson(m_thumbnailReport);
    }
    if(m_thumbnailTemplateIsSet)
    {
        val[utility::conversions::to_string_t(U("thumbnailTemplate"))] = ModelBase::toJson(m_thumbnailTemplate);
    }

    return val;
}

bool TaskSettingsVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("prepare"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prepare")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPrepare;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrepare);
            setPrepare(refVal_setPrepare);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exportTemplate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exportTemplate")));
        if(!fieldValue.is_null())
        {
            bool refVal_setExportTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExportTemplate);
            setExportTemplate(refVal_setExportTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exportReport"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exportReport")));
        if(!fieldValue.is_null())
        {
            bool refVal_setExportReport;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExportReport);
            setExportReport(refVal_setExportReport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sendViaEmail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sendViaEmail")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSendViaEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSendViaEmail);
            setSendViaEmail(refVal_setSendViaEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uploadToFTP"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uploadToFTP")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUploadToFTP;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUploadToFTP);
            setUploadToFTP(refVal_setUploadToFTP);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sendViaWebhook"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sendViaWebhook")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSendViaWebhook;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSendViaWebhook);
            setSendViaWebhook(refVal_setSendViaWebhook);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fetchData"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fetchData")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFetchData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFetchData);
            setFetchData(refVal_setFetchData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thumbnailReport"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thumbnailReport")));
        if(!fieldValue.is_null())
        {
            bool refVal_setThumbnailReport;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThumbnailReport);
            setThumbnailReport(refVal_setThumbnailReport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thumbnailTemplate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thumbnailTemplate")));
        if(!fieldValue.is_null())
        {
            bool refVal_setThumbnailTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThumbnailTemplate);
            setThumbnailTemplate(refVal_setThumbnailTemplate);
        }
    }
    return ok;
}

void TaskSettingsVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_prepareIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prepare")), m_prepare));
    }
    if(m_exportTemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exportTemplate")), m_exportTemplate));
    }
    if(m_exportReportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exportReport")), m_exportReport));
    }
    if(m_sendViaEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sendViaEmail")), m_sendViaEmail));
    }
    if(m_uploadToFTPIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uploadToFTP")), m_uploadToFTP));
    }
    if(m_sendViaWebhookIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sendViaWebhook")), m_sendViaWebhook));
    }
    if(m_fetchDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fetchData")), m_fetchData));
    }
    if(m_thumbnailReportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thumbnailReport")), m_thumbnailReport));
    }
    if(m_thumbnailTemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thumbnailTemplate")), m_thumbnailTemplate));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool TaskSettingsVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("prepare"))))
    {
        bool refVal_setPrepare;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prepare"))), refVal_setPrepare );
        setPrepare(refVal_setPrepare);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exportTemplate"))))
    {
        bool refVal_setExportTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exportTemplate"))), refVal_setExportTemplate );
        setExportTemplate(refVal_setExportTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exportReport"))))
    {
        bool refVal_setExportReport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exportReport"))), refVal_setExportReport );
        setExportReport(refVal_setExportReport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sendViaEmail"))))
    {
        bool refVal_setSendViaEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sendViaEmail"))), refVal_setSendViaEmail );
        setSendViaEmail(refVal_setSendViaEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uploadToFTP"))))
    {
        bool refVal_setUploadToFTP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uploadToFTP"))), refVal_setUploadToFTP );
        setUploadToFTP(refVal_setUploadToFTP);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sendViaWebhook"))))
    {
        bool refVal_setSendViaWebhook;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sendViaWebhook"))), refVal_setSendViaWebhook );
        setSendViaWebhook(refVal_setSendViaWebhook);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fetchData"))))
    {
        bool refVal_setFetchData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fetchData"))), refVal_setFetchData );
        setFetchData(refVal_setFetchData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thumbnailReport"))))
    {
        bool refVal_setThumbnailReport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thumbnailReport"))), refVal_setThumbnailReport );
        setThumbnailReport(refVal_setThumbnailReport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thumbnailTemplate"))))
    {
        bool refVal_setThumbnailTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thumbnailTemplate"))), refVal_setThumbnailTemplate );
        setThumbnailTemplate(refVal_setThumbnailTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

bool TaskSettingsVM::isPrepare() const
{
    return m_prepare;
}

void TaskSettingsVM::setPrepare(bool value)
{
    m_prepare = value;
    m_prepareIsSet = true;
}

bool TaskSettingsVM::prepareIsSet() const
{
    return m_prepareIsSet;
}

void TaskSettingsVM::unsetprepare()
{
    m_prepareIsSet = false;
}
bool TaskSettingsVM::isExportTemplate() const
{
    return m_exportTemplate;
}

void TaskSettingsVM::setExportTemplate(bool value)
{
    m_exportTemplate = value;
    m_exportTemplateIsSet = true;
}

bool TaskSettingsVM::exportTemplateIsSet() const
{
    return m_exportTemplateIsSet;
}

void TaskSettingsVM::unsetexportTemplate()
{
    m_exportTemplateIsSet = false;
}
bool TaskSettingsVM::isExportReport() const
{
    return m_exportReport;
}

void TaskSettingsVM::setExportReport(bool value)
{
    m_exportReport = value;
    m_exportReportIsSet = true;
}

bool TaskSettingsVM::exportReportIsSet() const
{
    return m_exportReportIsSet;
}

void TaskSettingsVM::unsetexportReport()
{
    m_exportReportIsSet = false;
}
bool TaskSettingsVM::isSendViaEmail() const
{
    return m_sendViaEmail;
}

void TaskSettingsVM::setSendViaEmail(bool value)
{
    m_sendViaEmail = value;
    m_sendViaEmailIsSet = true;
}

bool TaskSettingsVM::sendViaEmailIsSet() const
{
    return m_sendViaEmailIsSet;
}

void TaskSettingsVM::unsetsendViaEmail()
{
    m_sendViaEmailIsSet = false;
}
bool TaskSettingsVM::isUploadToFTP() const
{
    return m_uploadToFTP;
}

void TaskSettingsVM::setUploadToFTP(bool value)
{
    m_uploadToFTP = value;
    m_uploadToFTPIsSet = true;
}

bool TaskSettingsVM::uploadToFTPIsSet() const
{
    return m_uploadToFTPIsSet;
}

void TaskSettingsVM::unsetuploadToFTP()
{
    m_uploadToFTPIsSet = false;
}
bool TaskSettingsVM::isSendViaWebhook() const
{
    return m_sendViaWebhook;
}

void TaskSettingsVM::setSendViaWebhook(bool value)
{
    m_sendViaWebhook = value;
    m_sendViaWebhookIsSet = true;
}

bool TaskSettingsVM::sendViaWebhookIsSet() const
{
    return m_sendViaWebhookIsSet;
}

void TaskSettingsVM::unsetsendViaWebhook()
{
    m_sendViaWebhookIsSet = false;
}
bool TaskSettingsVM::isFetchData() const
{
    return m_fetchData;
}

void TaskSettingsVM::setFetchData(bool value)
{
    m_fetchData = value;
    m_fetchDataIsSet = true;
}

bool TaskSettingsVM::fetchDataIsSet() const
{
    return m_fetchDataIsSet;
}

void TaskSettingsVM::unsetfetchData()
{
    m_fetchDataIsSet = false;
}
bool TaskSettingsVM::isThumbnailReport() const
{
    return m_thumbnailReport;
}

void TaskSettingsVM::setThumbnailReport(bool value)
{
    m_thumbnailReport = value;
    m_thumbnailReportIsSet = true;
}

bool TaskSettingsVM::thumbnailReportIsSet() const
{
    return m_thumbnailReportIsSet;
}

void TaskSettingsVM::unsetthumbnailReport()
{
    m_thumbnailReportIsSet = false;
}
bool TaskSettingsVM::isThumbnailTemplate() const
{
    return m_thumbnailTemplate;
}

void TaskSettingsVM::setThumbnailTemplate(bool value)
{
    m_thumbnailTemplate = value;
    m_thumbnailTemplateIsSet = true;
}

bool TaskSettingsVM::thumbnailTemplateIsSet() const
{
    return m_thumbnailTemplateIsSet;
}

void TaskSettingsVM::unsetthumbnailTemplate()
{
    m_thumbnailTemplateIsSet = false;
}
}
}
}


