/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/InvitedUser.h"

namespace fastreport {
namespace cloud {
namespace models {



InvitedUser::InvitedUser()
{
    m_userId = utility::conversions::to_string_t("");
    m_userIdIsSet = false;
    m_invitedAt = utility::datetime();
    m_invitedAtIsSet = false;
}

InvitedUser::~InvitedUser()
{
}

void InvitedUser::validate()
{
    // TODO: implement validation
}

web::json::value InvitedUser::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_userIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_userId);
    }
    if(m_invitedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("invitedAt"))] = ModelBase::toJson(m_invitedAt);
    }

    return val;
}

bool InvitedUser::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invitedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invitedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setInvitedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInvitedAt);
            setInvitedAt(refVal_setInvitedAt);
        }
    }
    return ok;
}

void InvitedUser::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_userIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_userId));
    }
    if(m_invitedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invitedAt")), m_invitedAt));
    }
}

bool InvitedUser::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invitedAt"))))
    {
        utility::datetime refVal_setInvitedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invitedAt"))), refVal_setInvitedAt );
        setInvitedAt(refVal_setInvitedAt);
    }
    return ok;
}

utility::string_t InvitedUser::getUserId() const
{
    return m_userId;
}

void InvitedUser::setUserId(const utility::string_t& value)
{
    m_userId = value;
    m_userIdIsSet = true;
}

bool InvitedUser::userIdIsSet() const
{
    return m_userIdIsSet;
}

void InvitedUser::unsetuserId()
{
    m_userIdIsSet = false;
}
utility::datetime InvitedUser::getInvitedAt() const
{
    return m_invitedAt;
}

void InvitedUser::setInvitedAt(const utility::datetime& value)
{
    m_invitedAt = value;
    m_invitedAtIsSet = true;
}

bool InvitedUser::invitedAtIsSet() const
{
    return m_invitedAtIsSet;
}

void InvitedUser::unsetinvitedAt()
{
    m_invitedAtIsSet = false;
}
}
}
}


