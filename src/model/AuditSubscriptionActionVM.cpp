/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AuditSubscriptionActionVM.h"

namespace fastreport {
namespace cloud {
namespace models {



AuditSubscriptionActionVM::AuditSubscriptionActionVM()
{
    m_periodStart = utility::datetime();
    m_periodStartIsSet = false;
    m_periodEnd = utility::datetime();
    m_periodEndIsSet = false;
    m_planId = utility::conversions::to_string_t("");
    m_planIdIsSet = false;
}

AuditSubscriptionActionVM::~AuditSubscriptionActionVM()
{
}

void AuditSubscriptionActionVM::validate()
{
    // TODO: implement validation
}

web::json::value AuditSubscriptionActionVM::toJson() const
{
    web::json::value val = this->AuditActionVM::toJson();
    
    if(m_periodStartIsSet)
    {
        val[utility::conversions::to_string_t(U("periodStart"))] = ModelBase::toJson(m_periodStart);
    }
    if(m_periodEndIsSet)
    {
        val[utility::conversions::to_string_t(U("periodEnd"))] = ModelBase::toJson(m_periodEnd);
    }
    if(m_planIdIsSet)
    {
        val[utility::conversions::to_string_t(U("planId"))] = ModelBase::toJson(m_planId);
    }

    return val;
}

bool AuditSubscriptionActionVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->AuditActionVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("periodStart"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("periodStart")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setPeriodStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPeriodStart);
            setPeriodStart(refVal_setPeriodStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("periodEnd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("periodEnd")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setPeriodEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPeriodEnd);
            setPeriodEnd(refVal_setPeriodEnd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("planId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("planId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlanId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlanId);
            setPlanId(refVal_setPlanId);
        }
    }
    return ok;
}

void AuditSubscriptionActionVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_periodStartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("periodStart")), m_periodStart));
    }
    if(m_periodEndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("periodEnd")), m_periodEnd));
    }
    if(m_planIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("planId")), m_planId));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
    if(m_userIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_userId));
    }
    if(m_entityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entityId")), m_entityId));
    }
    if(m_subscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscriptionId")), m_subscriptionId));
    }
    if(m_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_type));
    }
    if(m_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_id));
    }
    if(m_createdTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdTime")), m_createdTime));
    }
    if(m_creatorUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creatorUserId")), m_creatorUserId));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_adminActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adminAction")), m_adminAction));
    }
}

bool AuditSubscriptionActionVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("periodStart"))))
    {
        utility::datetime refVal_setPeriodStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("periodStart"))), refVal_setPeriodStart );
        setPeriodStart(refVal_setPeriodStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("periodEnd"))))
    {
        utility::datetime refVal_setPeriodEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("periodEnd"))), refVal_setPeriodEnd );
        setPeriodEnd(refVal_setPeriodEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("planId"))))
    {
        utility::string_t refVal_setPlanId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("planId"))), refVal_setPlanId );
        setPlanId(refVal_setPlanId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entityId"))))
    {
        utility::string_t refVal_setEntityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entityId"))), refVal_setEntityId );
        setEntityId(refVal_setEntityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subscriptionId"))))
    {
        utility::string_t refVal_setSubscriptionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscriptionId"))), refVal_setSubscriptionId );
        setSubscriptionId(refVal_setSubscriptionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<AuditType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdTime"))))
    {
        utility::datetime refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdTime"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creatorUserId"))))
    {
        utility::string_t refVal_setCreatorUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creatorUserId"))), refVal_setCreatorUserId );
        setCreatorUserId(refVal_setCreatorUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adminAction"))))
    {
        bool refVal_setAdminAction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adminAction"))), refVal_setAdminAction );
        setAdminAction(refVal_setAdminAction);
    }
    return ok;
}

utility::datetime AuditSubscriptionActionVM::getPeriodStart() const
{
    return m_periodStart;
}

void AuditSubscriptionActionVM::setPeriodStart(const utility::datetime& value)
{
    m_periodStart = value;
    m_periodStartIsSet = true;
}

bool AuditSubscriptionActionVM::periodStartIsSet() const
{
    return m_periodStartIsSet;
}

void AuditSubscriptionActionVM::unsetperiodStart()
{
    m_periodStartIsSet = false;
}
utility::datetime AuditSubscriptionActionVM::getPeriodEnd() const
{
    return m_periodEnd;
}

void AuditSubscriptionActionVM::setPeriodEnd(const utility::datetime& value)
{
    m_periodEnd = value;
    m_periodEndIsSet = true;
}

bool AuditSubscriptionActionVM::periodEndIsSet() const
{
    return m_periodEndIsSet;
}

void AuditSubscriptionActionVM::unsetperiodEnd()
{
    m_periodEndIsSet = false;
}
utility::string_t AuditSubscriptionActionVM::getPlanId() const
{
    return m_planId;
}

void AuditSubscriptionActionVM::setPlanId(const utility::string_t& value)
{
    m_planId = value;
    m_planIdIsSet = true;
}

bool AuditSubscriptionActionVM::planIdIsSet() const
{
    return m_planIdIsSet;
}

void AuditSubscriptionActionVM::unsetplanId()
{
    m_planIdIsSet = false;
}
}
}
}


