/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateSubscriptionVM.h"

namespace fastreport {
namespace cloud {
namespace models {



UpdateSubscriptionVM::UpdateSubscriptionVM()
{
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_locale = utility::conversions::to_string_t("");
    m_localeIsSet = false;
    m_tagsIsSet = false;
    m_defaultPermissionsIsSet = false;
}

UpdateSubscriptionVM::~UpdateSubscriptionVM()
{
}

void UpdateSubscriptionVM::validate()
{
    // TODO: implement validation
}

web::json::value UpdateSubscriptionVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_name);
    }
    if(m_localeIsSet)
    {
        val[utility::conversions::to_string_t(U("locale"))] = ModelBase::toJson(m_locale);
    }
    if(m_tagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_tags);
    }
    if(m_defaultPermissionsIsSet)
    {
        val[utility::conversions::to_string_t(U("defaultPermissions"))] = ModelBase::toJson(m_defaultPermissions);
    }

    return val;
}

bool UpdateSubscriptionVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("locale"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("locale")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLocale;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocale);
            setLocale(refVal_setLocale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("defaultPermissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("defaultPermissions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DefaultPermissionsVM> refVal_setDefaultPermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefaultPermissions);
            setDefaultPermissions(refVal_setDefaultPermissions);
        }
    }
    return ok;
}

void UpdateSubscriptionVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_localeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("locale")), m_locale));
    }
    if(m_tagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_tags));
    }
    if(m_defaultPermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("defaultPermissions")), m_defaultPermissions));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool UpdateSubscriptionVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("locale"))))
    {
        utility::string_t refVal_setLocale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("locale"))), refVal_setLocale );
        setLocale(refVal_setLocale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<utility::string_t> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("defaultPermissions"))))
    {
        std::shared_ptr<DefaultPermissionsVM> refVal_setDefaultPermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("defaultPermissions"))), refVal_setDefaultPermissions );
        setDefaultPermissions(refVal_setDefaultPermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t UpdateSubscriptionVM::getName() const
{
    return m_name;
}

void UpdateSubscriptionVM::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool UpdateSubscriptionVM::nameIsSet() const
{
    return m_nameIsSet;
}

void UpdateSubscriptionVM::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t UpdateSubscriptionVM::getLocale() const
{
    return m_locale;
}

void UpdateSubscriptionVM::setLocale(const utility::string_t& value)
{
    m_locale = value;
    m_localeIsSet = true;
}

bool UpdateSubscriptionVM::localeIsSet() const
{
    return m_localeIsSet;
}

void UpdateSubscriptionVM::unsetlocale()
{
    m_localeIsSet = false;
}
std::vector<utility::string_t>& UpdateSubscriptionVM::getTags()
{
    return m_tags;
}

void UpdateSubscriptionVM::setTags(const std::vector<utility::string_t>& value)
{
    m_tags = value;
    m_tagsIsSet = true;
}

bool UpdateSubscriptionVM::tagsIsSet() const
{
    return m_tagsIsSet;
}

void UpdateSubscriptionVM::unsettags()
{
    m_tagsIsSet = false;
}
std::shared_ptr<DefaultPermissionsVM> UpdateSubscriptionVM::getDefaultPermissions() const
{
    return m_defaultPermissions;
}

void UpdateSubscriptionVM::setDefaultPermissions(const std::shared_ptr<DefaultPermissionsVM>& value)
{
    m_defaultPermissions = value;
    m_defaultPermissionsIsSet = true;
}

bool UpdateSubscriptionVM::defaultPermissionsIsSet() const
{
    return m_defaultPermissionsIsSet;
}

void UpdateSubscriptionVM::unsetdefaultPermissions()
{
    m_defaultPermissionsIsSet = false;
}
}
}
}


