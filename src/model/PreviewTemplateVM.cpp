/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PreviewTemplateVM.h"

namespace fastreport {
namespace cloud {
namespace models {



PreviewTemplateVM::PreviewTemplateVM()
{
    m_locale = utility::conversions::to_string_t("");
    m_localeIsSet = false;
    m_reportParametersIsSet = false;
    m_cacheTolerance = 0.0;
    m_cacheToleranceIsSet = false;
}

PreviewTemplateVM::~PreviewTemplateVM()
{
}

void PreviewTemplateVM::validate()
{
    // TODO: implement validation
}

web::json::value PreviewTemplateVM::toJson() const
{
    web::json::value val = this->CloudBaseVM::toJson();
    
    if(m_localeIsSet)
    {
        val[utility::conversions::to_string_t(U("locale"))] = ModelBase::toJson(m_locale);
    }
    if(m_reportParametersIsSet)
    {
        val[utility::conversions::to_string_t(U("reportParameters"))] = ModelBase::toJson(m_reportParameters);
    }
    if(m_cacheToleranceIsSet)
    {
        val[utility::conversions::to_string_t(U("cacheTolerance"))] = ModelBase::toJson(m_cacheTolerance);
    }

    return val;
}

bool PreviewTemplateVM::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->CloudBaseVM::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t(U("locale"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("locale")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLocale;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocale);
            setLocale(refVal_setLocale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reportParameters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reportParameters")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setReportParameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportParameters);
            setReportParameters(refVal_setReportParameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cacheTolerance"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cacheTolerance")));
        if(!fieldValue.is_null())
        {
            double refVal_setCacheTolerance;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCacheTolerance);
            setCacheTolerance(refVal_setCacheTolerance);
        }
    }
    return ok;
}

void PreviewTemplateVM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_localeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("locale")), m_locale));
    }
    if(m_reportParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reportParameters")), m_reportParameters));
    }
    if(m_cacheToleranceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cacheTolerance")), m_cacheTolerance));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("$t")), m_t));
    }
}

bool PreviewTemplateVM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("locale"))))
    {
        utility::string_t refVal_setLocale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("locale"))), refVal_setLocale );
        setLocale(refVal_setLocale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reportParameters"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setReportParameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reportParameters"))), refVal_setReportParameters );
        setReportParameters(refVal_setReportParameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cacheTolerance"))))
    {
        double refVal_setCacheTolerance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cacheTolerance"))), refVal_setCacheTolerance );
        setCacheTolerance(refVal_setCacheTolerance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("$t"))))
    {
        utility::string_t refVal_setT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("$t"))), refVal_setT );
        setT(refVal_setT);
    }
    return ok;
}

utility::string_t PreviewTemplateVM::getLocale() const
{
    return m_locale;
}

void PreviewTemplateVM::setLocale(const utility::string_t& value)
{
    m_locale = value;
    m_localeIsSet = true;
}

bool PreviewTemplateVM::localeIsSet() const
{
    return m_localeIsSet;
}

void PreviewTemplateVM::unsetlocale()
{
    m_localeIsSet = false;
}
std::map<utility::string_t, utility::string_t>& PreviewTemplateVM::getReportParameters()
{
    return m_reportParameters;
}

void PreviewTemplateVM::setReportParameters(const std::map<utility::string_t, utility::string_t>& value)
{
    m_reportParameters = value;
    m_reportParametersIsSet = true;
}

bool PreviewTemplateVM::reportParametersIsSet() const
{
    return m_reportParametersIsSet;
}

void PreviewTemplateVM::unsetreportParameters()
{
    m_reportParametersIsSet = false;
}
double PreviewTemplateVM::getCacheTolerance() const
{
    return m_cacheTolerance;
}

void PreviewTemplateVM::setCacheTolerance(double value)
{
    m_cacheTolerance = value;
    m_cacheToleranceIsSet = true;
}

bool PreviewTemplateVM::cacheToleranceIsSet() const
{
    return m_cacheToleranceIsSet;
}

void PreviewTemplateVM::unsetcacheTolerance()
{
    m_cacheToleranceIsSet = false;
}
}
}
}


