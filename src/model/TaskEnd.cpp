/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TaskEnd.h"

namespace fastreport {
namespace cloud {
namespace models {



TaskEnd::TaskEnd()
{
    m_after = 0;
    m_afterIsSet = false;
    m_on = utility::datetime();
    m_onIsSet = false;
}

TaskEnd::~TaskEnd()
{
}

void TaskEnd::validate()
{
    // TODO: implement validation
}

web::json::value TaskEnd::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_afterIsSet)
    {
        val[utility::conversions::to_string_t(U("after"))] = ModelBase::toJson(m_after);
    }
    if(m_onIsSet)
    {
        val[utility::conversions::to_string_t(U("on"))] = ModelBase::toJson(m_on);
    }

    return val;
}

bool TaskEnd::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("after"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("after")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAfter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAfter);
            setAfter(refVal_setAfter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("on"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("on")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setOn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOn);
            setOn(refVal_setOn);
        }
    }
    return ok;
}

void TaskEnd::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_afterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("after")), m_after));
    }
    if(m_onIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("on")), m_on));
    }
}

bool TaskEnd::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("after"))))
    {
        int32_t refVal_setAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("after"))), refVal_setAfter );
        setAfter(refVal_setAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("on"))))
    {
        utility::datetime refVal_setOn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("on"))), refVal_setOn );
        setOn(refVal_setOn);
    }
    return ok;
}

int32_t TaskEnd::getAfter() const
{
    return m_after;
}

void TaskEnd::setAfter(int32_t value)
{
    m_after = value;
    m_afterIsSet = true;
}

bool TaskEnd::afterIsSet() const
{
    return m_afterIsSet;
}

void TaskEnd::unsetafter()
{
    m_afterIsSet = false;
}
utility::datetime TaskEnd::getOn() const
{
    return m_on;
}

void TaskEnd::setOn(const utility::datetime& value)
{
    m_on = value;
    m_onIsSet = true;
}

bool TaskEnd::onIsSet() const
{
    return m_onIsSet;
}

void TaskEnd::unseton()
{
    m_onIsSet = false;
}
}
}
}


